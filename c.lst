mads 2.1.0 build 8 (23 Dec 19)
Source: c.asm
     1 				//Commando konwersja z C64 na Atari+VBXE
     2
     3 							icl 'atari.hea'
Source: atari.hea
     1
     2 				.enum	@dmactl
     3 = 0000				blank	= %00
     4 = 0001				narrow	= %01
     5 = 0002				standard= %10
     6 = 0003				wide	= %11
     7 = 0004				missiles= %100
     8 = 0008				players	= %1000
     9 = 0010				lineX1	= %10000
    10 = 0000				lineX2	= %00000
    11 = 0020				dma	= %100000
    12 				.ende
    13
    14 = 003F			scr48	= @dmactl(wide|dma|players|missiles|lineX1)		;screen 48b
    15 = 003E			scr40	= @dmactl(standard|dma|players|missiles|lineX1)		;screen 40b
    16 = 003D			scr32	= @dmactl(narrow|dma|players|missiles|lineX1)		;screen 32b
    17
    18 				.enum	@pmcntl
    19 = 0001				missiles= %1
    20 = 0002				players	= %10
    21 = 0004				trigs	= %100
    22 				.ende
    23
    24 				.enum	@gtictl
    25 = 0000				prior0	= %0
    26 = 0001				prior1	= %1
    27 = 0002				prior2	= %10
    28 = 0004				prior4	= %100
    29 = 0008				prior8	= %1000
    30 = 0010				ply5	= %10000	; Fifth Player Enable
    31 = 0020				mlc	= %100000	; Multiple Color Player Enable
    32 = 0040				mode9	= %01000000
    33 = 0080				mode10	= %10000000
    34 = 00C0				mode11	= %11000000
    35 				.ende
    36
    37
    38 				* ---------------------------------------------------------------------------------------------
    39 				* ---	OS
    40 				* ---------------------------------------------------------------------------------------------
    41
    42 = 0052			lmargin	= $52
    43 = 0053			rmargin	= $53
    44 = 0054			rowcrs	= $54
    45 = 0055			colcrs	= $55
    46
    47 				* ---------------------------------------------------------------------------------------------
    48 				* ---	KEY ($d209)
    49 				* ---------------------------------------------------------------------------------------------
    50 = 001C			key_esc		= 28
    51 = 0021			key_space	= 33
    52 = 0010			key_v		= 16
    53 = 0015			key_b		= 21
    54 = 0023			key_n		= 35
    55 = 0025			key_m		= 37
    56
    57 				* ---------------------------------------------------------------------------------------------
    58 				* ---	GTIA
    59 				* ---------------------------------------------------------------------------------------------
    60 = D000			hposp0	=	$D000		; pozioma pozycja gracza 0 (Z)
    61 = D001			hposp1	=	$D001		; pozioma pozycja gracza 1 (Z)
    62 = D002			hposp2	=	$D002		; pozioma pozycja gracza 2 (Z)
    63 = D003			hposp3	=	$D003		; pozioma pozycja gracza 3 (Z)
    64 = D004			hposm0	=	$D004		; pozioma pozycja pocisku 0 (Z)
    65 = D005			hposm1	=	$D005		; pozioma pozycja pocisku 1 (Z)
    66 = D006			hposm2	=	$D006		; pozioma pozycja pocisku 2 (Z)
    67 = D007			hposm3	=	$D007		; pozioma pozycja pocisku 3 (Z)
    68 = D008			sizep0	=	$D008		; poziomy rozmiar gracza 0 (Z)
    69 = D009			sizep1	=	$D009		; poziomy rozmiar gracza 1 (Z)
    70 = D00A			sizep2	=	$D00A		; poziomy rozmiar gracza 2 (Z)
    71 = D00B			sizep3	=	$D00B		; poziomy rozmiar gracza 3 (Z)
    72 = D00C			sizem	=	$D00C		; poziomy rozmiar pocisków (Z)
    73 = D00D			grafp0	=	$D00D		; rejestr grafiki gracza 0 (Z)
    74 = D00E			grafp1	=	$D00E		; rejestr grafiki gracza 1 (Z)
    75 = D00F			grafp2	=	$D00F		; rejestr grafiki gracza 2 (Z)
    76 = D010			grafp3	=	$D010		; rejestr grafiki gracza 3 (Z)
    77 = D011			grafm	=	$D011		; rejestr grafiki pocisków (Z)
    78 = D012			colpm0	=	$D012		; rejestr koloru gracza i pocisku 0 (Z)
    79 = D013			colpm1	=	$D013		; rejestr koloru gracza i pocisku 1 (Z)
    80 = D014			colpm2	=	$D014		; rejestr koloru gracza i pocisku 2 (Z)
    81 = D015			colpm3	=	$D015		; rejestr koloru gracza i pocisku 3 (Z)
    82 = D016			colpf0	=	$D016		; rejestr koloru pola gry 0 (Z)
    83 = D017			colpf1	=	$D017		; rejestr koloru pola gry 1 (Z)
    84 = D018			colpf2	=	$D018		; rejestr koloru pola gry 2 (Z)
    85 = D019			colpf3	=	$D019		; rejestr koloru pola gry 3 (Z)
    86 = D01A			colbak	=	$D01A		; rejestr koloru t³a (Z)
    87
    88 = D016			color0	=	colpf0
    89 = D017			color1	=	colpf1
    90 = D018			color2	=	colpf2
    91 = D019			color3	=	colpf3
    92
    93 = D000			kolm0pf	=	$D000		; kolizja pocisku 0 z polem gry (O)
    94 = D001			kolm1pf	=	$D001		; kolizja pocisku 1 z polem gry (O)
    95 = D002			kolm2pf	=	$D002		; kolizja pocisku 2 z polem gry (O)
    96 = D003			kolm3pf	=	$D003		; kolizja pocisku 3 z polem gry (O)
    97 = D004			kolp0pf	=	$D004		; kolizja gracza 0 z polem gry (O)
    98 = D005			kolp1pf	=	$D005		; kolizja gracza 1 z polem gry (O)
    99 = D006			kolp2pf	=	$D006		; kolizja gracza 2 z polem gry (O)
   100 = D007			kolp3pf	=	$D007		; kolizja gracza 3 z polem gry (O)
   101 = D008			kolm0p	=	$D008		; kolizja pocisku 0 z graczem (O)
   102 = D009			kolm1p	=	$D009		; kolizja pocisku 1 z graczem (O)
   103 = D00A			kolm2p	=	$D00A		; kolizja pocisku 2 z graczem (O)
   104 = D00B			kolm3p	=	$D00B		; kolizja pocisku 3 z graczem (O)
   105 = D00C			kolp0p	=	$D00C		; kolizja gracza 0 z innym graczem (O)
   106 = D00D			kolp1p	=	$D00D		; kolizja gracza 1 z innym graczem (O)
   107 = D00E			kolp2p	=	$D00E		; kolizja gracza 2 z innym graczem (O)
   108 = D00F			kolp3p	=	$D00F		; kolizja gracza 3 z innym graczem (O)
   109 = D010			trig0	=	$D010		; stan przycisku joysticka 0 (O)
   110 = D011			trig1	=	$D011		; stan przycisku joysticka 1 (O)
   111 = D013			trig3	=	$D013		; znacznik do³¹czenia cartridge-a (O)
   112 = D014			pal	=	$D014		; znacznik systemu TV (O)
   113
   114 = D01B			gtictl	=	$D01B		; rejestr kontroli uk³adu GTIA
   115 = D01B			gtiactl	=	gtictl
   116
   117 = D01C			vdelay	=	$D01C		; licznik opóŸnienia pionowego P/MG
   118 = D01D			pmcntl	=	$D01D		; rejestr kontroli graczy i pocisków
   119 = D01E			hitclr	=	$D01E		; rejestr kasowania rejestrów kolizji
   120 = D01F			consol	=	$D01F		; rejestr stanu klawiszy konsoli
   121
   122 				* ---------------------------------------------------------------------------------------------
   123 				* ---	POKEY
   124 				* ---------------------------------------------------------------------------------------------
   125
   126 = 0010			irqens	=	$0010		; rejestr-cieñ IRQEN
   127 = 0011			irqstat	=	$0011		; rejestr-cieñ IRQST
   128
   129 = D200			audf1	=	$d200		; czêstotliwoœæ pracy generatora 1 (Z)
   130 = D201			audc1	=	$d201		; rejestr kontroli dŸwiêku generatora 1 (Z)
   131 = D202			audf2	=	$d202		; czêstotliwoœæ pracy generatora 2 (Z)
   132 = D203			audc2	=	$d203		; rejestr kontroli dŸwiêku generatora 2 (Z)
   133 = D204			audf3	=	$d204		; czêstotliwoœæ pracy generatora 3 (Z)
   134 = D205			audc3	=	$d205		; rejestr kontroli dŸwiêku generatora 3 (Z)
   135 = D206			audf4	=	$d206		; czêstotliwoœæ pracy generatora 4 (Z)
   136 = D207			audc4	=	$d207		; rejestr kontroli dŸwiêku generatora 4 (Z)
   137
   138 = D208			audctl	=	$D208		; rejestr kontroli generatorów dŸwiêku (Z)
   139 = D209			stimer	=	$D209		; rejestr zerowania liczników (Z)
   140 = D209			kbcode	=	$D209		; kod ostatnio naciœniêtego klawisza (O)
   141 = D20A			skstres	=	$D20A		; rejestr statusu z³¹cza szeregowego (Z)
   142 = D20A			random	=	$D20A		; rejestr liczby losowej (O)
   143 = D20D			serout	=	$D20D		; szeregowy rejestr wyjœciowy (Z)
   144 = D20D			serin	=	$D20D		; szeregowy rejestr wejœciowy (O)
   145 = D20E			irqen	=	$D20E		; zezwolenie przerwañ IRQ (Z)
   146 = D20E			irqst	=	$D20E		; status przerwañ IRQ (O)
   147 = D20F			skctl	=	$D20F		; rejestr kontroli z³¹cza szeregowego (Z)
   148 = D20F			skstat	=	$D20F		; rejestr statusu z³¹cza szeregowego (O)
   149
   150 = D200			pot0	=	$D200		;wiose³ko 0
   151 = D20B			potg0	=	$D20B		;zerowanie wiose³ek
   152
   153 				* ---------------------------------------------------------------------------------------------
   154 				* ---	PIA
   155 				* ---------------------------------------------------------------------------------------------
   156 = D300			porta	=	$D300		; port A uk³adu PIA
   157 = D301			portb	=	$D301		; port B uk³adu PIA
   158 = D302			pactl	=	$D302		; rejestr kontroli portu A
   159 = D303			pbctl	=	$D303		; rejestr kontroli portu B
   160
   161 				* ---------------------------------------------------------------------------------------------
   162 				* ---	ANTIC
   163 				* ---------------------------------------------------------------------------------------------
   164 = D400			dmactl	=	$D400		; rejestr kontroli dostêpu do pamiêci
   165 = D401			chrctl	=	$D401		; rejestr kontroli wyœwietlania znaków
   166 = D402			dlptr	=	$D402		; adres programu ANTIC-a
   167 = D404			hscrol	=	$D404		; znacznik poziomego przesuwu obrazu
   168 = D405			vscrol	=	$D405		; znacznik pionowego przesuwu obrazu
   169 = D407			pmbase	=	$D407		; adres pamiêci graczy i pocisków
   170 = D409			chbase	=	$D409		; adres zestawu znaków
   171 = D40A			wsync	=	$D40A		; znacznik oczekiwania na synchronizacjê poziom¹
   172 = D40B			vcount	=	$D40B		; licznik linii obrazu
   173 = D40C			lpenh	=	$D40C		; poziome po³o¿enie pióra œwietlengo
   174 = D40D			lpenv	=	$D40D		; pionowe po³o¿enie pióra œwietlnego
   175 = D40E			nmien	=	$D40E		; rejestr zezwoleñ na przerwania NMI
   176 = D40F			nmist	=	$D40F		; rejestr statusu przerwañ NMI
   177
   178 				* ---------------------------------------------------------------------------------------------
   179 				* ---	OS
   180 				* ---------------------------------------------------------------------------------------------
   181
   182 = 02C4			colpf0s	=	$02C4		; rejestr-cieñ COLPF0
   183 = 02C5			colpf1s	=	$02C5		; rejestr-cieñ COLPF1
   184 = 02C6			colpf2s	=	$02C6		; rejestr-cieñ COLPF2
   185 = 02C7			colpf3s	=	$02C7		; rejestr-cieñ COLPF3
   186 = 02C8			colbaks	=	$02C8		; rejestr-cieñ COLBAK
   187 = 0222			vbiv	=   $0222		; systemowy wektor przerwania VBI
   188 = 0200			dliv	=	$0200		;systemowy wektor przerwania DLI
   189 = 0216			vimirq	=	$0216
   190
   191 				* ---------------------------------------------------------------------------------------------
   192 				* ---	HARDWARE
   193 				* ---------------------------------------------------------------------------------------------
   194
   195 = FFFA			nmivec	=	$FFFA		; wektor przerwania NMI
   196 = FFFC			resetvec=	$FFFC		; wektor przerwania RESET
   197 = FFFE			irqvec	=	$FFFE		; wektor przerwania IRQ
     4 								
     5 							opt h-
     6
     7 = 4000			mapa=$4000
     8
     9 = D014			NTSCGTIA	equ $D014	
    10 							
    11 							org $70
    12 							
    13 				zegar		org *+1
    14 				fx_ptr		org *+2
    15 				pom			org *+2
    16 				pom1		org *+2
    17 				pom2		org *+2
    18 				pom0		org *+1
    19 				pom0a		org *+1
    20 				zestaw_znakow	org *+1
    21 				pot0s		org *+1
    22 				pot0s1		org *+1
    23 				refr		org *+1
    24 				vscrol1		org *+1
    25 				licznik_trig	org *+1
    26 				trig0s		org *+1
    27 				trig0s1		org *+1
    28 				level_m		org *+1
    29 				level_s		org *+1
    30 				mapa_ad		org *+2
    31
    32
    33 							
    34
    35 				;
    36 				; **** CONSTANTS ****
    37 				;
    38 = 0010			TOTAL_MAX_SPRITES = 16
    39
    40 				;
    41 				; **** ZP FIELDS ****
    42 				;
    43 = 004C			f4C = $4C
    44 				;
    45 				; **** ZP ABSOLUTE ADDRESSES ****
    46 				;
    47 = 0001			a01 = $01
    48 = 0014			a14 = $14
    49 = 0041			a41 = $41
    50 = 00A5			aA5 = $A5
    51 = 00AE			aAE = $AE
    52 = 00D7			aD7 = $D7
    53 = 00DA			aDA = $DA
    54 				;
    55 				; **** ZP POINTERS ****
    56 				;
    57 = 0019			p19 = $19                       ;Stores current hero animation, but seems unused
    58 = 001A			p1A = $1A
    59 = 0022			p22 = $22                       ;sprite to create: X lo
    60 = 0023			p23 = $23
    61 = 0024			p24 = $24                       ;rows that trigger sprite type init
    62 = 0025			p25 = $25
    63 = 0026			p26 = $26                       ;sprite to create: X hi
    64 = 0027			p27 = $27
    65 = 0028			p28 = $28                       ;what sprite type to create at row
    66 = 0029			p29 = $29
    67 = 002A			p2A = $2A                       ;charset attributes: background priority, collision, etc.
    68 = 002B			p2B = $2B
    69 = 005D			p5D = $5D                       ;Used by music
    70 = 005E			p5E = $5E                       ;Used by music
    71 = 005F			p5F = $5F                       ;Used by music
    72 = 0060			p60 = $60                       ;Used by music
    73 = 00F7			pF7 = $F7
    74 = 00F8			pF8 = $F8
    75 = 00FB			pFB = $FB                       ;$FB/$FC: different meanings depending to the game state
    76 = 00FC			pFC = $FC                       ; On Hiscore, it points to Screen RAM
    77 				                                ; During the game, it points to the Actions table
    78 = 00FD			pFD = $FD                       ;But $FC/$FD is also used during the game to point
    79 				                                ; to the level data and is uses with $2A to determine
    80 				                                ; the sprite-background priority/collision
    81 = 00FE			pFE = $FE
    82 				;
    83 				; **** FIELDS ****
    84 				;
    85 = 0000			f0000 = $0000
    86 = D040			fD040 = $D040
    87 = DB48			fDB48 = $DB48
    88 = DB98			fDB98 = $DB98
    89 = E087			fE087 = $E087
    90 = E348			fE348 = $E348
    91 = E398			fE398 = $E398
    92 = E3F8			fE3F8 = $E3F8
    93
    94 				;
    95 				; **** ABSOLUTE ADDRESSES ****
    96 				;
    97 = 003D			a003D = $003D                   ;Tmp var used by SORT_SPRITES_BY_Y
    98 = 003F			a003F = $003F                   ;Tmp var used by SORT_SPRITES_BY_Y
    99 = 004B			SPRITE_IDX_TBL = $004B          ;$4B-$5A sprite index, used in raster multiplexer
   100 = 00A7			a00A7 = $00A7
   101 = 00A8			VIC_SPRITE_IDX = $00A8          ;Index used for sprite pos (e.g: $D000,idx) in raster intr.
   102 = 00C9			a00C9 = $00C9                   ;Tmp var used by SORT_SPRITES_BY_Y
   103 = 0400			a0400 = $0400                   ;Used by GET_RANDOM
   104 = 0401			a0401 = $0401                   ;Used by GET_RANDOM
   105 = 0402			V_SCROLL_BIT_IDX = $0402        ;pixels scrolled vertically: 0-7
   106 = 0403			V_SCROLL_ROW_IDX = $0403        ;index to the row in the level: 0 means end of scroll (top of map)
   107 = 0404			V_SCROLL_DELTA = $0404          ;How many pixels needs to get scrolled. $0: no scroll needed, $ff: -1 one pixel
   108 = 0405			LVL_MAP_MSB = $0405             ;MSB address for the level map: lvl0=$60, lvl1=$80, lvl3=$a0
   109 = 0406			IRQ_ADDR_LO = $0406
   110 = 0407			IRQ_ADDR_HI = $0407
   111 = 040A			GAME_TICK = $040A               ;Incremented from main loop
   112 = 040B			RASTER_TICK = $040B             ;Incremented from raster routine
   113 								
   114 									org $d800
   115 				SPRITES_X_HI00		org *+1
   116 				SPRITES_X_HI01		org *+3
   117 				SPRITES_X_HI04		org *+1
   118 				SPRITES_X_HI05		org *+(TOTAL_MAX_SPRITES-5)		
   119 				SPRITES_X_LO00 		org *+1
   120 				SPRITES_X_LO01 		org *+3
   121 				SPRITES_X_LO04 		org *+1
   122 				SPRITES_X_LO05 		org *+(TOTAL_MAX_SPRITES-5)
   123 				SPRITES_Y00			org *+1
   124 				SPRITES_Y01			org *+3
   125 				SPRITES_Y04			org *+1
   126 				SPRITES_Y05			org *+(TOTAL_MAX_SPRITES-5)
   127 				SPRITES_BKG_PRI00	org *+1
   128 				SPRITES_BKG_PRI01	org *+3
   129 				SPRITES_BKG_PRI04	org *+1
   130 				SPRITES_BKG_PRI05	org *+(TOTAL_MAX_SPRITES-5)
   131 				SPRITES_COLOR00 	org *+1
   132 				SPRITES_COLOR01		org *+3
   133 				SPRITES_COLOR04		org *+1
   134 				SPRITES_COLOR05		org *+(TOTAL_MAX_SPRITES-5)
   135 				SPRITES_PTR00		org *+1
   136 				SPRITES_PTR01		org *+3
   137 				SPRITES_PTR04		org *+1
   138 				SPRITES_PTR05		org *+(TOTAL_MAX_SPRITES-5)
   139 				SPRITES_DELTA_X00	org *+1
   140 				SPRITES_DELTA_X01	org *+3
   141 				SPRITES_DELTA_X04	org *+1
   142 				SPRITES_DELTA_X05	org *+(TOTAL_MAX_SPRITES-5)
   143 				SPRITES_DELTA_Y00	org *+1
   144 				SPRITES_DELTA_Y01	org *+3
   145 				SPRITES_DELTA_Y04	org *+1
   146 				SPRITES_DELTA_Y05	org *+(TOTAL_MAX_SPRITES-5)
   147 				SPRITES_TYPE00		org *+1
   148 				SPRITES_TYPE01		org *+3
   149 				SPRITES_TYPE04		org *+1
   150 				SPRITES_TYPE05		org *+(TOTAL_MAX_SPRITES-5)
   151 				SPRITES_TMP_A01		org *+3
   152 				SPRITES_TMP_A04		org *+1
   153 				SPRITES_TMP_A05		org *+(TOTAL_MAX_SPRITES-5)
   154 				SPRITES_TMP_B05		org *+(TOTAL_MAX_SPRITES-5)         ;Used as index to delta_tbl and more. Only 11 slots (enemies only)
   155 				SPRITES_TMP_C05		org *+(TOTAL_MAX_SPRITES-5)        ;Used for timer: Only 11 slots (enemies only)
   156 				SPRITES_PREV_Y00	org *+TOTAL_MAX_SPRITES
   157
   158 				;SPRITES_X_HI00 = $040D          ;MSB for X pos
   159 				;SPRITES_X_HI01 = $040E
   160 				;SPRITES_X_HI04 = $0411
   161 				;SPRITES_X_HI05 = $0412
   162 				;SPRITES_X_LO00 = $041D          ;LSB for X pos
   163 				;SPRITES_X_LO01 = $041E
   164 				;SPRITES_X_LO04 = $0421
   165 				;SPRITES_X_LO05 = $0422
   166 				;SPRITES_Y00 = $042D
   167 				;SPRITES_Y01 = $042E
   168 				;SPRITES_Y04 = $0431
   169 				;SPRITES_Y05 = $0432
   170 				;SPRITES_BKG_PRI00 = $043D
   171 				;SPRITES_BKG_PRI01 = $043E
   172 				;SPRITES_BKG_PRI04 = $0441
   173 				;SPRITES_BKG_PRI05 = $0442
   174 				;SPRITES_COLOR00 = $044D         ;primary color of sprite
   175 				;SPRITES_COLOR01 = $044E
   176 				;SPRITES_COLOR04 = $0451
   177 				;SPRITES_COLOR05 = $0452
   178 				;SPRITES_PTR00 = $045D           ;frame to be used by sprite
   179 				;SPRITES_PTR01 = $045E
   180 				;SPRITES_PTR04 = $0461
   181 				;SPRITES_PTR05 = $0462
   182 				;SPRITES_DELTA_X00 = $046D       ;pixels to move horizontally for hero (neg or pos)
   183 				;SPRITES_DELTA_X01 = $046E
   184 				;SPRITES_DELTA_X04 = $0471
   185 				;SPRITES_DELTA_X05 = $0472
   186 				;SPRITES_DELTA_Y00 = $047D       ;pixels to move vertically for hero (neg or pos)
   187 				;SPRITES_DELTA_Y01 = $047E
   188 				;SPRITES_DELTA_Y04 = $0481
   189 				;SPRITES_DELTA_Y05 = $0482
   190 				;SPRITES_TYPE00 = $048D
   191 				;SPRITES_TYPE01 = $048E
   192 				;SPRITES_TYPE04 = $0491
   193 				;SPRITES_TYPE05 = $0492
   194 				;SPRITES_TMP_A01 = $049D         ;Used by different thigns. Only 15 slots (all but 0)
   195 				;SPRITES_TMP_A04 = $04A0         ;referenced in throw grenade
   196 				;SPRITES_TMP_A05 = $04A1         ;Used to link sprites together (?)
   197 				;SPRITES_TMP_B05 = $04AC         ;Used as index to delta_tbl and more. Only 11 slots (enemies only)
   198 				;SPRITES_TMP_C05 = $04B7         ;Used for timer: Only 11 slots (enemies only)
   199 				;SPRITES_PREV_Y00 = $04C2        ;Used by raster interrupt. Is the Y value before applying delta.
   200 				                                ; Valid for all sprites expect for the Hero (SPRITE00)
   201 = 04DF			FIRE_COOLDOWN = $04DF           ;reset with $ff
   202 = 04E0			HERO_ANIM_MOV_IDX = $04E0       ;Movement anim for hero: left,right,up,down,diagonally,etc.
   203 				                                ; See: SOLDIER_ANIM_FRAMES
   204 = 04E1			a04E1 = $04E1                   ;Bullet speed idx (???)
   205 = 04E2			BKG_COLOR0 = $04E2
   206 = 04E3			BKG_COLOR1 = $04E3
   207 = 04E4			BKG_COLOR2 = $04E4
   208 = 04E6			COUNTER1 = $04E6
   209 = 04E7			a04E7 = $04E7                   ;unused
   210 = 04E8			TRIGGER_ROW_IDX = $04E8         ;If equal to row index, create object
   211 = 04E9			a04E9 = $04E9                   ;unused
   212 = 04EA			a04EA = $04EA                   ;Used in mortar guy animation
   213 = 04EC			POW_GUARDS_KILLED = $04EC       ;Number of POW guard killed. When == 2, "Free POW" anim is executed
   214 = 04ED			POW_SPRITE_IDX = $04ED          ;Holds the sprite idx used by POW sprite
   215 = 04EE			a04EE = $04EE                   ;Hero is moving up (unused)
   216 = 04EF			ENEMIES_IN_FORT = $04EF         ;How many enemies are inside the fort/warehouse
   217 = 04F0			TMP_SPRITE_X_LO = $04F0         ;Temp sprite-X LSB for current sprite
   218 = 04F1			TMP_SPRITE_Y = $04F1            ;ditto for Y
   219 = 04F2			TMP_SPRITE_X_HI = $04F2         ;ditto for X MSB
   220 = 04F3			LEVEL_NR = $04F3
   221 = 04F4			ANY_ENEMY_IN_MAP = $04F4        ;How many enemies are in the map. If 0, grenades are not thrown
   222 = 04F5			IS_LEVEL_COMPLETE = $04F5       ;0: game in progress, 1:lvl complete. Exit animation finished (unused apparently)
   223 = 04F7			IS_ANIM_EXIT_DOOR = $04F7       ;1: hero goes to exit door animation in progress
   224 = 04F8			SCORE_LSB = $04F8
   225 = 04F9			SCORE_MSB = $04F9
   226 = 04FD			a04FD = $04FD                   ;unused
   227 = 04FF			GRENADES = $04FF
   228 = 0500			LIVES = $0500
   229 = 0501			a0501 = $0501                   ;unused
   230 = 0502			a0502 = $0502                   ;unused
   231 = 0503			IS_HERO_DEAD = $0503            ;0: hero alive, 1:was shot, 2:fell down in trench
   232 = 0504			SHOOT_FREQ_MASK = $0504         ;How frequent soliders can shoot
   233 = 0505			HISCORE_IS_BULLET_ANIM = $0505  ;1: if the bullet in hiscore is being animated
   234 = 0506			HISCORE_NAME = $0506            ;8 chars reserved for the hiscore name ($0506-$050E)
   235 = 050F			HISCORE_NAME_IDX = $050F        ;Index to the hiscore name
   236 = 0510			HISCORE_SELECTED_CHAR = $0510   ;Selected char in hiscore
   237 = 0511			HISCORE_IS_CHAR_ANIM = $0511    ;1: if the selected char in hiscore is being animated
   238 = 0512			HISCORE_ANIM_CHAR_COUNTER = $0512       ;Counter to the selected char animation in hiscore
   239
   240 				;
   241 				; **** POINTERS ****
   242 				;
   243 = D800			pD800 = $D800
   244 = D829			pD829 = $D829
   245 = D882			pD882 = $D882
   246 = E000			pE000 = $E000
   247 = E029			pE029 = $E029
   248 = E082			pE082 = $E082
   249
   250
   251 				//stale
   252 = E000			ekran=$e000
   253 = 8000			znaki=$8000
   254 = 6000			zestaw0=$6000
   255 = 6400			zestaw1=$6400
   256 = 6800			zestaw2=$6800
   257 = 6C00			zestaw3=$6c00
   258 = 7000			zestaw4=$7000
   259
   260
   261 							opt h+
   262 							
   263 							icl './load/logo.asm'
Source: logo.asm
     1 				//logo 
     2
     3 							org $2000
     4 				; Detect VBXE
     5 				fx_detect
     6 FFFF> 2000-24B8> A9 00 + 			mwa	#$d600	fx_ptr
     7 2008 20 0F 20					jsr	fx_detect_1
     8 200B F0 11					beq	fx_detect_exit
     9 200D E6 72					inc	fx_ptr+1
    10 200F			fx_detect_1
    11 200F A0 40					ldy	#$40	; CORE_VERSION
    12 2011 B1 71					lda	(fx_ptr),y
    13 2013 C9 10					cmp	#$10	; FX 1.xx
    14 2015 D0 07					bne	fx_detect_exit
    15 2017 C8						iny	; MINOR_VERSION
    16 2018 B1 71					lda	(fx_ptr),y
    17 201A 29 70					and	#$70
    18 201C C9 20					cmp	#$20	; 1.2x
    19 201E			fx_detect_exit
    20 201E 60						rts
    21 									
    22
    23
    24 201F			_in0				
    25 201F 20 00 20					jsr fx_detect
    26 2022 F0 03					beq @+
    27 2024 6C 0A 00					jmp (10)
    28 = 2027			@			equ *	
    29
    30 2027 A9 00 8D 2F 02				mva #0 559
    31 202C 8D 00 D4					sta dmactl
    32
    33 202F A0 5D					ldy #$5d
    34 2031 A9 84 91 71					mva #$80+[scr_vbxe>>14] (fx_ptr),y
    35 2035 60						rts
    36 							
    37 2036			_in1		
    38 2036 A0 5D					ldy #$5d
    39 2038 A9 85 91 71					mva #$81+[scr_vbxe>>14] (fx_ptr),y
    40 203C 60						rts
    41 							
    42 203D			_in2		
    43 203D A0 5D					ldy #$5d
    44 203F A9 86 91 71					mva #$82+[scr_vbxe>>14] (fx_ptr),y
    45 2043 60						rts
    46
    47 2044			_in3		
    48 2044 A0 5D					ldy #$5d
    49 2046 A9 87 91 71					mva #$83+[scr_vbxe>>14] (fx_ptr),y
    50 204A 60						rts		
    51
    52 204B			_in4		
    53 204B A0 5D					ldy #$5d
    54 204D A9 88 91 71					mva #$84+[scr_vbxe>>14] (fx_ptr),y
    55 2051 60						rts			
    56
    57 2052			_in5
    58 2052 A9 B9 85 73 A9 20 + 			mwa #paleta pom
    59 205A A0 44					ldy	#$44
    60 205C A9 00 91 71 C8				mva	#0	(fx_ptr),y+	; CSEL ,nr koloru
    61 2061 A9 02 91 71					mva	#2	(fx_ptr),y	; PSEL	,nr palety
    62 							
    63 2065 A5 72					lda fx_ptr+1
    64 2067 8D 87 20					sta _lg0+2
    65 206A 8D 8D 20					sta _lg1+2
    66 206D 8D 91 20					sta _lg2+2
    67 2070 A0 46					ldy #$46
    68 2072 8C 86 20					sty _lg0+1
    69 2075 C8						iny
    70 2076 8C 8C 20					sty _lg1+1
    71 2079 C8						iny
    72 207A 8C 90 20					sty _lg2+1
    73 							
    74
    75 207D A2 04					ldx #4
    76 207F A0 00					ldy #0
    77 2081 C8			@			iny
    78 2082 C8						iny
    79 2083 B1 73					lda (pom),y
    80 2085 8D FF FF		_lg0		sta $ffff
    81 2088 88						dey
    82 2089 B1 73					lda (pom),y
    83 208B 8D FF FF		_lg1		sta $ffff
    84 208E 88						dey
    85 208F 8D FF FF		_lg2		sta $ffff
    86 2092 C8 C8 C8 C8					:4 iny
    87 2096 D0 E9					bne @-
    88 2098 E6 74					inc pom+1
    89 209A CA						dex
    90 209B D0 E4					bne @-
    91
    92 209D A0 5D					ldy #$5d
    93 209F A9 00 91 71					mva #0 (fx_ptr),y
    94
    95 20A3 A0 40					ldy	#$40	; VIDEO_CONTROL
    96 20A5 A9 05 91 71					mva	#1+4	(fx_ptr),y	; xdl_enabled
    97 20A9 C8						iny
    98 20AA A9 00 91 71					mva	#0	(fx_ptr),y	; XDL_ADR0			podaj adres 24bitowy
    99 20AE C8						iny
   100 20AF A9 00 91 71					mva	#0	(fx_ptr),y	; XDL_ADR1
   101 20B3 C8						iny
   102 20B4 A9 02 91 71					mva	#2	(fx_ptr),y	; XDL_ADR2	
   103
   104 20B8 60						rts			
   105 							
   106 20B9			paleta
   107 20B9 04 03 04 00 77 83 + 			ins './load/paleta.dat'
   108 							
   109 02E2-02E3> 1F 20					ini _in0
   110 24B9						org $4000
   111 4000-7FFF> 6C 6C 6C 6C + 			ins './load/load_0.dat'
   112 							
   113 02E2-02E3> 36 20					ini _in1
   114 8000						org $4000
   115 4000-7FFF> 76 76 76 78 + 			ins './load/load_1.dat'
   116 							
   117 02E2-02E3> 3D 20					ini _in2
   118 8000						org $4000
   119 4000-7FFF> 00 00 00 00 + 			ins './load/load_2.dat'
   120 							
   121 02E2-02E3> 44 20					ini _in3
   122 8000						org $4000
   123 4000-47FF> 26 00 CA 00 + 			ins './load/load_3.dat'
   124 							
   125 02E2-02E3> 4B 20					ini _in4
   126 4800						org $4000
   127
   128 4000-400C> 24 00 23				dta	a($24),b(23+12)	; XDLC_OVOFF|XDLC_RTPL  ;24 puste linie
   129 4003 62 88 9E					dta	a($8862),b(160-1-1) ; XDLC_GMON|XDLC_RTPL|XDLC_OVADR|XDLC_END|XDLC_ATT  ; 192 linie w hires
   130 4006 00 00					dta	a(0)		;adres pamieci obrazu dla tych linii	
   131 4008 01 40 01					dta	b(1),a(320)		;3 bajt adresu obrazu=0,256=o ile bajtÃ³w skaczemy co linie
   132 400B 21 FF					dta a($ff21)			;paleta1+szerokosc 320 bajtÃ³w=$11, prio_default=$ff
   133 							
   134 02E2-02E3> 52 20					ini _in5
   264 400D						icl 'init_vbxe'
Source: init_vbxe.asm
     1
     2 				/*			org $600
     3 				dl_load		.he 70,70,70,70,70
     4 							dta $46,a(txt_load)
     5 							dta $41,a(dl_load)
     6 							
     7 				txt_load	dta d'** COMMANDO **  VBXE'
     8
     9 				ini_title
    10 							lda 20
    11 							cmp 20
    12 							beq *-2
    13 							mwa #dl_load 560
    14 							rts
    15
    16 							ini ini_title
    17
    18 							org $2000
    19 				; Detect VBXE
    20 				fx_detect
    21 							mwa	#$d600	fx_ptr
    22 							jsr	fx_detect_1
    23 							beq	fx_detect_exit
    24 							inc	fx_ptr+1
    25 				fx_detect_1
    26 							ldy	#$40	; CORE_VERSION
    27 							lda	(fx_ptr),y
    28 							cmp	#$10	; FX 1.xx
    29 							bne	fx_detect_exit
    30 							iny	; MINOR_VERSION
    31 							lda	(fx_ptr),y
    32 							and	#$70
    33 							cmp	#$20	; 1.2x
    34 				fx_detect_exit
    35 							rts
    36 									
    37
    38
    39 				_init				
    40 							jsr fx_detect
    41 							beq @+
    42 							jmp (10)
    43 				@			equ *	  */
    43
    44
    45 = 003C			chd0=$3c
    46 = 001C			chd1=$1c		;Å¼Ã³Å‚ty?		
    47 							
    48 400D						org $2000
    49 2000			_init			
    50 				//COPY SHAPE		
    51 2000-265A> A0 5D					ldy #$5d
    52 2002 A9 80 91 71					mva #$80+[shape_vbxe>>14] (fx_ptr),y
    53 							
    54 					
    55 2006 A9 00 85 75 A9 40 + 			mwa #$4000 pom1			;miejsce docelowe
    56 200E A9 40 85 73 A9 BE + 			mwa #$8000+[192*83] pom	;gdzie zaczynamy
    57 2016 20 F7 25					jsr copy_shape				;shape 0 x2
    58 							
    59 							
    60 2019 A9 58 85 73 A9 BE + 			mwa #$8000+[24+192*83] pom	;gdzie zaczynamy
    61 2021 20 F7 25					jsr copy_shape				;shape 1
    62 2024 A9 70 85 73 A9 BE + 			mwa #$8000+[48+192*83] pom	;gdzie zaczynamy
    63 202C 20 F7 25					jsr copy_shape				;shape 2
    64 202F A9 88 85 73 A9 BE + 			mwa #$8000+[72+192*83] pom	;gdzie zaczynamy
    65 2037 20 F7 25					jsr copy_shape				;shape 3
    66 							
    67 							
    68 203A A9 A0 85 73 A9 BE + 			mwa #$8000+[96+192*83] pom	;gdzie zaczynamy
    69 2042 20 F7 25					jsr copy_shape				;shape 4
    70 2045 A9 B8 85 73 A9 BE + 			mwa #$8000+[120+192*83] pom	;gdzie zaczynamy
    71 204D 20 F7 25					jsr copy_shape				;shape 5
    72 2050 A9 D0 85 73 A9 BE + 			mwa #$8000+[144+192*83] pom	;gdzie zaczynamy
    73 2058 20 F7 25					jsr copy_shape				;shape 6
    74 205B A9 E8 85 73 A9 BE + 			mwa #$8000+[168+192*83] pom	;gdzie zaczynamy
    75 2063 20 F7 25					jsr copy_shape				;shape 7
    76
    77 							
    78 2066 A9 80 85 73 A9 AE + 			mwa #$8000+[192*62] pom	
    79 206E 20 F7 25					jsr copy_shape				;shape 8
    80 2071 A9 98 85 73 A9 AE + 			mwa #$8000+[24+192*62] pom	;gdzie zaczynamy
    81 2079 20 F7 25					jsr copy_shape				;shape 9
    82 207C A9 B0 85 73 A9 AE + 			mwa #$8000+[48+192*62] pom	;gdzie zaczynamy
    83 2084 20 F7 25					jsr copy_shape				;shape 10
    84 2087 A9 C8 85 73 A9 AE + 			mwa #$8000+[72+192*62] pom	;gdzie zaczynamy
    85 208F 20 F7 25					jsr copy_shape				;shape 11
    86 2092 A9 E0 85 73 A9 AE + 			mwa #$8000+[96+192*62] pom	;gdzie zaczynamy
    87 209A 20 F7 25					jsr copy_shape				;shape 12
    88 209D A9 F8 85 73 A9 AE + 			mwa #$8000+[120+192*62] pom	;gdzie zaczynamy
    89 20A5 20 F7 25					jsr copy_shape				;shape 13
    90 20A8 A9 10 85 73 A9 AF + 			mwa #$8000+[144+192*62] pom	;gdzie zaczynamy
    91 20B0 20 F7 25					jsr copy_shape				;shape 14
    92 20B3 A9 28 85 73 A9 AF + 			mwa #$8000+[168+192*62] pom	;gdzie zaczynamy
    93 20BB 20 F7 25					jsr copy_shape				;shape 15
    94 										
    95 20BE A9 C0 85 73 A9 9E + 			mwa #$8000+[192*41] pom	
    96 20C6 20 F7 25					jsr copy_shape				;shape 16
    97 20C9 A9 D8 85 73 A9 9E + 			mwa #$8000+[24+192*41] pom	;gdzie zaczynamy
    98 20D1 20 F7 25					jsr copy_shape				;shape 17
    99 20D4 A9 F0 85 73 A9 9E + 			mwa #$8000+[48+192*41] pom	;gdzie zaczynamy
   100 20DC 20 F7 25					jsr copy_shape				;shape 18
   101 20DF A9 08 85 73 A9 9F + 			mwa #$8000+[72+192*41] pom	;gdzie zaczynamy
   102 20E7 20 F7 25					jsr copy_shape				;shape 19
   103 20EA A9 20 85 73 A9 9F + 			mwa #$8000+[96+192*41] pom	;gdzie zaczynamy
   104 20F2 20 F7 25					jsr copy_shape				;shape 20
   105 20F5 A9 38 85 73 A9 9F + 			mwa #$8000+[120+192*41] pom	;gdzie zaczynamy
   106 20FD 20 F7 25					jsr copy_shape				;shape 21
   107 2100 A9 50 85 73 A9 9F + 			mwa #$8000+[144+192*41] pom	;gdzie zaczynamy
   108 2108 20 F7 25					jsr copy_shape				;shape 22
   109 210B A9 68 85 73 A9 9F + 			mwa #$8000+[168+192*41] pom	;gdzie zaczynamy
   110 2113 20 F7 25					jsr copy_shape				;shape 23
   111 										
   112 2116 A9 00 85 73 A9 8F + 			mwa #$8000+[192*20] pom	
   113 211E 20 F7 25					jsr copy_shape				;shape 24
   114 2121 A9 18 85 73 A9 8F + 			mwa #$8000+[24+192*20] pom	;gdzie zaczynamy
   115 2129 20 F7 25					jsr copy_shape				;shape 25
   116 212C A9 30 85 73 A9 8F + 			mwa #$8000+[48+192*20] pom	;gdzie zaczynamy
   117 2134 20 F7 25					jsr copy_shape				;shape 26
   118 2137 A9 48 85 73 A9 8F + 			mwa #$8000+[72+192*20] pom	;gdzie zaczynamy
   119 213F 20 F7 25					jsr copy_shape				;shape 27
   120 2142 A9 60 85 73 A9 8F + 			mwa #$8000+[96+192*20] pom	;gdzie zaczynamy
   121 214A A9 1C 8D 00 26				mva #chd1 ch_d+1
   122 214F 20 F7 25					jsr copy_shape				;shape 28		O-napis (ostatnia litera)
   123 2152 A9 3C 8D 00 26				mva #chd0 ch_d+1
   124 2157 A9 78 85 73 A9 8F + 			mwa #$8000+[120+192*20] pom	;gdzie zaczynamy
   125 215F 20 F7 25					jsr copy_shape				;shape 29
   126 2162 A9 90 85 73 A9 8F + 			mwa #$8000+[144+192*20] pom	;gdzie zaczynamy
   127 216A 20 F7 25					jsr copy_shape				;shape 30
   128 216D A9 A8 85 73 A9 8F + 			mwa #$8000+[168+192*20] pom	;gdzie zaczynamy
   129 2175 20 F7 25					jsr copy_shape				;shape 31
   130 							
   131 2178 60						rts
   132
   133 2179			_init1			
   134 2179 A0 5D					ldy #$5d
   135 217B A9 81 91 71					mva #$81 (fx_ptr),y
   136 					
   137 217F A9 00 85 75 A9 40 + 			mwa #$4000 pom1			;miejsce docelowe
   138 2187 A9 40 85 73 A9 BE + 			mwa #$8000+[192*83] pom	;gdzie zaczynamy
   139 218F 20 F7 25					jsr copy_shape				;shape 32 x2
   140 2192 A9 58 85 73 A9 BE + 			mwa #$8000+[24+192*83] pom	;gdzie zaczynamy
   141 219A 20 F7 25					jsr copy_shape				;shape 33
   142 219D A9 70 85 73 A9 BE + 			mwa #$8000+[48+192*83] pom	;gdzie zaczynamy
   143 21A5 20 F7 25					jsr copy_shape				;shape 34
   144 21A8 A9 88 85 73 A9 BE + 			mwa #$8000+[72+192*83] pom	;gdzie zaczynamy
   145 21B0 20 F7 25					jsr copy_shape				;shape 35
   146 21B3 A9 A0 85 73 A9 BE + 			mwa #$8000+[96+192*83] pom	;gdzie zaczynamy
   147 21BB 20 F7 25					jsr copy_shape				;shape 36
   148 21BE A9 B8 85 73 A9 BE + 			mwa #$8000+[120+192*83] pom	;gdzie zaczynamy
   149 21C6 20 F7 25					jsr copy_shape				;shape 37
   150 21C9 A9 D0 85 73 A9 BE + 			mwa #$8000+[144+192*83] pom	;gdzie zaczynamy
   151 21D1 20 F7 25					jsr copy_shape				;shape 38
   152 21D4 A9 E8 85 73 A9 BE + 			mwa #$8000+[168+192*83] pom	;gdzie zaczynamy
   153 21DC 20 F7 25					jsr copy_shape				;shape 39
   154 										
   155 21DF A9 80 85 73 A9 AE + 			mwa #$8000+[192*62] pom	
   156 21E7 20 F7 25					jsr copy_shape				;shape 40
   157 21EA A9 98 85 73 A9 AE + 			mwa #$8000+[24+192*62] pom	;gdzie zaczynamy
   158 21F2 20 F7 25					jsr copy_shape				;shape 41
   159 21F5 A9 B0 85 73 A9 AE + 			mwa #$8000+[48+192*62] pom	;gdzie zaczynamy
   160 21FD 20 F7 25					jsr copy_shape				;shape 42
   161 2200 A9 C8 85 73 A9 AE + 			mwa #$8000+[72+192*62] pom	;gdzie zaczynamy
   162 2208 20 F7 25					jsr copy_shape				;shape 43
   163 220B A9 E0 85 73 A9 AE + 			mwa #$8000+[96+192*62] pom	;gdzie zaczynamy
   164 2213 20 F7 25					jsr copy_shape				;shape 44
   165 2216 A9 F8 85 73 A9 AE + 			mwa #$8000+[120+192*62] pom	;gdzie zaczynamy
   166 221E 20 F7 25					jsr copy_shape				;shape 45
   167 2221 A9 10 85 73 A9 AF + 			mwa #$8000+[144+192*62] pom	;gdzie zaczynamy
   168 2229 20 F7 25					jsr copy_shape				;shape 46
   169 222C A9 28 85 73 A9 AF + 			mwa #$8000+[168+192*62] pom	;gdzie zaczynamy
   170 2234 20 F7 25					jsr copy_shape				;shape 47
   171 										
   172 2237 A9 C0 85 73 A9 9E + 			mwa #$8000+[192*41] pom	
   173 223F 20 F7 25					jsr copy_shape				;shape 48
   174 2242 A9 D8 85 73 A9 9E + 			mwa #$8000+[24+192*41] pom	;gdzie zaczynamy
   175 224A 20 F7 25					jsr copy_shape				;shape 49
   176 224D A9 F0 85 73 A9 9E + 			mwa #$8000+[48+192*41] pom	;gdzie zaczynamy
   177 2255 20 F7 25					jsr copy_shape				;shape 50
   178 2258 A9 08 85 73 A9 9F + 			mwa #$8000+[72+192*41] pom	;gdzie zaczynamy
   179 2260 20 F7 25					jsr copy_shape				;shape 51
   180 2263 A9 20 85 73 A9 9F + 			mwa #$8000+[96+192*41] pom	;gdzie zaczynamy
   181 226B 20 F7 25					jsr copy_shape				;shape 52
   182 226E A9 38 85 73 A9 9F + 			mwa #$8000+[120+192*41] pom	;gdzie zaczynamy
   183 2276 20 F7 25					jsr copy_shape				;shape 53
   184 2279 A9 50 85 73 A9 9F + 			mwa #$8000+[144+192*41] pom	;gdzie zaczynamy
   185 2281 20 F7 25					jsr copy_shape				;shape 54
   186 2284 A9 68 85 73 A9 9F + 			mwa #$8000+[168+192*41] pom	;gdzie zaczynamy
   187 228C 20 F7 25					jsr copy_shape				;shape 55
   188 										
   189 228F A9 00 85 73 A9 8F + 			mwa #$8000+[192*20] pom	
   190 2297 20 F7 25					jsr copy_shape				;shape 56
   191 229A A9 18 85 73 A9 8F + 			mwa #$8000+[24+192*20] pom	;gdzie zaczynamy
   192 22A2 20 F7 25					jsr copy_shape				;shape 57
   193 22A5 A9 30 85 73 A9 8F + 			mwa #$8000+[48+192*20] pom	;gdzie zaczynamy
   194 22AD 20 F7 25					jsr copy_shape				;shape 58
   195 22B0 A9 48 85 73 A9 8F + 			mwa #$8000+[72+192*20] pom	;gdzie zaczynamy
   196 22B8 20 F7 25					jsr copy_shape				;shape 59
   197 22BB A9 60 85 73 A9 8F + 			mwa #$8000+[96+192*20] pom	;gdzie zaczynamy
   198 22C3 20 F7 25					jsr copy_shape				;shape 60
   199 22C6 A9 78 85 73 A9 8F + 			mwa #$8000+[120+192*20] pom	;gdzie zaczynamy
   200 22CE 20 F7 25					jsr copy_shape				;shape 61
   201 22D1 A9 90 85 73 A9 8F + 			mwa #$8000+[144+192*20] pom	;gdzie zaczynamy
   202 22D9 20 F7 25					jsr copy_shape				;shape 62
   203 22DC A9 A8 85 73 A9 8F + 			mwa #$8000+[168+192*20] pom	;gdzie zaczynamy
   204 22E4 20 F7 25					jsr copy_shape				;shape 63
   205 							
   206 22E7 60						rts			
   207 							
   208
   209 22E8			_init2			
   210 22E8 A0 5D					ldy #$5d
   211 22EA A9 82 91 71					mva #$82 (fx_ptr),y
   212 					
   213 22EE A9 00 85 75 A9 40 + 			mwa #$4000 pom1			;miejsce docelowe
   214 22F6 A9 40 85 73 A9 BE + 			mwa #$8000+[192*83] pom	;gdzie zaczynamy
   215 22FE 20 F7 25					jsr copy_shape				;shape 64 x2
   216 2301 A9 58 85 73 A9 BE + 			mwa #$8000+[24+192*83] pom	;gdzie zaczynamy
   217 2309 20 F7 25					jsr copy_shape				;shape 65
   218 230C A9 70 85 73 A9 BE + 			mwa #$8000+[48+192*83] pom	;gdzie zaczynamy
   219 2314 20 F7 25					jsr copy_shape				;shape 66
   220 2317 A9 88 85 73 A9 BE + 			mwa #$8000+[72+192*83] pom	;gdzie zaczynamy
   221 231F 20 F7 25					jsr copy_shape				;shape 67
   222 2322 A9 A0 85 73 A9 BE + 			mwa #$8000+[96+192*83] pom	;gdzie zaczynamy
   223 232A 20 F7 25					jsr copy_shape				;shape 68
   224 232D A9 B8 85 73 A9 BE + 			mwa #$8000+[120+192*83] pom	;gdzie zaczynamy
   225 2335 20 F7 25					jsr copy_shape				;shape 69
   226 2338 A9 D0 85 73 A9 BE + 			mwa #$8000+[144+192*83] pom	;gdzie zaczynamy
   227 2340 20 F7 25					jsr copy_shape				;shape 70
   228 2343 A9 E8 85 73 A9 BE + 			mwa #$8000+[168+192*83] pom	;gdzie zaczynamy
   229 234B 20 F7 25					jsr copy_shape				;shape 71
   230 										
   231 234E A9 80 85 73 A9 AE + 			mwa #$8000+[192*62] pom	
   232 2356 20 F7 25					jsr copy_shape				;shape 72
   233 2359 A9 98 85 73 A9 AE + 			mwa #$8000+[24+192*62] pom	;gdzie zaczynamy
   234 2361 20 F7 25					jsr copy_shape				;shape 73
   235 2364 A9 B0 85 73 A9 AE + 			mwa #$8000+[48+192*62] pom	;gdzie zaczynamy
   236 236C 20 F7 25					jsr copy_shape				;shape 74
   237 236F A9 C8 85 73 A9 AE + 			mwa #$8000+[72+192*62] pom	;gdzie zaczynamy
   238 2377 20 F7 25					jsr copy_shape				;shape 75
   239 237A A9 E0 85 73 A9 AE + 			mwa #$8000+[96+192*62] pom	;gdzie zaczynamy
   240 2382 20 F7 25					jsr copy_shape				;shape 76
   241 2385 A9 F8 85 73 A9 AE + 			mwa #$8000+[120+192*62] pom	;gdzie zaczynamy
   242 238D 20 F7 25					jsr copy_shape				;shape 77
   243 2390 A9 10 85 73 A9 AF + 			mwa #$8000+[144+192*62] pom	;gdzie zaczynamy
   244 2398 20 F7 25					jsr copy_shape				;shape 78
   245 239B A9 28 85 73 A9 AF + 			mwa #$8000+[168+192*62] pom	;gdzie zaczynamy
   246 23A3 20 F7 25					jsr copy_shape				;shape 79
   247 										
   248 23A6 A9 C0 85 73 A9 9E + 			mwa #$8000+[192*41] pom	
   249 23AE 20 F7 25					jsr copy_shape				;shape 80
   250 23B1 A9 D8 85 73 A9 9E + 			mwa #$8000+[24+192*41] pom	;gdzie zaczynamy
   251 23B9 20 F7 25					jsr copy_shape				;shape 81
   252 23BC A9 F0 85 73 A9 9E + 			mwa #$8000+[48+192*41] pom	;gdzie zaczynamy
   253 23C4 20 F7 25					jsr copy_shape				;shape 82
   254 23C7 A9 08 85 73 A9 9F + 			mwa #$8000+[72+192*41] pom	;gdzie zaczynamy
   255 23CF 20 F7 25					jsr copy_shape				;shape 83
   256 23D2 A9 20 85 73 A9 9F + 			mwa #$8000+[96+192*41] pom	;gdzie zaczynamy
   257 23DA 20 F7 25					jsr copy_shape				;shape 84
   258 23DD A9 38 85 73 A9 9F + 			mwa #$8000+[120+192*41] pom	;gdzie zaczynamy
   259 23E5 20 F7 25					jsr copy_shape				;shape 85
   260 23E8 A9 50 85 73 A9 9F + 			mwa #$8000+[144+192*41] pom	;gdzie zaczynamy
   261 23F0 20 F7 25					jsr copy_shape				;shape 86
   262 23F3 A9 68 85 73 A9 9F + 			mwa #$8000+[168+192*41] pom	;gdzie zaczynamy
   263 23FB 20 F7 25					jsr copy_shape				;shape 87
   264 										
   265 23FE A9 00 85 73 A9 8F + 			mwa #$8000+[192*20] pom	
   266 2406 20 F7 25					jsr copy_shape				;shape 88
   267 2409 A9 18 85 73 A9 8F + 			mwa #$8000+[24+192*20] pom	;gdzie zaczynamy
   268 2411 20 F7 25					jsr copy_shape				;shape 89
   269 2414 A9 30 85 73 A9 8F + 			mwa #$8000+[48+192*20] pom	;gdzie zaczynamy
   270 241C 20 F7 25					jsr copy_shape				;shape 90
   271 241F A9 48 85 73 A9 8F + 			mwa #$8000+[72+192*20] pom	;gdzie zaczynamy
   272 2427 20 F7 25					jsr copy_shape				;shape 91
   273 242A A9 60 85 73 A9 8F + 			mwa #$8000+[96+192*20] pom	;gdzie zaczynamy
   274 2432 20 F7 25					jsr copy_shape				;shape 92
   275 2435 A9 78 85 73 A9 8F + 			mwa #$8000+[120+192*20] pom	;gdzie zaczynamy
   276 243D 20 F7 25					jsr copy_shape				;shape 93
   277 2440 A9 90 85 73 A9 8F + 			mwa #$8000+[144+192*20] pom	;gdzie zaczynamy
   278 2448 20 F7 25					jsr copy_shape				;shape 94
   279 244B A9 A8 85 73 A9 8F + 			mwa #$8000+[168+192*20] pom	;gdzie zaczynamy
   280 2453 20 F7 25					jsr copy_shape				;shape 95
   281
   282 2456 60						rts				
   283
   284
   285 2457			_init3			
   286 2457 A0 5D					ldy #$5d
   287 2459 A9 83 91 71					mva #$83 (fx_ptr),y
   288 					
   289 245D A9 00 85 75 A9 40 + 			mwa #$4000 pom1			;miejsce docelowe
   290 2465 A9 C0 85 73 A9 9E + 			mwa #$8000+[192*41] pom	;gdzie zaczynamy
   291 246D 20 F7 25					jsr copy_shape				;shape 96 x2
   292 2470 A9 D8 85 73 A9 9E + 			mwa #$8000+[24+192*41] pom	;gdzie zaczynamy
   293 2478 20 F7 25					jsr copy_shape				;shape 97
   294 247B A9 F0 85 73 A9 9E + 			mwa #$8000+[48+192*41] pom	;gdzie zaczynamy
   295 2483 20 F7 25					jsr copy_shape				;shape 98
   296 2486 A9 08 85 73 A9 9F + 			mwa #$8000+[72+192*41] pom	;gdzie zaczynamy
   297 248E 20 F7 25					jsr copy_shape				;shape 99
   298 2491 A9 20 85 73 A9 9F + 			mwa #$8000+[96+192*41] pom	;gdzie zaczynamy
   299 2499 20 F7 25					jsr copy_shape				;shape 100
   300 249C A9 38 85 73 A9 9F + 			mwa #$8000+[120+192*41] pom	;gdzie zaczynamy
   301 24A4 20 F7 25					jsr copy_shape				;shape 101
   302 24A7 A9 50 85 73 A9 9F + 			mwa #$8000+[144+192*41] pom	;gdzie zaczynamy
   303 24AF A9 1C 8D 00 26				mva #chd1 ch_d+1
   304 24B4 20 F7 25					jsr copy_shape				;shape 102		C-napis (pierwsza litera)
   305 24B7 A9 68 85 73 A9 9F + 			mwa #$8000+[168+192*41] pom	;gdzie zaczynamy			
   306 24BF 20 F7 25					jsr copy_shape				;shape 103		OM			
   307 24C2 A9 00 85 73 A9 8F + 			mwa #$8000+[192*20] pom	
   308 24CA 20 F7 25					jsr copy_shape				;shape 104		MM
   309 24CD A9 18 85 73 A9 8F + 			mwa #$8000+[24+192*20] pom	;gdzie zaczynamy
   310 24D5 20 F7 25					jsr copy_shape				;shape 105		A
   311 24D8 A9 30 85 73 A9 8F + 			mwa #$8000+[48+192*20] pom	;gdzie zaczynamy
   312 24E0 20 F7 25					jsr copy_shape				;shape 106		N
   313 24E3 A9 48 85 73 A9 8F + 			mwa #$8000+[72+192*20] pom	;gdzie zaczynamy
   314 24EB 20 F7 25					jsr copy_shape				;shape 107   	DO
   315 24EE A9 60 85 73 A9 8F + 			mwa #$8000+[96+192*20] pom	;gdzie zaczynamy
   316 24F6 A9 3C 8D 00 26				mva #chd0 ch_d+1			
   317 24FB 20 F7 25					jsr copy_shape				;shape 108
   318 24FE A9 78 85 73 A9 8F + 			mwa #$8000+[120+192*20] pom	;gdzie zaczynamy
   319 2506 20 F7 25					jsr copy_shape				;shape 109
   320 							;mwa #$8000+[144+192*20] pom	;gdzie zaczynamy
   321 2509 A9 60 85 73 A9 A1 + 			mwa #celownik+24*20 pom
   322 2511 20 29 26					jsr copy_shape1				;shape 110
   323 2514 A9 A8 85 73 A9 8F + 			mwa #$8000+[168+192*20] pom	;gdzie zaczynamy
   324 251C 20 F7 25					jsr copy_shape				;shape 111		;pusty
   325
   326 251F 20 76 25					jsr set_colors0
   327 2522 20 42 25					jsr set_colors0b
   328 							
   329 2525 A0 44					ldy	#$44
   330 2527 A9 00 91 71 C8				mva	#0	(fx_ptr),y+	; CSEL ,nr koloru
   331 252C A9 01 91 71 C8				mva	#1	(fx_ptr),y+	; PSEL	,nr palety		
   332 2531 A9 4E 91 71 C8				mva #78 (fx_ptr),y+
   333 2536 A9 3C 91 71 C8				mva #60 (fx_ptr),y+
   334 253B A9 00 91 71					mva #00 (fx_ptr),y				;kolor4 = background (brÄ…zowy)
   335
   336 253F 4C F0 25					jmp end_init
   337
   338
   339 2542			set_colors0b	
   340 2542 A0 44					ldy	#$44
   341 2544 A9 1D 91 71 C8				mva	#1+28	(fx_ptr),y+	; CSEL ,nr koloru   (Å¼Ã³Å‚ty)
   342 2549 A9 01 91 71					mva	#1	(fx_ptr),y	; PSEL	,nr palety
   343 							
   344 254D A2 00					ldx #0
   345 254F A0 46		@			ldy	#$46	; CR
   346 2551 BD 6A 25					lda tab_color0b,x
   347 2554 91 71					sta	(fx_ptr),y		;RED
   348 2556 C8						iny
   349 2557 E8						inx
   350 2558 BD 6A 25					lda tab_color0b,x
   351 255B 91 71					sta	(fx_ptr),y		;GREEN
   352 255D C8						iny
   353 255E E8						inx
   354 255F BD 6A 25					lda tab_color0b,x
   355 2562 91 71					sta	(fx_ptr),y		;BLUE, nr_koloru++
   356 2564 E8						inx
   357 2565 E0 09					cpx #3*3
   358 2567 90 E6					bcc @-
   359 2569 60						rts
   360
   361 256A			tab_color0b
   362 256A 00 00 00					.he 00,00,00		;  (5)
   363 256D 8C 51 29					dta 140,81,41		;
   364 2570 EF F3 73					dta 239,243,115		;
   365 2573 4E 3C 00					dta 78,60,0		;background(brazowy)  (1)
   366
   367 2576			set_colors0	
   368 2576 A0 45					ldy	#$45
   369 2578 A9 01 91 71					mva	#1	(fx_ptr),y	; PSEL	,nr palety
   370 							
   371 257C A2 00					ldx #0
   372 257E A9 01 85 79					mva #1 pom0
   373 							
   374 2582 A5 79		@			lda pom0
   375 							
   376 2584 A0 44					ldy #$44
   377 2586 91 71					sta	(fx_ptr),y	; CSEL ,nr koloru
   378 2588 18						clc
   379 2589 69 04					adc #4
   380 258B 85 79					sta pom0
   381 							
   382 258D A0 46					ldy	#$46	; CR
   383 258F A9 AB					lda #171
   384 2591 91 71					sta	(fx_ptr),y		;RED
   385 2593 C8						iny
   386 2594 91 71					sta	(fx_ptr),y		;GREEN
   387 2596 C8						iny
   388 2597 91 71					sta	(fx_ptr),y		;BLUE, nr_koloru++
   389 							
   390 2599 A0 46					ldy	#$46	; CR
   391 259B BD C0 25					lda tab_color0,x
   392 259E 91 71					sta	(fx_ptr),y		;RED
   393 25A0 C8						iny
   394 25A1 E8						inx
   395 25A2 BD C0 25					lda tab_color0,x
   396 25A5 91 71					sta	(fx_ptr),y		;GREEN
   397 25A7 C8						iny
   398 25A8 E8						inx
   399 25A9 BD C0 25					lda tab_color0,x
   400 25AC 91 71					sta	(fx_ptr),y		;BLUE, nr_koloru++
   401 25AE E8						inx
   402 							
   403 25AF A0 46					ldy	#$46	; CR
   404 25B1 A9 00					lda #0
   405 25B3 91 71					sta	(fx_ptr),y		;RED
   406 25B5 C8						iny
   407 25B6 91 71					sta	(fx_ptr),y		;GREEN
   408 25B8 C8						iny
   409 25B9 91 71					sta	(fx_ptr),y		;BLUE, nr_koloru++
   410 							
   411 25BB E0 30					cpx #16*3
   412 25BD 90 C3					bcc @-
   413 25BF 60						rts
   414
   415
   416 25C0			tab_color0
   417 25C0 00 00 00					dta 0,0,0	;black
   418
   419 25C3 FF FF FF					dta 255,255,255	;1=white			;pomijamy dwa pierwsze kolory
   420
   421 25C6 74 36 2D					dta 116,54,45
   422 							;dta 137,64,54		;2=red
   423
   424 25C9 67 A2 A9					dta 103,162,169
   425 							;dta 122,191,199	;3=cyan
   426
   427 25CC 75 3B 93					dta 117,59,147
   428 							;dta 138,70,174		;4=purple
   429
   430 25CF 55 8F 37					dta 85,143,55		;green		x0,85
   431 							;dta 104,169,65		;5=green
   432
   433 25D2 34 29 89					dta 52,41,137		;blue
   434 							;dta 62,49,162		;6=blue
   435
   436 25D5 B0 BB 60					dta 176,187,96
   437 							;dta 208,220,113	;7=yellow
   438
   439 25D8 7A 50 1F					dta 122,80,31
   440 							;dta 144,95,37		;8=orange
   441
   442 25DB 4E 3C 00					dta 78,60,0
   443 							;dta 92,71,0			;9=brown
   444
   445 25DE 9E 65 5C					dta 158,101,92
   446 							;dta 187,119,109	;10=pink
   447
   448 25E1 48 48 48					dta 72,72,72		;11=dark gray
   449 							;dta 85,85,85		;11=dark gray
   450 							
   451 25E4 6C 6C 6C					dta 108,108,108
   452 							;dta 128,128,128	;12=medium gray
   453
   454 25E7 92 C6 73					dta 146,198,115
   455 							;dta 172,234,136	;13=lite green
   456
   457 25EA 69 5F B9					dta 105,95,185
   458 							;dta 124,112,218	;14=lite blue
   459
   460 25ED AB AB AB					dta 171,171,171	;15=lite gray
   461
   462 						
   463
   464
   465 25F0			end_init			
   466 25F0 A0 5D					ldy #$5d
   467 25F2 A9 00 91 71					mva #0 (fx_ptr),y			;wylacz pamiec vbxe
   468
   469 25F6 60						rts
   470
   471 25F7			copy_shape
   472 25F7 A2 15					ldx #21			;21 linii
   473 25F9 A0 17		@			ldy #24-1			;24-1 kolumn
   474 25FB B1 73		@			lda (pom),y
   475 25FD F0 02					beq *+4
   476 25FF 09 3C		ch_d		ora #$3c	;#$78
   477 2601 91 75					sta (pom1),y
   478 2603 88						dey
   479 2604 10 F5					bpl @-
   480 2606 38						sec			;+1
   481 2607 A5 75					lda pom1
   482 2609 6D FA 25					adc copy_shape+3
   483 260C 85 75					sta pom1
   484 260E 90 02					bcc *+4
   485 2610 E6 76					inc pom1+1
   486 2612 38						sec
   487 2613 A5 73					lda pom
   488 2615 E9 C0					sbc #192
   489 2617 85 73					sta pom
   490 2619 A5 74					lda pom+1
   491 261B E9 00					sbc #0
   492 261D 85 74					sta pom+1
   493 261F CA						dex
   494 2620 D0 D7					bne @-1
   495 							
   496 2622 A9 00 85 75					mva #0 pom1		;wyrownaj do strony
   497 2626 E6 76					inc pom1+1
   498 							
   499 2628 60						rts
   500
   501 2629			copy_shape1
   502 2629 A2 15					ldx #21			;21 linii
   503 262B A0 17		@			ldy #24-1			;24-1 kolumn
   504 262D B1 73		@			lda (pom),y
   505 262F F0 02					beq *+4
   506 2631 09 78					ora #$78
   507 2633 91 75					sta (pom1),y
   508 2635 88						dey
   509 2636 10 F5					bpl @-
   510 2638 38						sec			;+1
   511 2639 A5 75					lda pom1
   512 263B 6D 2C 26					adc copy_shape1+3
   513 263E 85 75					sta pom1
   514 2640 90 02					bcc *+4
   515 2642 E6 76					inc pom1+1
   516 2644 38						sec
   517 2645 A5 73					lda pom
   518 2647 E9 18					sbc #24
   519 2649 85 73					sta pom
   520 264B A5 74					lda pom+1
   521 264D E9 00					sbc #0
   522 264F 85 74					sta pom+1
   523 2651 CA						dex
   524 2652 D0 D7					bne @-1
   525 							
   526 2654 A9 00 85 75					mva #0 pom1		;wyrownaj do strony
   527 2658 E6 76					inc pom1+1
   528 							
   529 265A 60						rts
   530
   531 							
   532 							
   533 265B						org $8000
   534 8000-BEFF> 00 00 00 00 + 			ins './sprites/sprites0.spr'
   535 							
   536 02E2-02E3> 00 20					ini _init
   537 							
   538 BF00						org $8000
   539 8000-BEFF> 00 00 00 00 + 			ins './sprites/sprites1.spr'
   540 							
   541 02E2-02E3> 79 21					ini _init1		
   542
   543 BF00						org $8000
   544 8000-BEFF> 03 03 00 00 + 			ins './sprites/sprites2.spr'
   545 							
   546 02E2-02E3> E8 22					ini _init2			
   547 							
   548 BF00						org $8000
   549 8000-A177> 02 02 03 03 + 			ins './sprites/sprites3.spr'
   550 9F80			celownik			
   551 9F80 00 00 00 00 00 00 + 			ins './sprites/celownik.dat'
   552 							
   553 02E2-02E3> 57 24					ini _init3	
   554
   555
   556 							
   265 A178						icl 'init_vbxe1'
Source: init_vbxe1.asm
     1 				//inicjalizacja vbxe
     2 = 0000			shape_vbxe=$00000
     3 = 010000			scr_vbxe=$10000			//(2 pages)
     4 = 040000			dane_vbxe=$40000
     5 = 050000			map_vbxe=$50000
     6 = 060000			znaki0_vbxe=$60000
     7 = 070000			znaki1_vbxe=$70000
     8
     9
    10 = 038000			xdl_vbxe=$38000
    11 = 038040			clear_vbxe=$38040
    12 = 038100			cp_znaki_vbxe=$38100	; konczy sie dokladnie przed pasek_vbxe
    13 = 03817E			pasek_vbxe=$3817e		;zmieÅ›ci siÄ™ dokÅ‚adnie $2fa=762 w pierwszej16,potrzeba jeszcze 840-762=78 na drugiej 16
    14 = 03C666			duszki_vbxe=$3c666
    15
    16
    17
    18 							
    19 							
    20 A178						org $2000
    21
    22 								
    23 2000			ini0
    24 2000-2236> A0 5D					ldy #$5d
    25 2002 A9 98 91 71					mva #$80+[znaki0_vbxe>>14] (fx_ptr),y   //zestaw00
    26 2006 60						rts
    27 							
    28 2007			ini1
    29 2007 A0 5D					ldy #$5d
    30 2009 A9 99 91 71					mva #$81+[znaki0_vbxe>>14] (fx_ptr),y   //zestaw01
    31 200D 60						rts
    32 							
    33 200E			ini2
    34 200E A0 5D					ldy #$5d
    35 2010 A9 9A 91 71					mva #$82+[znaki0_vbxe>>14] (fx_ptr),y   //zestaw02
    36 2014 60						rts
    37 							
    38 2015			ini3
    39 2015 A0 5D					ldy #$5d
    40 2017 A9 9B 91 71					mva #$83+[znaki0_vbxe>>14] (fx_ptr),y   //zestaw03
    41 201B 60						rts	
    42 							
    43 201C			ini3a
    44 201C A0 5D					ldy #$5d
    45 201E A9 9C 91 71					mva #$80+[znaki1_vbxe>>14] (fx_ptr),y   //zestaw04
    46 2022 60						rts	
    47
    48 2023			ini3b
    49 2023 A0 5D					ldy #$5d
    50 2025 A9 9D 91 71					mva #$81+[znaki1_vbxe>>14] (fx_ptr),y   //zestaw05
    51 2029 60						rts	
    52
    53 202A			ini3c
    54 202A A0 5D					ldy #$5d
    55 202C A9 9E 91 71					mva #$82+[znaki1_vbxe>>14] (fx_ptr),y   //zestaw06
    56 2030 60						rts	
    57
    58 2031			ini3d
    59 2031 A0 5D					ldy #$5d
    60 2033 A9 9F 91 71					mva #$83+[znaki1_vbxe>>14] (fx_ptr),y   //zestaw07
    61 2037 60						rts				
    62
    63 2038			ini4
    64 2038 A0 5D					ldy #$5d
    65 203A A9 94 91 71					mva #$80+[map_vbxe>>14] (fx_ptr),y   //mapy
    66 203E 60						rts	
    67 							
    68 203F			ini4a
    69 203F A0 5D					ldy #$5d
    70 2041 A9 95 91 71					mva #$81+[map_vbxe>>14] (fx_ptr),y   //mapy
    71 2045 60						rts				
    72
    73 2046			ini4b
    74 2046 A0 5D					ldy #$5d
    75 2048 A9 96 91 71					mva #$82+[map_vbxe>>14] (fx_ptr),y   //mapy
    76 204C 60						rts	
    77 							
    78 204D			ini4c
    79 204D A0 5D					ldy #$5d
    80 204F A9 97 91 71					mva #$83+[map_vbxe>>14] (fx_ptr),y   //mapy
    81 2053 60						rts	
    82
    83 2054			ini4d
    84 2054 A0 5D					ldy #$5d
    85 2056 A9 92 91 71					mva #$82+[dane_vbxe>>14] (fx_ptr),y   //mapy
    86
    87 205A 60						rts				
    88
    89 205B			ini5		
    90 205B A0 5D					ldy #$5d
    91 205D A9 8E 91 71					mva #$80+[xdl_vbxe>>14] (fx_ptr),y   //xdl
    92 							
    93 2061 A2 0C					ldx #xdl_len-1
    94 2063 BD 6D 21		@			lda xdl_src,x
    95 2066 9D 00 40					sta $4000+[xdl_vbxe & $3fff],x
    96 2069 CA						dex
    97 206A 10 F7					bpl @-
    98 							
    99 					
   100 				//bcb cp_znaki			
   101 206C A2 7D					ldx #6*21-1
   102 206E BD 8F 21		@			lda cp_znaki_src,x
   103 2071 9D 00 41					sta $4000+[cp_znaki_vbxe & $3fff],x
   104 2074 CA						dex
   105 2075 10 F7					bpl @-
   106 							
   107 2077 A2 14					ldx #20
   108 2079 BD 22 22		@			lda clear_src,x
   109 207C 9D 40 40					sta $4000+[clear_vbxe & $3fff],x
   110 207F CA						dex
   111 2080 10 F7					bpl @-
   112 						
   113
   114
   115 				//bcb paski			
   116 2082 A9 7E 85 73 A9 41 + 			mwa #([pasek_vbxe & $3fff]+$4000) pom
   117 208A A0 14		@			ldy #20
   118 208C B9 7A 21		@			lda pasek_src,y
   119 208F 91 73					sta (pom),y
   120 2091 88						dey
   121 2092 10 F8					bpl @-
   122 2094 18						clc
   123 2095 A5 73					lda pom
   124 2097 69 15					adc #21
   125 2099 85 73					sta pom
   126 209B 90 02					bcc *+4
   127 209D E6 74					inc pom+1
   128 209F A5 74					lda pom+1
   129 20A1 C9 80					cmp #$80					;koniec 16KB
   130 20A3 D0 E5					bne @-1
   131 							
   132 20A5 A0 5D					ldy #$5d
   133 20A7 A9 8F 91 71					mva #$81+[xdl_vbxe>>14] (fx_ptr),y   //xdl	next 16KB
   134
   135 20AB A2 4E					ldx #78
   136 20AD A9 00 85 73 A9 40 + 			mwa #$4000 pom
   137 20B5 A0 14		@			ldy #20
   138 20B7 B9 7A 21		@			lda pasek_src,y
   139 20BA 91 73					sta (pom),y
   140 20BC 88						dey
   141 20BD 10 F8					bpl @-
   142 20BF 18						clc
   143 20C0 A5 73					lda pom
   144 20C2 69 15					adc #21
   145 20C4 85 73					sta pom
   146 20C6 90 02					bcc *+4
   147 20C8 E6 74					inc pom+1
   148 20CA CA						dex					;koniec 16KB
   149 20CB D0 E8					bne @-1
   150
   151 							
   152 				//bcb duszki			
   153 20CD A2 0F					ldx #15
   154 20CF A0 14		@			ldy #20
   155 20D1 B9 0D 22		@			lda duszek_src,y
   156 20D4 91 73					sta (pom),y
   157 20D6 88						dey
   158 20D7 10 F8					bpl @-
   159 20D9 18						clc
   160 20DA A5 73					lda pom
   161 20DC 69 15					adc #21
   162 20DE 85 73					sta pom
   163 20E0 90 02					bcc *+4
   164 20E2 E6 74					inc pom+1
   165 20E4 CA						dex
   166 20E5 D0 E8					bne @-1
   167 							
   168 20E7 A9 01 8D 21 22				mva #1 duszek_src+20			;ostatni bcb
   169 20EC A0 14					ldy #20
   170 20EE B9 0D 22		@			lda duszek_src,y
   171 20F1 91 73					sta (pom),y
   172 20F3 88						dey
   173 20F4 10 F8					bpl @-			
   174 							
   175 20F6 A0 5D					ldy #$5d
   176 20F8 A9 00 91 71					mva #0 (fx_ptr),y			;off window B
   177 				//ustawiamy kolory planszy				
   178 20FC A0 44					ldy	#$44
   179 20FE A9 40 91 71 C8				mva	#$40	(fx_ptr),y+	; CSEL ,nr koloru
   180 2103 A9 01 91 71					mva	#1	(fx_ptr),y	; PSEL	,nr palety
   181 							
   182 2107 A2 40					ldx #$40
   183 2109 A0 46		@			ldy	#$46	; CR				;szary
   184 210B AD 64 21					lda tab_color80
   185 210E 91 71					sta	(fx_ptr),y		;RED
   186 2110 C8						iny
   187 2111 AD 65 21					lda tab_color80+1
   188 2114 91 71					sta	(fx_ptr),y		;GREEN
   189 2116 C8						iny
   190 2117 AD 66 21					lda tab_color80+2
   191 211A 91 71					sta	(fx_ptr),y		;BLUE, nr_koloru++
   192 211C CA						dex
   193 211D D0 EA					bne @-
   194 							
   195 211F A2 40					ldx #$40
   196 2121 A0 46		@			ldy	#$46	; CR
   197 2123 AD 67 21					lda tab_color80+3					;czarny
   198 2126 91 71					sta	(fx_ptr),y		;RED
   199 2128 C8						iny
   200 2129 AD 68 21					lda tab_color80+4
   201 212C 91 71					sta	(fx_ptr),y		;GREEN
   202 212E C8						iny
   203 212F AD 69 21					lda tab_color80+5
   204 2132 91 71					sta	(fx_ptr),y		;BLUE, nr_koloru++
   205 2134 CA						dex
   206 2135 D0 EA					bne @-		
   207
   208 2137 A2 40					ldx #$40
   209 2139 A0 46		@			ldy	#$46	; CR
   210 213B AD 6A 21					lda tab_color80+6					;zielony/niebieski
   211 213E 91 71					sta	(fx_ptr),y		;RED
   212 2140 C8						iny
   213 2141 AD 6B 21					lda tab_color80+7
   214 2144 91 71					sta	(fx_ptr),y		;GREEN
   215 2146 C8						iny
   216 2147 AD 6C 21					lda tab_color80+8
   217 214A 91 71					sta	(fx_ptr),y		;BLUE, nr_koloru++
   218 214C CA						dex
   219 214D D0 EA					bne @-					
   220 							
   221 									
   222 214F A0 5D					ldy #$5d
   223 2151 A9 90 91 71					mva #$80+[$40000>>14] (fx_ptr),y   //xdl+2, tu beda tablice, pierwsza czesc
   224 2155 60						rts
   225 							
   226 2156			ini6					
   227 2156 A0 5D					ldy #$5d
   228 2158 A9 91 91 71					mva #$81+[$40000>>14] (fx_ptr),y   //xdl+2, tu beda tablice	 druga czesc	
   229
   230 215C 60						rts
   231 							
   232 215D			ini7		
   233 215D A0 5D					ldy #$5d
   234 215F A9 00 91 71					mva #0 (fx_ptr),y   //end			
   235 							
   236 2163 60						rts			
   237
   238 2164			tab_color80
   239 2164 6E 6E 6E					dta 110,110,110	;szary
   240 2167 00 00 00					.he 00,00,00		;czarny	
   241 216A 5B 8D 3C					dta 91,141,60		;zielony/niebieski
   242
   243 				/*			.he 00,00,00		;czarny		
   244 							;dta 82,65,32		;brazowy
   245 							dta 78,60,0
   246 							dta 110,110,110	;szary
   247 							dta 91,141,60		;zielony  */
   247
   248 							
   249
   250 = 0200			SCREEN_SZER=512			
   251 											
   252 				//dlist dla VBXE
   253 216D			xdl_src
   254 216D 24 00 17			dta	a($24),b(23)	; XDLC_OVOFF|XDLC_RTPL  ;24 puste linie
   255 2170 62 88 9F			dta	a($8862),b(160-1) ; XDLC_GMON|XDLC_RTPL|XDLC_OVADR|XDLC_END|XDLC_ATT  ; 192 linie w hires
   256 2173 18 6A			dta	a([37+16]*SCREEN_SZER+24)		;adres pamieci obrazu dla tych linii	
   257 2175			xdl_frame
   258 2175 01 00 02			dta	b(scr_vbxe >> 16),a(SCREEN_SZER)		;3 bajt adresu obrazu=0,256=o ile bajtÃ³w skaczemy co linie
   259 2178 11 FF			dta a($ff11)			;paleta1+szerokosc 320 bajtÃ³w=$11, prio_default=$ff
   260 					
   261 = 000D			xdl_len	equ	*-xdl_src
   262
   263 				//rysuje pasek w buforze
   264 217A			pasek_src
   265 217A 00 00 06					dta	a(0),b(znaki0_vbxe >> 16)			;adres zrodlowy=nr znaku, 1 bajt(=0zestaw0,=64 2 zestaw,=1283 zestaw,=192 4 zestaw)
   266 																;2 bajt=nr znaku,3 bajt = ktora czworka zestawow 	
   267 217D 08 00 01					dta	a(8),1		;odstÄ™p w pamiÄ™ci pomiÄ™dzy kolejnymi liniami <-4096..4095>, kolejnoÅ›Ä‡ pobierania danych (1,-1)
   268 2180 00 00					dta	a(0)						;adres docelowy dla operacji blittera 24bity, adres paska, kazdy z 21 paskow to 320*8=2560 bajtow
   269 2182 00						dta	b(0)
   270 2183 00 02 01					dta	a(512),1				;odlegloÅ›Ä‡ w pamiÄ™ci pomiÄ™dzy kolejnymi liniami <-4096..4095>,skok pomiÄ™dzy danymi (-1,1)
   271 2186 07 00 07					dta	a(8-1),8-1	;szerokosÄ‡ obiektu-1(0,511),wysokosÄ‡ obiektu-1(0,255)
   272 2189 FF 00 00					dta	$ff,0,0				;maska AND ÅºrÃ³dÅ‚a,maska XOR ÅºrÃ³dÅ‚a,maska AND wykrywania kolizji
   273 218C 00 00 08					dta	0,0,8				;kopiowanie+next
   274
   275 							
   276 				//kopiuje numery znakow  i adresy ich rysowania do bcb pasek_vbxe			
   277 218F			cp_znaki_src
   278 218F 00 00 05					dta a(0),b(map_vbxe >> 16)
   279 2192 28 00 01					dta a(40),1
   280 2195 7F 81 03					dta a([pasek_vbxe & $ffff]+1),b([pasek_vbxe+1]>>16)
   281 2198 48 03 15					dta a(840),21
   282 219B 27 00 14					dta a(40-1),21-1
   283 219E FF 00 00					dta $ff,0,0
   284 21A1 00 00 08					dta 0,0,8
   285 							
   286 21A4 00 80 04					dta a($8000),b($40000>>16)			;adres tablic z adresami pamieci obrazu
   287 21A7 78 00 03					dta a(40*3),3							;po 3 bajty na adres
   288 21AA 84 81 03					dta a([pasek_vbxe & $ffff]+6),b([pasek_vbxe+6]>>16)			;najmlodszy bajt adresu
   289 21AD 48 03 15					dta a(840),21							;bcb co 21 bajtow 21*40=840
   290 21B0 27 00 14					dta a(40-1),21-1						;szerokosc i wysokosc
   291 21B3 FF 00 00					dta $ff,0,0
   292 21B6 00 00 08					dta 0,0,8
   293 							
   294 21B9 01 80 04					dta a($8001),b($40000>>16)			;adres tablic z adresami pamieci obrazu
   295 21BC 78 00 03					dta a(40*3),3							;po 3 bajty na adres
   296 21BF 85 81 03					dta a([pasek_vbxe & $ffff]+7),b([pasek_vbxe+7]>>16)			;sredni bajt adresu
   297 21C2 48 03 15					dta a(840),21							;bcb co 21 bajtow 21*40=840
   298 21C5 27 00 14					dta a(40-1),21-1						;szerokosc i wysokosc
   299 21C8 FF 00 00					dta $ff,0,0
   300 21CB 00 00 08					dta 0,0,8
   301 							
   302 21CE 02 80 04					dta a($8002),b($40000>>16)			;adres tablic z adresami pamieci obrazu
   303 21D1 78 00 03					dta a(40*3),3							;po 3 bajty na adres
   304 21D4 86 81 03					dta a([pasek_vbxe & $ffff]+8),b([pasek_vbxe+8]>>16)			;najstarszy bajt adresu
   305 21D7 48 03 15					dta a(840),21							;bcb co 21 bajtow 21*40=840
   306 21DA 27 00 14					dta a(40-1),21-1						;szerokosc i wysokosc
   307 21DD FF 00 00					dta $ff,0,0
   308 21E0 00 00 08					dta 0,0,8
   309 				//ktory z czworki poziomow			
   310 21E3 0D 80 03					dta a([xdl_vbxe+xdl_len]&$ffff),b([xdl_vbxe+xdl_len]>>16)
   311 21E6 01 00 00					dta a(1),0
   312 21E9 7E 81 03					dta a(pasek_vbxe & $ffff),b(pasek_vbxe>>16)
   313 21EC 48 03 15					dta a(840),21
   314 21EF 27 00 14					dta a(40-1),21-1
   315 21F2 00 40 00					dta 0,$40,0				;and=0, xor=00,40,80,c0 zaleznie od mapy
   316 21F5 00 00 08					dta 0,0,8
   317 				//ktora czworka poziomow 0,1,2,3 czy 4,5,6,7			
   318 21F8 0D 80 03					dta a([xdl_vbxe+xdl_len]&$ffff),b([xdl_vbxe+xdl_len]>>16)
   319 21FB 01 00 00					dta a(1),0
   320 21FE 80 81 03					dta a([pasek_vbxe & $ffff]+2),b([pasek_vbxe+2]>>16)
   321 2201 48 03 15					dta a(840),21
   322 2204 27 00 14					dta a(40-1),21-1
   323 2207 00 40 00					dta 0,$40,0				;and=0, xor=00,40,80,c0 zaleznie od mapy
   324 220A 00 00 08					dta 0,0,8
   325 							
   326 				//rysuje duszki	
   327 220D			duszek_src
   328 220D 00 00 00					dta	a(0),0			;adres danych Å¼rÃ³dÅ‚owych w pamiÄ™ci vbxe 24bity
   329 2210 18 00 01					dta	a(24),1		;odstÄ™p w pamiÄ™ci pomiÄ™dzy kolejnymi liniami <-4096..4095>, kolejnoÅ›Ä‡ pobierania danych (1,-1)
   330 2213 18 6A 01					dta	a(es&$ffff),b(1)						;adres docelowy dla operacji blittera 24bity	
   331 2216 00 02 01					dta	a(512),1				;odlegloÅ›Ä‡ w pamiÄ™ci pomiÄ™dzy kolejnymi liniami <-4096..4095>,skok pomiÄ™dzy danymi (-1,1)
   332 2219 17 00 14					dta	a(24-1),21-1	;szerokosÄ‡ obiektu-1(0,511),wysokosÄ‡ obiektu-1(0,255)
   333 221C FF 00 00					dta	$ff,0,0				;maska AND ÅºrÃ³dÅ‚a,maska XOR ÅºrÃ³dÅ‚a,maska AND wykrywania kolizji	
   334 221F 00 00 09					dta	0,0,1+8	
   335 				//czysci ekran
   336 2222			clear_src
   337 2222 00 00 00					dta a(0),0
   338 2225 01 00 01					dta a(1),1
   339 2228 18 6A 01					dta a(es&$ffff),b(1)
   340 222B 00 02 01					dta a(512),1
   341 222E 3F 01 9F					dta a(320-1),160-1
   342 2231 00 00 00					dta 0,0,0
   343 2234 00 00 00					dta 0,0,0
   344 							
   345 									
   346 02E2-02E3> 00 20					ini ini0		
   347 							
   348 2237						org $4000
   349 4000-7FFF> 00 00 00 00 + 			ins './orig/zestaw00.fnt'
   350 02E2-02E3> 07 20					ini ini1
   351 							
   352 8000						org $4000
   353 4000-7FFF> 00 00 00 00 + 			ins './orig/zestaw01.fnt'
   354 02E2-02E3> 0E 20					ini ini2
   355
   356 8000						org $4000
   357 4000-7FFF> 00 00 00 00 + 			ins './orig/zestaw02.fnt'
   358 02E2-02E3> 15 20					ini ini3	
   359
   360 8000						org $4000
   361 4000-7FFF> 80 80 C0 C0 + 			ins './orig/zestaw03.fnt'
   362 							
   363 02E2-02E3> 1C 20					ini	ini3a
   364 8000						org $4000
   365 4000-7FFF> 00 00 00 00 + 			ins './orig/zestaw04.fnt'
   366 02E2-02E3> 23 20					ini ini3b
   367 8000						org $4000
   368 4000-7FFF> 00 00 00 00 + 			ins './orig/zestaw05.fnt'
   369 02E2-02E3> 2A 20					ini ini3c
   370 8000						org $4000
   371 4000-7FFF> 00 00 00 00 + 			ins './orig/zestaw06.fnt'
   372 02E2-02E3> 31 20					ini ini3d
   373 8000						org $4000
   374 4000-7FFF> 80 80 80 80 + 			ins './orig/zestaw07.fnt'
   375 							
   376 02E2-02E3> 38 20					ini ini4			
   377 8000						org $4000
   378 4000-5F3F> CC CC CC CC + 			ins './orig/l0n-map.bin'			
   379 5F40						org $6000
   380 6000-7F3F> CC CC CC CC + 			ins './orig/l1n-map.bin'
   381 							
   382 02E2-02E3> 3F 20					ini ini4a			
   383 7F40						org $4000
   384 4000-5F3F> CC CC CC CC + 			ins './orig/l2n-map.bin'			
   385 5F40						org $6000
   386 6000-7F3F> 35 30 30 30 + 			ins './orig/l3n-map.bin'	
   387
   388 02E2-02E3> 46 20					ini ini4b			
   389 7F40						org $4000
   390 4000-5F3F> CC CC CC CC + 			ins './orig/l4n-map.bin'			
   391 5F40						org $6000
   392 6000-7F3F> CC CC CC CC + 			ins './orig/l5n-map.bin'
   393 							
   394 02E2-02E3> 4D 20					ini ini4c			
   395 7F40						org $4000
   396 4000-5F3F> E0 E0 E0 E0 + 			ins './orig/l6n-map.bin'			
   397 5F40						org $6000
   398 6000-7F3F> 35 30 30 30 + 			ins './orig/l7n-map.bin'	
   399
   400 02E2-02E3> 54 20					ini ini4d
   401 7F40						org $4000
   402 4000-67FF> 00 02 02 02 + 			ins './orig/l0n-dane.bin'
   403 4500 00 04 04 04 04 04 + 			ins './orig/l1n-dane.bin'
   404 4A00 00 04 04 04 04 04 + 			ins './orig/l2n-dane.bin'
   405 4F00 00 02 02 02 02 02 + 			ins './orig/l3n-dane.bin'
   406 5400 00 02 02 02 02 02 + 			ins './orig/l4n-dane.bin'
   407 5900 00 04 04 04 04 04 + 			ins './orig/l5n-dane.bin'
   408 5E00 00 01 01 01 01 01 + 			ins './orig/l6n-dane.bin'
   409 6300 01 01 00 00 00 01 + 			ins './orig/l7n-dane.bin'
   410 							
   411 							
   412 02E2-02E3> 5B 20					ini ini5		//xdl+blity
   413
   414
   415 = 016A18			es=53*SCREEN_SZER+24+scr_vbxe			//poczatek pamieci ekranu
   416 6800						org $4000
   417 4000			adz0						//przesuniecie=0,  40x3*21=2520b,   2520*4=10080
   418 				.rept	21,#
   419 				?LINIA=ES+4096*:1
   420 				.REPT 	40,#
   421 							DTA A([?LINIA+8*:1]&$FFFF),B([?LINIA+8*:1]>>16)	
   422 				.ENDR			
   423 				.ENDR				
   423 				.endr				
Source: REPT
   419 = 016A18			?LINIA=ES+4096*0
   419 				.endr				
Source: REPT
   421 4000-675F> 18 6A 01				DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 4003 20 6A 01					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 4006 28 6A 01					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4009 30 6A 01					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 400C 38 6A 01					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 400F 40 6A 01					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 4012 48 6A 01					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 4015 50 6A 01					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4018 58 6A 01					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 401B 60 6A 01					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 401E 68 6A 01					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4021 70 6A 01					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 4024 78 6A 01					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 4027 80 6A 01					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 402A 88 6A 01					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 402D 90 6A 01					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4030 98 6A 01					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 4033 A0 6A 01					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 4036 A8 6A 01					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 4039 B0 6A 01					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 403C B8 6A 01					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 403F C0 6A 01					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 4042 C8 6A 01					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 4045 D0 6A 01					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 4048 D8 6A 01					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 404B E0 6A 01					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 404E E8 6A 01					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 4051 F0 6A 01					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 4054 F8 6A 01					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 4057 00 6B 01					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 405A 08 6B 01					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 405D 10 6B 01					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 4060 18 6B 01					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 4063 20 6B 01					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 4066 28 6B 01					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 4069 30 6B 01					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 406C 38 6B 01					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 406F 40 6B 01					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 4072 48 6B 01					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 4075 50 6B 01					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 017A18			?LINIA=ES+4096*1
   419 				.endr				
Source: REPT
   421 4078 18 7A 01					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 407B 20 7A 01					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 407E 28 7A 01					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4081 30 7A 01					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 4084 38 7A 01					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 4087 40 7A 01					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 408A 48 7A 01					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 408D 50 7A 01					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4090 58 7A 01					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 4093 60 7A 01					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 4096 68 7A 01					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4099 70 7A 01					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 409C 78 7A 01					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 409F 80 7A 01					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 40A2 88 7A 01					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 40A5 90 7A 01					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 40A8 98 7A 01					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 40AB A0 7A 01					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 40AE A8 7A 01					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 40B1 B0 7A 01					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 40B4 B8 7A 01					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 40B7 C0 7A 01					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 40BA C8 7A 01					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 40BD D0 7A 01					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 40C0 D8 7A 01					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 40C3 E0 7A 01					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 40C6 E8 7A 01					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 40C9 F0 7A 01					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 40CC F8 7A 01					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 40CF 00 7B 01					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 40D2 08 7B 01					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 40D5 10 7B 01					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 40D8 18 7B 01					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 40DB 20 7B 01					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 40DE 28 7B 01					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 40E1 30 7B 01					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 40E4 38 7B 01					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 40E7 40 7B 01					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 40EA 48 7B 01					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 40ED 50 7B 01					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 018A18			?LINIA=ES+4096*2
   419 				.endr				
Source: REPT
   421 40F0 18 8A 01					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 40F3 20 8A 01					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 40F6 28 8A 01					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 40F9 30 8A 01					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 40FC 38 8A 01					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 40FF 40 8A 01					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 4102 48 8A 01					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 4105 50 8A 01					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4108 58 8A 01					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 410B 60 8A 01					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 410E 68 8A 01					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4111 70 8A 01					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 4114 78 8A 01					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 4117 80 8A 01					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 411A 88 8A 01					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 411D 90 8A 01					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4120 98 8A 01					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 4123 A0 8A 01					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 4126 A8 8A 01					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 4129 B0 8A 01					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 412C B8 8A 01					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 412F C0 8A 01					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 4132 C8 8A 01					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 4135 D0 8A 01					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 4138 D8 8A 01					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 413B E0 8A 01					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 413E E8 8A 01					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 4141 F0 8A 01					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 4144 F8 8A 01					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 4147 00 8B 01					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 414A 08 8B 01					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 414D 10 8B 01					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 4150 18 8B 01					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 4153 20 8B 01					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 4156 28 8B 01					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 4159 30 8B 01					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 415C 38 8B 01					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 415F 40 8B 01					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 4162 48 8B 01					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 4165 50 8B 01					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 019A18			?LINIA=ES+4096*3
   419 				.endr				
Source: REPT
   421 4168 18 9A 01					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 416B 20 9A 01					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 416E 28 9A 01					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4171 30 9A 01					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 4174 38 9A 01					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 4177 40 9A 01					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 417A 48 9A 01					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 417D 50 9A 01					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4180 58 9A 01					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 4183 60 9A 01					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 4186 68 9A 01					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4189 70 9A 01					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 418C 78 9A 01					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 418F 80 9A 01					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 4192 88 9A 01					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 4195 90 9A 01					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4198 98 9A 01					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 419B A0 9A 01					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 419E A8 9A 01					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 41A1 B0 9A 01					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 41A4 B8 9A 01					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 41A7 C0 9A 01					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 41AA C8 9A 01					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 41AD D0 9A 01					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 41B0 D8 9A 01					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 41B3 E0 9A 01					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 41B6 E8 9A 01					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 41B9 F0 9A 01					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 41BC F8 9A 01					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 41BF 00 9B 01					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 41C2 08 9B 01					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 41C5 10 9B 01					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 41C8 18 9B 01					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 41CB 20 9B 01					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 41CE 28 9B 01					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 41D1 30 9B 01					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 41D4 38 9B 01					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 41D7 40 9B 01					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 41DA 48 9B 01					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 41DD 50 9B 01					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 01AA18			?LINIA=ES+4096*4
   419 				.endr				
Source: REPT
   421 41E0 18 AA 01					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 41E3 20 AA 01					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 41E6 28 AA 01					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 41E9 30 AA 01					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 41EC 38 AA 01					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 41EF 40 AA 01					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 41F2 48 AA 01					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 41F5 50 AA 01					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 41F8 58 AA 01					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 41FB 60 AA 01					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 41FE 68 AA 01					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4201 70 AA 01					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 4204 78 AA 01					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 4207 80 AA 01					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 420A 88 AA 01					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 420D 90 AA 01					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4210 98 AA 01					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 4213 A0 AA 01					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 4216 A8 AA 01					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 4219 B0 AA 01					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 421C B8 AA 01					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 421F C0 AA 01					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 4222 C8 AA 01					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 4225 D0 AA 01					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 4228 D8 AA 01					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 422B E0 AA 01					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 422E E8 AA 01					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 4231 F0 AA 01					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 4234 F8 AA 01					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 4237 00 AB 01					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 423A 08 AB 01					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 423D 10 AB 01					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 4240 18 AB 01					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 4243 20 AB 01					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 4246 28 AB 01					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 4249 30 AB 01					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 424C 38 AB 01					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 424F 40 AB 01					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 4252 48 AB 01					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 4255 50 AB 01					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 01BA18			?LINIA=ES+4096*5
   419 				.endr				
Source: REPT
   421 4258 18 BA 01					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 425B 20 BA 01					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 425E 28 BA 01					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4261 30 BA 01					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 4264 38 BA 01					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 4267 40 BA 01					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 426A 48 BA 01					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 426D 50 BA 01					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4270 58 BA 01					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 4273 60 BA 01					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 4276 68 BA 01					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4279 70 BA 01					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 427C 78 BA 01					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 427F 80 BA 01					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 4282 88 BA 01					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 4285 90 BA 01					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4288 98 BA 01					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 428B A0 BA 01					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 428E A8 BA 01					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 4291 B0 BA 01					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 4294 B8 BA 01					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 4297 C0 BA 01					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 429A C8 BA 01					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 429D D0 BA 01					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 42A0 D8 BA 01					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 42A3 E0 BA 01					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 42A6 E8 BA 01					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 42A9 F0 BA 01					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 42AC F8 BA 01					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 42AF 00 BB 01					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 42B2 08 BB 01					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 42B5 10 BB 01					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 42B8 18 BB 01					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 42BB 20 BB 01					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 42BE 28 BB 01					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 42C1 30 BB 01					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 42C4 38 BB 01					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 42C7 40 BB 01					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 42CA 48 BB 01					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 42CD 50 BB 01					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 01CA18			?LINIA=ES+4096*6
   419 				.endr				
Source: REPT
   421 42D0 18 CA 01					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 42D3 20 CA 01					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 42D6 28 CA 01					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 42D9 30 CA 01					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 42DC 38 CA 01					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 42DF 40 CA 01					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 42E2 48 CA 01					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 42E5 50 CA 01					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 42E8 58 CA 01					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 42EB 60 CA 01					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 42EE 68 CA 01					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 42F1 70 CA 01					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 42F4 78 CA 01					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 42F7 80 CA 01					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 42FA 88 CA 01					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 42FD 90 CA 01					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4300 98 CA 01					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 4303 A0 CA 01					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 4306 A8 CA 01					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 4309 B0 CA 01					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 430C B8 CA 01					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 430F C0 CA 01					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 4312 C8 CA 01					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 4315 D0 CA 01					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 4318 D8 CA 01					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 431B E0 CA 01					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 431E E8 CA 01					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 4321 F0 CA 01					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 4324 F8 CA 01					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 4327 00 CB 01					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 432A 08 CB 01					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 432D 10 CB 01					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 4330 18 CB 01					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 4333 20 CB 01					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 4336 28 CB 01					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 4339 30 CB 01					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 433C 38 CB 01					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 433F 40 CB 01					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 4342 48 CB 01					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 4345 50 CB 01					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 01DA18			?LINIA=ES+4096*7
   419 				.endr				
Source: REPT
   421 4348 18 DA 01					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 434B 20 DA 01					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 434E 28 DA 01					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4351 30 DA 01					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 4354 38 DA 01					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 4357 40 DA 01					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 435A 48 DA 01					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 435D 50 DA 01					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4360 58 DA 01					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 4363 60 DA 01					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 4366 68 DA 01					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4369 70 DA 01					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 436C 78 DA 01					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 436F 80 DA 01					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 4372 88 DA 01					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 4375 90 DA 01					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4378 98 DA 01					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 437B A0 DA 01					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 437E A8 DA 01					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 4381 B0 DA 01					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 4384 B8 DA 01					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 4387 C0 DA 01					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 438A C8 DA 01					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 438D D0 DA 01					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 4390 D8 DA 01					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 4393 E0 DA 01					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 4396 E8 DA 01					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 4399 F0 DA 01					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 439C F8 DA 01					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 439F 00 DB 01					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 43A2 08 DB 01					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 43A5 10 DB 01					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 43A8 18 DB 01					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 43AB 20 DB 01					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 43AE 28 DB 01					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 43B1 30 DB 01					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 43B4 38 DB 01					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 43B7 40 DB 01					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 43BA 48 DB 01					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 43BD 50 DB 01					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 01EA18			?LINIA=ES+4096*8
   419 				.endr				
Source: REPT
   421 43C0 18 EA 01					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 43C3 20 EA 01					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 43C6 28 EA 01					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 43C9 30 EA 01					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 43CC 38 EA 01					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 43CF 40 EA 01					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 43D2 48 EA 01					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 43D5 50 EA 01					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 43D8 58 EA 01					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 43DB 60 EA 01					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 43DE 68 EA 01					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 43E1 70 EA 01					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 43E4 78 EA 01					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 43E7 80 EA 01					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 43EA 88 EA 01					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 43ED 90 EA 01					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 43F0 98 EA 01					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 43F3 A0 EA 01					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 43F6 A8 EA 01					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 43F9 B0 EA 01					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 43FC B8 EA 01					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 43FF C0 EA 01					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 4402 C8 EA 01					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 4405 D0 EA 01					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 4408 D8 EA 01					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 440B E0 EA 01					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 440E E8 EA 01					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 4411 F0 EA 01					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 4414 F8 EA 01					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 4417 00 EB 01					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 441A 08 EB 01					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 441D 10 EB 01					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 4420 18 EB 01					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 4423 20 EB 01					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 4426 28 EB 01					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 4429 30 EB 01					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 442C 38 EB 01					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 442F 40 EB 01					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 4432 48 EB 01					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 4435 50 EB 01					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 01FA18			?LINIA=ES+4096*9
   419 				.endr				
Source: REPT
   421 4438 18 FA 01					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 443B 20 FA 01					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 443E 28 FA 01					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4441 30 FA 01					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 4444 38 FA 01					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 4447 40 FA 01					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 444A 48 FA 01					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 444D 50 FA 01					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4450 58 FA 01					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 4453 60 FA 01					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 4456 68 FA 01					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4459 70 FA 01					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 445C 78 FA 01					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 445F 80 FA 01					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 4462 88 FA 01					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 4465 90 FA 01					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4468 98 FA 01					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 446B A0 FA 01					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 446E A8 FA 01					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 4471 B0 FA 01					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 4474 B8 FA 01					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 4477 C0 FA 01					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 447A C8 FA 01					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 447D D0 FA 01					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 4480 D8 FA 01					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 4483 E0 FA 01					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 4486 E8 FA 01					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 4489 F0 FA 01					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 448C F8 FA 01					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 448F 00 FB 01					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 4492 08 FB 01					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 4495 10 FB 01					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 4498 18 FB 01					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 449B 20 FB 01					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 449E 28 FB 01					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 44A1 30 FB 01					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 44A4 38 FB 01					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 44A7 40 FB 01					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 44AA 48 FB 01					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 44AD 50 FB 01					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 020A18			?LINIA=ES+4096*10
   419 				.endr				
Source: REPT
   421 44B0 18 0A 02					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 44B3 20 0A 02					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 44B6 28 0A 02					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 44B9 30 0A 02					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 44BC 38 0A 02					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 44BF 40 0A 02					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 44C2 48 0A 02					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 44C5 50 0A 02					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 44C8 58 0A 02					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 44CB 60 0A 02					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 44CE 68 0A 02					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 44D1 70 0A 02					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 44D4 78 0A 02					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 44D7 80 0A 02					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 44DA 88 0A 02					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 44DD 90 0A 02					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 44E0 98 0A 02					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 44E3 A0 0A 02					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 44E6 A8 0A 02					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 44E9 B0 0A 02					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 44EC B8 0A 02					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 44EF C0 0A 02					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 44F2 C8 0A 02					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 44F5 D0 0A 02					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 44F8 D8 0A 02					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 44FB E0 0A 02					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 44FE E8 0A 02					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 4501 F0 0A 02					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 4504 F8 0A 02					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 4507 00 0B 02					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 450A 08 0B 02					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 450D 10 0B 02					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 4510 18 0B 02					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 4513 20 0B 02					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 4516 28 0B 02					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 4519 30 0B 02					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 451C 38 0B 02					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 451F 40 0B 02					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 4522 48 0B 02					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 4525 50 0B 02					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 021A18			?LINIA=ES+4096*11
   419 				.endr				
Source: REPT
   421 4528 18 1A 02					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 452B 20 1A 02					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 452E 28 1A 02					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4531 30 1A 02					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 4534 38 1A 02					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 4537 40 1A 02					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 453A 48 1A 02					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 453D 50 1A 02					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4540 58 1A 02					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 4543 60 1A 02					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 4546 68 1A 02					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4549 70 1A 02					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 454C 78 1A 02					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 454F 80 1A 02					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 4552 88 1A 02					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 4555 90 1A 02					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4558 98 1A 02					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 455B A0 1A 02					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 455E A8 1A 02					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 4561 B0 1A 02					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 4564 B8 1A 02					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 4567 C0 1A 02					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 456A C8 1A 02					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 456D D0 1A 02					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 4570 D8 1A 02					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 4573 E0 1A 02					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 4576 E8 1A 02					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 4579 F0 1A 02					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 457C F8 1A 02					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 457F 00 1B 02					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 4582 08 1B 02					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 4585 10 1B 02					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 4588 18 1B 02					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 458B 20 1B 02					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 458E 28 1B 02					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 4591 30 1B 02					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 4594 38 1B 02					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 4597 40 1B 02					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 459A 48 1B 02					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 459D 50 1B 02					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 022A18			?LINIA=ES+4096*12
   419 				.endr				
Source: REPT
   421 45A0 18 2A 02					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 45A3 20 2A 02					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 45A6 28 2A 02					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 45A9 30 2A 02					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 45AC 38 2A 02					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 45AF 40 2A 02					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 45B2 48 2A 02					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 45B5 50 2A 02					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 45B8 58 2A 02					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 45BB 60 2A 02					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 45BE 68 2A 02					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 45C1 70 2A 02					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 45C4 78 2A 02					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 45C7 80 2A 02					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 45CA 88 2A 02					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 45CD 90 2A 02					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 45D0 98 2A 02					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 45D3 A0 2A 02					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 45D6 A8 2A 02					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 45D9 B0 2A 02					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 45DC B8 2A 02					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 45DF C0 2A 02					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 45E2 C8 2A 02					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 45E5 D0 2A 02					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 45E8 D8 2A 02					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 45EB E0 2A 02					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 45EE E8 2A 02					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 45F1 F0 2A 02					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 45F4 F8 2A 02					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 45F7 00 2B 02					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 45FA 08 2B 02					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 45FD 10 2B 02					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 4600 18 2B 02					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 4603 20 2B 02					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 4606 28 2B 02					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 4609 30 2B 02					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 460C 38 2B 02					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 460F 40 2B 02					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 4612 48 2B 02					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 4615 50 2B 02					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 023A18			?LINIA=ES+4096*13
   419 				.endr				
Source: REPT
   421 4618 18 3A 02					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 461B 20 3A 02					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 461E 28 3A 02					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4621 30 3A 02					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 4624 38 3A 02					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 4627 40 3A 02					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 462A 48 3A 02					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 462D 50 3A 02					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4630 58 3A 02					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 4633 60 3A 02					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 4636 68 3A 02					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4639 70 3A 02					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 463C 78 3A 02					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 463F 80 3A 02					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 4642 88 3A 02					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 4645 90 3A 02					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4648 98 3A 02					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 464B A0 3A 02					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 464E A8 3A 02					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 4651 B0 3A 02					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 4654 B8 3A 02					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 4657 C0 3A 02					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 465A C8 3A 02					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 465D D0 3A 02					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 4660 D8 3A 02					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 4663 E0 3A 02					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 4666 E8 3A 02					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 4669 F0 3A 02					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 466C F8 3A 02					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 466F 00 3B 02					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 4672 08 3B 02					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 4675 10 3B 02					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 4678 18 3B 02					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 467B 20 3B 02					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 467E 28 3B 02					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 4681 30 3B 02					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 4684 38 3B 02					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 4687 40 3B 02					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 468A 48 3B 02					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 468D 50 3B 02					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 024A18			?LINIA=ES+4096*14
   419 				.endr				
Source: REPT
   421 4690 18 4A 02					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 4693 20 4A 02					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 4696 28 4A 02					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4699 30 4A 02					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 469C 38 4A 02					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 469F 40 4A 02					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 46A2 48 4A 02					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 46A5 50 4A 02					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 46A8 58 4A 02					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 46AB 60 4A 02					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 46AE 68 4A 02					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 46B1 70 4A 02					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 46B4 78 4A 02					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 46B7 80 4A 02					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 46BA 88 4A 02					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 46BD 90 4A 02					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 46C0 98 4A 02					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 46C3 A0 4A 02					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 46C6 A8 4A 02					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 46C9 B0 4A 02					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 46CC B8 4A 02					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 46CF C0 4A 02					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 46D2 C8 4A 02					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 46D5 D0 4A 02					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 46D8 D8 4A 02					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 46DB E0 4A 02					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 46DE E8 4A 02					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 46E1 F0 4A 02					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 46E4 F8 4A 02					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 46E7 00 4B 02					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 46EA 08 4B 02					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 46ED 10 4B 02					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 46F0 18 4B 02					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 46F3 20 4B 02					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 46F6 28 4B 02					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 46F9 30 4B 02					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 46FC 38 4B 02					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 46FF 40 4B 02					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 4702 48 4B 02					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 4705 50 4B 02					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 025A18			?LINIA=ES+4096*15
   419 				.endr				
Source: REPT
   421 4708 18 5A 02					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 470B 20 5A 02					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 470E 28 5A 02					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4711 30 5A 02					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 4714 38 5A 02					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 4717 40 5A 02					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 471A 48 5A 02					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 471D 50 5A 02					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4720 58 5A 02					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 4723 60 5A 02					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 4726 68 5A 02					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4729 70 5A 02					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 472C 78 5A 02					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 472F 80 5A 02					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 4732 88 5A 02					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 4735 90 5A 02					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4738 98 5A 02					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 473B A0 5A 02					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 473E A8 5A 02					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 4741 B0 5A 02					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 4744 B8 5A 02					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 4747 C0 5A 02					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 474A C8 5A 02					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 474D D0 5A 02					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 4750 D8 5A 02					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 4753 E0 5A 02					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 4756 E8 5A 02					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 4759 F0 5A 02					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 475C F8 5A 02					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 475F 00 5B 02					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 4762 08 5B 02					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 4765 10 5B 02					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 4768 18 5B 02					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 476B 20 5B 02					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 476E 28 5B 02					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 4771 30 5B 02					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 4774 38 5B 02					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 4777 40 5B 02					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 477A 48 5B 02					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 477D 50 5B 02					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 026A18			?LINIA=ES+4096*16
   419 				.endr				
Source: REPT
   421 4780 18 6A 02					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 4783 20 6A 02					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 4786 28 6A 02					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4789 30 6A 02					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 478C 38 6A 02					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 478F 40 6A 02					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 4792 48 6A 02					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 4795 50 6A 02					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4798 58 6A 02					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 479B 60 6A 02					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 479E 68 6A 02					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 47A1 70 6A 02					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 47A4 78 6A 02					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 47A7 80 6A 02					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 47AA 88 6A 02					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 47AD 90 6A 02					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 47B0 98 6A 02					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 47B3 A0 6A 02					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 47B6 A8 6A 02					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 47B9 B0 6A 02					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 47BC B8 6A 02					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 47BF C0 6A 02					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 47C2 C8 6A 02					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 47C5 D0 6A 02					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 47C8 D8 6A 02					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 47CB E0 6A 02					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 47CE E8 6A 02					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 47D1 F0 6A 02					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 47D4 F8 6A 02					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 47D7 00 6B 02					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 47DA 08 6B 02					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 47DD 10 6B 02					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 47E0 18 6B 02					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 47E3 20 6B 02					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 47E6 28 6B 02					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 47E9 30 6B 02					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 47EC 38 6B 02					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 47EF 40 6B 02					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 47F2 48 6B 02					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 47F5 50 6B 02					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 027A18			?LINIA=ES+4096*17
   419 				.endr				
Source: REPT
   421 47F8 18 7A 02					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 47FB 20 7A 02					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 47FE 28 7A 02					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4801 30 7A 02					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 4804 38 7A 02					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 4807 40 7A 02					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 480A 48 7A 02					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 480D 50 7A 02					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4810 58 7A 02					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 4813 60 7A 02					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 4816 68 7A 02					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4819 70 7A 02					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 481C 78 7A 02					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 481F 80 7A 02					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 4822 88 7A 02					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 4825 90 7A 02					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4828 98 7A 02					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 482B A0 7A 02					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 482E A8 7A 02					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 4831 B0 7A 02					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 4834 B8 7A 02					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 4837 C0 7A 02					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 483A C8 7A 02					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 483D D0 7A 02					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 4840 D8 7A 02					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 4843 E0 7A 02					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 4846 E8 7A 02					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 4849 F0 7A 02					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 484C F8 7A 02					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 484F 00 7B 02					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 4852 08 7B 02					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 4855 10 7B 02					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 4858 18 7B 02					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 485B 20 7B 02					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 485E 28 7B 02					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 4861 30 7B 02					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 4864 38 7B 02					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 4867 40 7B 02					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 486A 48 7B 02					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 486D 50 7B 02					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 028A18			?LINIA=ES+4096*18
   419 				.endr				
Source: REPT
   421 4870 18 8A 02					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 4873 20 8A 02					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 4876 28 8A 02					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4879 30 8A 02					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 487C 38 8A 02					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 487F 40 8A 02					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 4882 48 8A 02					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 4885 50 8A 02					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4888 58 8A 02					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 488B 60 8A 02					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 488E 68 8A 02					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4891 70 8A 02					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 4894 78 8A 02					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 4897 80 8A 02					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 489A 88 8A 02					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 489D 90 8A 02					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 48A0 98 8A 02					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 48A3 A0 8A 02					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 48A6 A8 8A 02					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 48A9 B0 8A 02					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 48AC B8 8A 02					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 48AF C0 8A 02					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 48B2 C8 8A 02					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 48B5 D0 8A 02					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 48B8 D8 8A 02					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 48BB E0 8A 02					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 48BE E8 8A 02					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 48C1 F0 8A 02					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 48C4 F8 8A 02					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 48C7 00 8B 02					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 48CA 08 8B 02					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 48CD 10 8B 02					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 48D0 18 8B 02					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 48D3 20 8B 02					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 48D6 28 8B 02					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 48D9 30 8B 02					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 48DC 38 8B 02					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 48DF 40 8B 02					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 48E2 48 8B 02					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 48E5 50 8B 02					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 029A18			?LINIA=ES+4096*19
   419 				.endr				
Source: REPT
   421 48E8 18 9A 02					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 48EB 20 9A 02					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 48EE 28 9A 02					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 48F1 30 9A 02					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 48F4 38 9A 02					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 48F7 40 9A 02					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 48FA 48 9A 02					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 48FD 50 9A 02					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4900 58 9A 02					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 4903 60 9A 02					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 4906 68 9A 02					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4909 70 9A 02					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 490C 78 9A 02					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 490F 80 9A 02					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 4912 88 9A 02					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 4915 90 9A 02					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4918 98 9A 02					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 491B A0 9A 02					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 491E A8 9A 02					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 4921 B0 9A 02					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 4924 B8 9A 02					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 4927 C0 9A 02					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 492A C8 9A 02					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 492D D0 9A 02					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 4930 D8 9A 02					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 4933 E0 9A 02					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 4936 E8 9A 02					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 4939 F0 9A 02					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 493C F8 9A 02					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 493F 00 9B 02					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 4942 08 9B 02					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 4945 10 9B 02					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 4948 18 9B 02					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 494B 20 9B 02					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 494E 28 9B 02					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 4951 30 9B 02					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 4954 38 9B 02					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 4957 40 9B 02					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 495A 48 9B 02					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 495D 50 9B 02					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
   419 = 02AA18			?LINIA=ES+4096*20
   419 				.endr				
Source: REPT
   421 4960 18 AA 02					DTA A([?LINIA+8*0]&$FFFF),B([?LINIA+8*0]>>16)	
   421 4963 20 AA 02					DTA A([?LINIA+8*1]&$FFFF),B([?LINIA+8*1]>>16)	
   421 4966 28 AA 02					DTA A([?LINIA+8*2]&$FFFF),B([?LINIA+8*2]>>16)	
   421 4969 30 AA 02					DTA A([?LINIA+8*3]&$FFFF),B([?LINIA+8*3]>>16)	
   421 496C 38 AA 02					DTA A([?LINIA+8*4]&$FFFF),B([?LINIA+8*4]>>16)	
   421 496F 40 AA 02					DTA A([?LINIA+8*5]&$FFFF),B([?LINIA+8*5]>>16)	
   421 4972 48 AA 02					DTA A([?LINIA+8*6]&$FFFF),B([?LINIA+8*6]>>16)	
   421 4975 50 AA 02					DTA A([?LINIA+8*7]&$FFFF),B([?LINIA+8*7]>>16)	
   421 4978 58 AA 02					DTA A([?LINIA+8*8]&$FFFF),B([?LINIA+8*8]>>16)	
   421 497B 60 AA 02					DTA A([?LINIA+8*9]&$FFFF),B([?LINIA+8*9]>>16)	
   421 497E 68 AA 02					DTA A([?LINIA+8*10]&$FFFF),B([?LINIA+8*10]>>16)	
   421 4981 70 AA 02					DTA A([?LINIA+8*11]&$FFFF),B([?LINIA+8*11]>>16)	
   421 4984 78 AA 02					DTA A([?LINIA+8*12]&$FFFF),B([?LINIA+8*12]>>16)	
   421 4987 80 AA 02					DTA A([?LINIA+8*13]&$FFFF),B([?LINIA+8*13]>>16)	
   421 498A 88 AA 02					DTA A([?LINIA+8*14]&$FFFF),B([?LINIA+8*14]>>16)	
   421 498D 90 AA 02					DTA A([?LINIA+8*15]&$FFFF),B([?LINIA+8*15]>>16)	
   421 4990 98 AA 02					DTA A([?LINIA+8*16]&$FFFF),B([?LINIA+8*16]>>16)	
   421 4993 A0 AA 02					DTA A([?LINIA+8*17]&$FFFF),B([?LINIA+8*17]>>16)	
   421 4996 A8 AA 02					DTA A([?LINIA+8*18]&$FFFF),B([?LINIA+8*18]>>16)	
   421 4999 B0 AA 02					DTA A([?LINIA+8*19]&$FFFF),B([?LINIA+8*19]>>16)	
   421 499C B8 AA 02					DTA A([?LINIA+8*20]&$FFFF),B([?LINIA+8*20]>>16)	
   421 499F C0 AA 02					DTA A([?LINIA+8*21]&$FFFF),B([?LINIA+8*21]>>16)	
   421 49A2 C8 AA 02					DTA A([?LINIA+8*22]&$FFFF),B([?LINIA+8*22]>>16)	
   421 49A5 D0 AA 02					DTA A([?LINIA+8*23]&$FFFF),B([?LINIA+8*23]>>16)	
   421 49A8 D8 AA 02					DTA A([?LINIA+8*24]&$FFFF),B([?LINIA+8*24]>>16)	
   421 49AB E0 AA 02					DTA A([?LINIA+8*25]&$FFFF),B([?LINIA+8*25]>>16)	
   421 49AE E8 AA 02					DTA A([?LINIA+8*26]&$FFFF),B([?LINIA+8*26]>>16)	
   421 49B1 F0 AA 02					DTA A([?LINIA+8*27]&$FFFF),B([?LINIA+8*27]>>16)	
   421 49B4 F8 AA 02					DTA A([?LINIA+8*28]&$FFFF),B([?LINIA+8*28]>>16)	
   421 49B7 00 AB 02					DTA A([?LINIA+8*29]&$FFFF),B([?LINIA+8*29]>>16)	
   421 49BA 08 AB 02					DTA A([?LINIA+8*30]&$FFFF),B([?LINIA+8*30]>>16)	
   421 49BD 10 AB 02					DTA A([?LINIA+8*31]&$FFFF),B([?LINIA+8*31]>>16)	
   421 49C0 18 AB 02					DTA A([?LINIA+8*32]&$FFFF),B([?LINIA+8*32]>>16)	
   421 49C3 20 AB 02					DTA A([?LINIA+8*33]&$FFFF),B([?LINIA+8*33]>>16)	
   421 49C6 28 AB 02					DTA A([?LINIA+8*34]&$FFFF),B([?LINIA+8*34]>>16)	
   421 49C9 30 AB 02					DTA A([?LINIA+8*35]&$FFFF),B([?LINIA+8*35]>>16)	
   421 49CC 38 AB 02					DTA A([?LINIA+8*36]&$FFFF),B([?LINIA+8*36]>>16)	
   421 49CF 40 AB 02					DTA A([?LINIA+8*37]&$FFFF),B([?LINIA+8*37]>>16)	
   421 49D2 48 AB 02					DTA A([?LINIA+8*38]&$FFFF),B([?LINIA+8*38]>>16)	
   421 49D5 50 AB 02					DTA A([?LINIA+8*39]&$FFFF),B([?LINIA+8*39]>>16)	
Source: init_vbxe1.asm
Source: init_vbxe1.asm
   424 							
   425 49D8			adz1						//przesuniecie=1,  40x3*21=2520b  
   426 				.rept	21,#
   427 				?LINIA=ES+4096*:1-512*1			
   428 							:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   429 				.ENDR				
   429 				.endr				
Source: REPT
   427 = 016818			?LINIA=ES+4096*0-512*1			
   427 49D8 18 68 01 20 68 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 017818			?LINIA=ES+4096*1-512*1			
   427 4A50 18 78 01 20 78 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 018818			?LINIA=ES+4096*2-512*1			
   427 4AC8 18 88 01 20 88 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 019818			?LINIA=ES+4096*3-512*1			
   427 4B40 18 98 01 20 98 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 01A818			?LINIA=ES+4096*4-512*1			
   427 4BB8 18 A8 01 20 A8 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 01B818			?LINIA=ES+4096*5-512*1			
   427 4C30 18 B8 01 20 B8 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 01C818			?LINIA=ES+4096*6-512*1			
   427 4CA8 18 C8 01 20 C8 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 01D818			?LINIA=ES+4096*7-512*1			
   427 4D20 18 D8 01 20 D8 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 01E818			?LINIA=ES+4096*8-512*1			
   427 4D98 18 E8 01 20 E8 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 01F818			?LINIA=ES+4096*9-512*1			
   427 4E10 18 F8 01 20 F8 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 020818			?LINIA=ES+4096*10-512*1			
   427 4E88 18 08 02 20 08 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 021818			?LINIA=ES+4096*11-512*1			
   427 4F00 18 18 02 20 18 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 022818			?LINIA=ES+4096*12-512*1			
   427 4F78 18 28 02 20 28 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 023818			?LINIA=ES+4096*13-512*1			
   427 4FF0 18 38 02 20 38 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 024818			?LINIA=ES+4096*14-512*1			
   427 5068 18 48 02 20 48 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 025818			?LINIA=ES+4096*15-512*1			
   427 50E0 18 58 02 20 58 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 026818			?LINIA=ES+4096*16-512*1			
   427 5158 18 68 02 20 68 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 027818			?LINIA=ES+4096*17-512*1			
   427 51D0 18 78 02 20 78 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 028818			?LINIA=ES+4096*18-512*1			
   427 5248 18 88 02 20 88 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 029818			?LINIA=ES+4096*19-512*1			
   427 52C0 18 98 02 20 98 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   427 = 02A818			?LINIA=ES+4096*20-512*1			
   427 5338 18 A8 02 20 A8 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
Source: init_vbxe1.asm
   430 							
   431 53B0			adz2						//przesuniecie=2,  40x3*21=2520b  
   432 				.rept	21,#
   433 				?LINIA=ES+4096*:1-512*2			
   434 							:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   435 				.ENDR		
   435 				.endr		
Source: REPT
   433 = 016618			?LINIA=ES+4096*0-512*2			
   433 53B0 18 66 01 20 66 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 017618			?LINIA=ES+4096*1-512*2			
   433 5428 18 76 01 20 76 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 018618			?LINIA=ES+4096*2-512*2			
   433 54A0 18 86 01 20 86 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 019618			?LINIA=ES+4096*3-512*2			
   433 5518 18 96 01 20 96 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 01A618			?LINIA=ES+4096*4-512*2			
   433 5590 18 A6 01 20 A6 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 01B618			?LINIA=ES+4096*5-512*2			
   433 5608 18 B6 01 20 B6 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 01C618			?LINIA=ES+4096*6-512*2			
   433 5680 18 C6 01 20 C6 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 01D618			?LINIA=ES+4096*7-512*2			
   433 56F8 18 D6 01 20 D6 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 01E618			?LINIA=ES+4096*8-512*2			
   433 5770 18 E6 01 20 E6 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 01F618			?LINIA=ES+4096*9-512*2			
   433 57E8 18 F6 01 20 F6 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 020618			?LINIA=ES+4096*10-512*2			
   433 5860 18 06 02 20 06 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 021618			?LINIA=ES+4096*11-512*2			
   433 58D8 18 16 02 20 16 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 022618			?LINIA=ES+4096*12-512*2			
   433 5950 18 26 02 20 26 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 023618			?LINIA=ES+4096*13-512*2			
   433 59C8 18 36 02 20 36 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 024618			?LINIA=ES+4096*14-512*2			
   433 5A40 18 46 02 20 46 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 025618			?LINIA=ES+4096*15-512*2			
   433 5AB8 18 56 02 20 56 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 026618			?LINIA=ES+4096*16-512*2			
   433 5B30 18 66 02 20 66 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 027618			?LINIA=ES+4096*17-512*2			
   433 5BA8 18 76 02 20 76 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 028618			?LINIA=ES+4096*18-512*2			
   433 5C20 18 86 02 20 86 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 029618			?LINIA=ES+4096*19-512*2			
   433 5C98 18 96 02 20 96 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   433 = 02A618			?LINIA=ES+4096*20-512*2			
   433 5D10 18 A6 02 20 A6 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
Source: init_vbxe1.asm
   436
   437 5D88			adz3						//przesuniecie=3,  40x3*21=2520b  
   438 				.rept	21,#
   439 				?LINIA=ES+4096*:1-512*3			
   440 							:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   441 				.ENDR		
   441 				.endr		
Source: REPT
   439 = 016418			?LINIA=ES+4096*0-512*3			
   439 5D88 18 64 01 20 64 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 017418			?LINIA=ES+4096*1-512*3			
   439 5E00 18 74 01 20 74 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 018418			?LINIA=ES+4096*2-512*3			
   439 5E78 18 84 01 20 84 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 019418			?LINIA=ES+4096*3-512*3			
   439 5EF0 18 94 01 20 94 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 01A418			?LINIA=ES+4096*4-512*3			
   439 5F68 18 A4 01 20 A4 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 01B418			?LINIA=ES+4096*5-512*3			
   439 5FE0 18 B4 01 20 B4 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 01C418			?LINIA=ES+4096*6-512*3			
   439 6058 18 C4 01 20 C4 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 01D418			?LINIA=ES+4096*7-512*3			
   439 60D0 18 D4 01 20 D4 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 01E418			?LINIA=ES+4096*8-512*3			
   439 6148 18 E4 01 20 E4 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 01F418			?LINIA=ES+4096*9-512*3			
   439 61C0 18 F4 01 20 F4 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 020418			?LINIA=ES+4096*10-512*3			
   439 6238 18 04 02 20 04 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 021418			?LINIA=ES+4096*11-512*3			
   439 62B0 18 14 02 20 14 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 022418			?LINIA=ES+4096*12-512*3			
   439 6328 18 24 02 20 24 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 023418			?LINIA=ES+4096*13-512*3			
   439 63A0 18 34 02 20 34 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 024418			?LINIA=ES+4096*14-512*3			
   439 6418 18 44 02 20 44 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 025418			?LINIA=ES+4096*15-512*3			
   439 6490 18 54 02 20 54 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 026418			?LINIA=ES+4096*16-512*3			
   439 6508 18 64 02 20 64 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 027418			?LINIA=ES+4096*17-512*3			
   439 6580 18 74 02 20 74 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 028418			?LINIA=ES+4096*18-512*3			
   439 65F8 18 84 02 20 84 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 029418			?LINIA=ES+4096*19-512*3			
   439 6670 18 94 02 20 94 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   439 = 02A418			?LINIA=ES+4096*20-512*3			
   439 66E8 18 A4 02 20 A4 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
Source: init_vbxe1.asm
   442
   443 02E2-02E3> 56 21					ini ini6
   444 							
   445 6760						org $4000
   446 4000			adz4						//przesuniecie=4,  40x3*21=2520b
   447 				.rept	21,#
   448 				?LINIA=ES+4096*:1-512*4		
   449 							:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   450 				.ENDR				
   450 				.endr				
Source: REPT
   448 = 016218			?LINIA=ES+4096*0-512*4		
   448 4000-675F> 18 62 01 20 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 017218			?LINIA=ES+4096*1-512*4		
   448 4078 18 72 01 20 72 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 018218			?LINIA=ES+4096*2-512*4		
   448 40F0 18 82 01 20 82 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 019218			?LINIA=ES+4096*3-512*4		
   448 4168 18 92 01 20 92 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 01A218			?LINIA=ES+4096*4-512*4		
   448 41E0 18 A2 01 20 A2 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 01B218			?LINIA=ES+4096*5-512*4		
   448 4258 18 B2 01 20 B2 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 01C218			?LINIA=ES+4096*6-512*4		
   448 42D0 18 C2 01 20 C2 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 01D218			?LINIA=ES+4096*7-512*4		
   448 4348 18 D2 01 20 D2 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 01E218			?LINIA=ES+4096*8-512*4		
   448 43C0 18 E2 01 20 E2 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 01F218			?LINIA=ES+4096*9-512*4		
   448 4438 18 F2 01 20 F2 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 020218			?LINIA=ES+4096*10-512*4		
   448 44B0 18 02 02 20 02 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 021218			?LINIA=ES+4096*11-512*4		
   448 4528 18 12 02 20 12 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 022218			?LINIA=ES+4096*12-512*4		
   448 45A0 18 22 02 20 22 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 023218			?LINIA=ES+4096*13-512*4		
   448 4618 18 32 02 20 32 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 024218			?LINIA=ES+4096*14-512*4		
   448 4690 18 42 02 20 42 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 025218			?LINIA=ES+4096*15-512*4		
   448 4708 18 52 02 20 52 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 026218			?LINIA=ES+4096*16-512*4		
   448 4780 18 62 02 20 62 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 027218			?LINIA=ES+4096*17-512*4		
   448 47F8 18 72 02 20 72 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 028218			?LINIA=ES+4096*18-512*4		
   448 4870 18 82 02 20 82 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 029218			?LINIA=ES+4096*19-512*4		
   448 48E8 18 92 02 20 92 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   448 = 02A218			?LINIA=ES+4096*20-512*4		
   448 4960 18 A2 02 20 A2 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
Source: init_vbxe1.asm
   451 							
   452 49D8			adz5						//przesuniecie=0,  40x3*21=2520b  
   453 				.rept	21,#
   454 				?LINIA=ES+4096*:1-512*5			
   455 							:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   456 				.ENDR				
   456 				.endr				
Source: REPT
   454 = 016018			?LINIA=ES+4096*0-512*5			
   454 49D8 18 60 01 20 60 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 017018			?LINIA=ES+4096*1-512*5			
   454 4A50 18 70 01 20 70 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 018018			?LINIA=ES+4096*2-512*5			
   454 4AC8 18 80 01 20 80 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 019018			?LINIA=ES+4096*3-512*5			
   454 4B40 18 90 01 20 90 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 01A018			?LINIA=ES+4096*4-512*5			
   454 4BB8 18 A0 01 20 A0 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 01B018			?LINIA=ES+4096*5-512*5			
   454 4C30 18 B0 01 20 B0 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 01C018			?LINIA=ES+4096*6-512*5			
   454 4CA8 18 C0 01 20 C0 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 01D018			?LINIA=ES+4096*7-512*5			
   454 4D20 18 D0 01 20 D0 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 01E018			?LINIA=ES+4096*8-512*5			
   454 4D98 18 E0 01 20 E0 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 01F018			?LINIA=ES+4096*9-512*5			
   454 4E10 18 F0 01 20 F0 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 020018			?LINIA=ES+4096*10-512*5			
   454 4E88 18 00 02 20 00 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 021018			?LINIA=ES+4096*11-512*5			
   454 4F00 18 10 02 20 10 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 022018			?LINIA=ES+4096*12-512*5			
   454 4F78 18 20 02 20 20 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 023018			?LINIA=ES+4096*13-512*5			
   454 4FF0 18 30 02 20 30 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 024018			?LINIA=ES+4096*14-512*5			
   454 5068 18 40 02 20 40 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 025018			?LINIA=ES+4096*15-512*5			
   454 50E0 18 50 02 20 50 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 026018			?LINIA=ES+4096*16-512*5			
   454 5158 18 60 02 20 60 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 027018			?LINIA=ES+4096*17-512*5			
   454 51D0 18 70 02 20 70 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 028018			?LINIA=ES+4096*18-512*5			
   454 5248 18 80 02 20 80 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 029018			?LINIA=ES+4096*19-512*5			
   454 52C0 18 90 02 20 90 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   454 = 02A018			?LINIA=ES+4096*20-512*5			
   454 5338 18 A0 02 20 A0 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
Source: init_vbxe1.asm
   457 							
   458 53B0			adz6						//przesuniecie=0,  40x3*21=2520b  
   459 				.rept	21,#
   460 				?LINIA=ES+4096*:1-512*6			
   461 							:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   462 				.ENDR		
   462 				.endr		
Source: REPT
   460 = 015E18			?LINIA=ES+4096*0-512*6			
   460 53B0 18 5E 01 20 5E 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 016E18			?LINIA=ES+4096*1-512*6			
   460 5428 18 6E 01 20 6E 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 017E18			?LINIA=ES+4096*2-512*6			
   460 54A0 18 7E 01 20 7E 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 018E18			?LINIA=ES+4096*3-512*6			
   460 5518 18 8E 01 20 8E 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 019E18			?LINIA=ES+4096*4-512*6			
   460 5590 18 9E 01 20 9E 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 01AE18			?LINIA=ES+4096*5-512*6			
   460 5608 18 AE 01 20 AE 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 01BE18			?LINIA=ES+4096*6-512*6			
   460 5680 18 BE 01 20 BE 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 01CE18			?LINIA=ES+4096*7-512*6			
   460 56F8 18 CE 01 20 CE 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 01DE18			?LINIA=ES+4096*8-512*6			
   460 5770 18 DE 01 20 DE 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 01EE18			?LINIA=ES+4096*9-512*6			
   460 57E8 18 EE 01 20 EE 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 01FE18			?LINIA=ES+4096*10-512*6			
   460 5860 18 FE 01 20 FE 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 020E18			?LINIA=ES+4096*11-512*6			
   460 58D8 18 0E 02 20 0E 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 021E18			?LINIA=ES+4096*12-512*6			
   460 5950 18 1E 02 20 1E 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 022E18			?LINIA=ES+4096*13-512*6			
   460 59C8 18 2E 02 20 2E 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 023E18			?LINIA=ES+4096*14-512*6			
   460 5A40 18 3E 02 20 3E 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 024E18			?LINIA=ES+4096*15-512*6			
   460 5AB8 18 4E 02 20 4E 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 025E18			?LINIA=ES+4096*16-512*6			
   460 5B30 18 5E 02 20 5E 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 026E18			?LINIA=ES+4096*17-512*6			
   460 5BA8 18 6E 02 20 6E 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 027E18			?LINIA=ES+4096*18-512*6			
   460 5C20 18 7E 02 20 7E 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 028E18			?LINIA=ES+4096*19-512*6			
   460 5C98 18 8E 02 20 8E 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   460 = 029E18			?LINIA=ES+4096*20-512*6			
   460 5D10 18 9E 02 20 9E 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
Source: init_vbxe1.asm
   463
   464 5D88			adz7						//przesuniecie=0,  40x3*21=2520b  
   465 				.rept	21,#
   466 				?LINIA=ES+4096*:1-512*7			
   467 							:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   468 				.ENDR				
   468 				.endr				
Source: REPT
   466 = 015C18			?LINIA=ES+4096*0-512*7			
   466 5D88 18 5C 01 20 5C 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 016C18			?LINIA=ES+4096*1-512*7			
   466 5E00 18 6C 01 20 6C 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 017C18			?LINIA=ES+4096*2-512*7			
   466 5E78 18 7C 01 20 7C 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 018C18			?LINIA=ES+4096*3-512*7			
   466 5EF0 18 8C 01 20 8C 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 019C18			?LINIA=ES+4096*4-512*7			
   466 5F68 18 9C 01 20 9C 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 01AC18			?LINIA=ES+4096*5-512*7			
   466 5FE0 18 AC 01 20 AC 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 01BC18			?LINIA=ES+4096*6-512*7			
   466 6058 18 BC 01 20 BC 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 01CC18			?LINIA=ES+4096*7-512*7			
   466 60D0 18 CC 01 20 CC 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 01DC18			?LINIA=ES+4096*8-512*7			
   466 6148 18 DC 01 20 DC 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 01EC18			?LINIA=ES+4096*9-512*7			
   466 61C0 18 EC 01 20 EC 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 01FC18			?LINIA=ES+4096*10-512*7			
   466 6238 18 FC 01 20 FC 01 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 020C18			?LINIA=ES+4096*11-512*7			
   466 62B0 18 0C 02 20 0C 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 021C18			?LINIA=ES+4096*12-512*7			
   466 6328 18 1C 02 20 1C 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 022C18			?LINIA=ES+4096*13-512*7			
   466 63A0 18 2C 02 20 2C 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 023C18			?LINIA=ES+4096*14-512*7			
   466 6418 18 3C 02 20 3C 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 024C18			?LINIA=ES+4096*15-512*7			
   466 6490 18 4C 02 20 4C 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 025C18			?LINIA=ES+4096*16-512*7			
   466 6508 18 5C 02 20 5C 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 026C18			?LINIA=ES+4096*17-512*7			
   466 6580 18 6C 02 20 6C 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 027C18			?LINIA=ES+4096*18-512*7			
   466 65F8 18 7C 02 20 7C 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 028C18			?LINIA=ES+4096*19-512*7			
   466 6670 18 8C 02 20 8C 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
   466 = 029C18			?LINIA=ES+4096*20-512*7			
   466 66E8 18 9C 02 20 9C 02 + 			:40 DTA A([?LINIA+8*#]&$FFFF),B([?LINIA+8*#]>>16)	
Source: init_vbxe1.asm
   469 							
   470 02E2-02E3> 5D 21					ini ini7
   471 							
   472 							
   266 									
   267 							
   268 6760						org $2000
   269 							
   270 2000-2F20> 70 70 70	dlist		.he 70,70,70
   271 2003 42 00 FA					dta $42,a($fa00)
   272 2006 02 02 02 02 02 02 + 			:23 .he 02
   273 201D 41 00 20					dta $41,a(dlist)
   274
   275 							
   276 							
   277 2020 2C 0F D4		nmi			bit nmist
   278 2023 10 03					bpl *+5
   279 2025 6C 00 02					jmp (dliv)
   280 2028 6C 22 02					jmp (vbiv)	
   281
   282 202B			vbi
   283 202B 48						pha
   284 202C 98						tya
   285 202D 48						pha
   286 202E 8A						txa
   287 202F 48						pha
   288 							
   289 2030 E6 70					inc zegar
   290 2032 4E 4B 20					lsr muza1
   291 2035 90 09					bcc graj
   292 2037 AD 4A 20 8D 4B 20				mva muza0 muza1
   293 203D 4C 43 20					jmp omin_muze
   294 2040			graj			
   295 2040 20 C9 BB					jsr rmt_play
   296 2043			omin_muze
   297 2043 68						pla
   298 2044 AA						tax
   299 2045 68						pla
   300 2046 A8						tay
   301 2047 68						pla
   302 2048 40						rti
   303 							
   304 2049			dli
   305 2049 40			irq			rti
   306
   307 204A 00			muza0		dta b(0)
   308 204B 00			muza1		dta b(0)
   309
   310 204C			level_ad_tab
   311 204C 00 40 00 45 00 4A + 			:8 dta a($4000+$500*#)
   312
   313 205C			clear_screen_vbxe
   314 205C A0 53					ldy	#$53	; BLITTER_BUSY
   315 205E B1 71		@			lda (fx_ptr),y
   316 2060 D0 FC					bne @-
   317
   318 2062 A0 50					ldy	#$50	; BL_ADR0
   319 2064 A9 40 91 71 C8				mva	#clear_vbxe&$ff	(fx_ptr),y+	; BL_ADR0			;najmlodszy bajt adresu
   320 2069 A9 80 91 71 C8				mva	#[clear_vbxe>>8]&$ff	(fx_ptr),y+	; BL_ADR1		;nastepne bajty adresu
   321 206E A9 03 91 71 C8				mva	#clear_vbxe>>16	(fx_ptr),y+	; BL_ADR2
   322 2073 A9 01 91 71					mva	#1	(fx_ptr),y	; BLITTER_START				;wykonaj		
   323
   324 2077 60						rts
   325
   326 2078			copy_data
   327 2078 A0 5D					ldy #$5d
   328 207A A9 92 91 71					mva #$82+[dane_vbxe>>14] (fx_ptr),y
   329
   330 207E A0 5E					ldy #$5e
   331 2080 A9 E8 91 71 C8				mva #$e8 (fx_ptr),y+ 
   332 2085 AD F3 04					lda level_nr
   333 2088 4A						lsr
   334 2089 09 C0					ora #$80+$40				;4 okno 
   335 208B 91 71					sta (fx_ptr),y			;wÅ‚Ä…cza okno w obszarze $e000	
   336
   337 208D AD F3 04					lda level_nr
   338 2090 0A						asl
   339 2091 AA						tax
   340 2092 BD 4C 20					lda level_ad_tab,x
   341 2095 85 73					sta pom
   342 2097 BD 4D 20					lda level_ad_tab+1,x
   343 209A 85 74					sta pom+1
   344 209C A9 21 8D AD 20 A9 + 			mwa #dane_mapy _cd_dst+1
   345 							
   346 20A6 A2 05					ldx #5
   347 20A8 A0 00					ldy #0
   348 20AA B1 73		@			lda (pom),y
   349 20AC 99 FF FF		_cd_dst		sta $ffff,y
   350 20AF 88						dey
   351 20B0 D0 F8					bne @-
   352 20B2 E6 74					inc pom+1
   353 20B4 EE AE 20					inc _cd_dst+2
   354 20B7 CA						dex
   355 20B8 D0 F0					bne @-
   356
   357 20BA A0 5D					ldy #$5d
   358 20BC A9 00 91 71					mva #0 (fx_ptr),y		;zamknij okno	
   359 20C0 60						rts			
   360 							
   361 20C1			copy_mapa
   362 20C1 A0 5E					ldy #$5e
   363 20C3 A9 E8 91 71 C8				mva #$e8 (fx_ptr),y+ 
   364 20C8 AD F3 04					lda level_nr
   365 20CB 0A						asl
   366 20CC 09 D0					ora #$80+$50	;$D0
   367 20CE 91 71					sta (fx_ptr),y			;wÅ‚Ä…cza okno w obszarze $e000
   368 20D0 09 01					ora #1
   369 20D2 85 79					sta pom0
   370
   371 20D4 A9 00 8D 03 21 A9 + 			mwa #mapa _cp_dst+1
   372 20DE A2 10					ldx #16
   373 20E0 20 F6 20					jsr copy_pom
   374 20E3 A0 5F					ldy #$5f
   375 20E5 A5 79					lda pom0
   376 20E7 91 71					sta (fx_ptr),y
   377 20E9 20 F6 20					jsr copy_pom
   378 20EC A0 5E					ldy #$5e
   379 20EE A9 00					lda #0
   380 20F0 91 71 C8					sta (fx_ptr),y+
   381 20F3 91 71					sta (fx_ptr),y			;zamknij okno
   382 20F5 60						rts
   383 							
   384 20F6			copy_pom
   385 20F6 A2 10					ldx #16
   386 20F8 A0 00					ldy #0
   387 20FA A9 E0 8D 01 21				mva #$e0 _cp_src+2
   388 20FF			@			
   389 20FF B9 00 FF		_cp_src		lda $ff00,y
   390 2102 99 00 40		_cp_dst		sta mapa,y
   391 2105 88						dey
   392 2106 D0 F7					bne @-
   393 2108 EE 01 21					inc _cp_src+2
   394 210B EE 04 21					inc _cp_dst+2
   395 210E CA						dex
   396 210F D0 EE					bne @-
   397 2111 60						rts
   398 							
   399 2112 30 32 25 33 33 00 + text_press	dta d'PRESS ANY KEY TO START'			
   400
   401 2128			run			
   402 2128 A5 14					lda 20
   403 212A C5 14					cmp 20
   404 212C F0 FC					beq *-2
   405 							
   406 							
   407 212E 78						sei
   408 212F A9 00 8D 0E D4				mva #0 nmien
   409 2134 8D 04 04					sta V_SCROLL_DELTA
   410 2137 8D 08 D2					sta audctl			;inicjalizacja dÅºwiÄ™ku
   411 213A A9 03 8D 0F D2				mva #3 skctl
   412 							
   413 213F A9 FE 8D 01 D3				mva #$fe portb
   414 2144 A9 2B 8D 22 02 A9 + 			mwa #vbi vbiv
   415 214E A9 49 8D 00 02 A9 + 			mwa #dli dliv
   416 							
   417 2158 A9 20 8D FA FF A9 + 			mwa #nmi $fffa
   418 2162 A9 49 8D FE FF A9 + 			mwa #irq $fffe
   419 216C A9 49 8D FC FF A9 + 			mwa #irq $fffc
   420 							
   421 2176 A9 C0 8D 0E D4				mva #64+128 nmien
   422 							
   423 217B 20 21 A4					jsr clear_screen
   424
   425 217E 20 52 2E					jsr wait_vbl1
   426
   427 2181 A9 00 8D 02 D4 A9 + 			mwa #dlist dlptr
   428 218B A9 00 8D 18 D0				mva #0 colpf2
   429 2190 8D 1A D0					sta colbak
   430 2193 A9 0A 8D 17 D0				mva #$0a colpf1
   431 2198 A9 22 8D 00 D4				mva #$22 dmactl
   432 219D A9 80 8D 09 D4				mva #>znaki chbase
   433 							
   434 21A2 8D 0B D2					sta potg0
   435 						
   436 							
   437 21A5 AD 0B D4		@			lda vcount
   438 21A8 10 FB					bpl @-
   439 21AA AD 0B D4		@			lda vcount
   440 21AD F0 05					beq @+
   441 21AF 85 79					sta pom0
   442 21B1 4C AA 21					jmp @-
   443 = 21B4			@			equ *			
   444 								
   445
   446 21B4 AD 00 D2 85 7C				mva pot0 pot0s
   447 21B9 85 7D					sta pot0s1
   448 21BB A9 00 8D 4A 20				mva #0 muza0
   449 21C0 A4 79		@			ldy pom0
   450 21C2 C0 90					cpy #$90
   451 21C4 B0 05					bcs @+		
   452 21C6 A9 20 8D 4A 20				mva #32 muza0
   453 = 21CB			@			equ *			
   454 21CB 8D 4B 20					sta muza1
   455 							
   456 21CE A2 15					ldx #21
   457 21D0 BD 12 21		@			lda text_press,x
   458 21D3 D0 02					bne *+4
   459 21D5 A9 E6					lda #-$1a
   460 21D7 18						clc
   461 21D8 69 3A					adc #$3a
   462 21DA 9D A1 FD					sta $fd98+9,x
   463 21DD CA						dex
   464 21DE 10 F0					bpl @-
   465 							
   466 							
   467 21E0 AD 0F D2		@			lda skctl
   468 21E3 29 04					and #4				;dowolny klawisz
   469 21E5 D0 F9					bne @-
   470 							
   471 				//wlacz VBXE	
   472 21E7 20 59 2E					jsr wait_vbl
   473 21EA 20 5C 20					jsr clear_screen_vbxe	
   474 						
   475 21ED A0 40					ldy	#$40	; VIDEO_CONTROL
   476 21EF A9 01 91 71					mva	#1	(fx_ptr),y	; xdl_enabled
   477 21F3 C8						iny
   478 21F4 A9 00 91 71					mva	#xdl_vbxe&$ff	(fx_ptr),y	; XDL_ADR0			podaj adres 24bitowy
   479 21F8 C8						iny
   480 21F9 A9 80 91 71					mva	#[xdl_vbxe>>8]&$ff	(fx_ptr),y	; XDL_ADR1
   481 21FD C8						iny
   482 21FE A9 03 91 71					mva	#xdl_vbxe>>16	(fx_ptr),y	; XDL_ADR2						
   483
   484 						
   485
   486 				/*			mva #$f4 kol1+5				;poprawki kolorÃ³w NTSC
   487 							lda #$c8
   488 							sta level_color_tab
   489 							sta level_color_tab+2
   490 							sta level_color_tab+3
   491 							lda #$84 
   492 							sta level_color_tab+1		*/
   492
   493
   494 					
   495
   496 							
   497 2202 A9 00					lda #0
   498 2204 AA						tax
   499 2205 A0 B0					ldy #$b0		;muzyka pod $b000
   500 2207 20 0F BA					jsr rmt_init
   501 							
   502 							
   503 220A 20 AB 98					jsr init_random
   504 220D 20 85 27					jsr init_sprites
   505 2210			START			
   506 							
   507 2210 20 B5 28					jsr SCREEN_MAIN_TITLE
   508 2213 A9 00					LDA #$00        ;#%00000000
   509 2215 8D F8 04					STA SCORE_LSB				;wyzeruj punkty
   510 2218 8D F9 04					STA SCORE_MSB
   511 221B 8D 02 04					STA V_SCROLL_BIT_IDX			;przesuniecie ekranu?
   512 221E 85 7F					sta vscrol1
   513 2220 8D F7 27					sta sprites_size				;duszki normalnej wielkoÅ›ci
   514 2223 8D F3 04					STA LEVEL_NR					;poziom startowy
   515 							
   516 2226 A9 05					LDA #$05     ;#%00000101
   517 2228 8D FF 04					STA GRENADES					;5 granatÃ³w
   518 222B 8D 00 05					STA LIVES						;5 Å¼yÄ‡
   519 							
   520 222E			START_LEVEL          ;$08B8
   521 222E A9 A5					LDA #$A5     ;#%10100101			;pozycja poczatkowa na mapie
   522 2230 8D 03 04					STA V_SCROLL_ROW_IDX
   523 							;LDA #$00     ;Song to play (main theme)
   524 							;JSR MUSIC_INIT
   525 							
   526 2233			RESTART
   527 2233 20 21 34					JSR SETUP_LEVEL
   528 2236 20 52 35					JSR SETUP_SCREEN
   529 							;JSR SETUP_IRQ	
   530 2239 20 52 2E					jsr wait_vbl1
   531 223C A0 40					ldy #$40
   532 223E A9 05 91 71					mva #1+4 (fx_ptr),y	
   533 2242 20 0C 2C					jsr LEVEL_DRAW_VIEWPORT
   534 2245 4C 5F 22					jmp game_loop1
   535
   536 				        ; Main loop
   537 2248			GAME_LOOP            ;$08CB	
   538 2248 20 59 2E		        JSR WAIT_RASTER_AT_BOTTOM
   539 						;jsr wait_vbl1
   540 224B A5 7C 85 7D				mva pot0s pot0s1
   541 224F AD 00 D2 85 7C			mva pot0 pot0s
   542 2254 8D 0B D2				sta potg0
   543 						
   544 2257 AD 02 04				lda V_SCROLL_BIT_IDX
   545 225A 85 7F				sta vscrol1
   546 225C 20 0C 2C				jsr LEVEL_DRAW_VIEWPORT
   547 						
   548 225F			game_loop1		
   549 225F AD 04 04		        LDA V_SCROLL_DELTA
   550 2262 F0 23		        BEQ @+
   551 2264 18			        CLC
   552 2265 6D 02 04		        ADC V_SCROLL_BIT_IDX
   553 2268 29 07		        AND #$07     ;#%00000111
   554 226A 8D 02 04		        STA V_SCROLL_BIT_IDX
   555 						;sta vscrol		
   556 						
   557 226D C9 07		        CMP #$07     ;#%00000111
   558 226F D0 16		        BNE @+
   559 2271 CE 03 04		        DEC V_SCROLL_ROW_IDX
   560 2274 A9 00		        LDA #$00     ;#%00000000
   561 2276 8D E9 04		        STA a04E9
   562 2279 20 5E 2C		        JSR APPLY_DELTA_MOV
   563 227C EE E9 04		        INC a04E9
   564 227F E6 7E				inc refr
   565 				        //JSR LEVEL_DRAW_VIEWPORT
   566 2281 EE E9 04		        INC a04E9
   567 2284 4C 48 22		        JMP GAME_LOOP
   568
   569 2287 EE 0A 04		@	    INC GAME_TICK
   570 228A 20 5E 2C		        JSR APPLY_DELTA_MOV
   571 				        //JSR SORT_SPRITES_BY_Y
   572 228D 20 DB 3C		        JSR TRY_THROW_GRENADE			;obsÅ‚uga fire
   573 2290 20 00 88		        JSR ANIM_ENEMIES
   574 2293 20 BA 98		        JSR RUN_ACTIONS
   575 2296 20 8F 3A		        JSR ANIM_HERO
   576
   577 2299 AD 03 05		        LDA IS_HERO_DEAD
   578 229C D0 38		        BNE HERO_DIED
   579 229E 20 02 37		        JSR HANDLE_JOY2
   580 22A1 AD F7 04		        LDA IS_ANIM_EXIT_DOOR
   581 22A4 D0 03		        BNE @+
   582 22A6 20 BE 39		        JSR CHECK_COLLISION
   583 22A9 AD 20 D8		@	    LDA SPRITES_Y00
   584 22AC C9 5A		        CMP #$5A
   585 22AE D0 98		        BNE GAME_LOOP
   586
   587 22B0 A9 14		        LDA #$14     ;Points won after beating lvl
   588 22B2 20 DC 35		        JSR SCORE_ADD
   589 22B5 AD F3 04		        LDA LEVEL_NR
   590 22B8 29 03		        AND #$03     ;#%00000011
   591 22BA C9 03		        CMP #$03     ;#%00000011
   592 22BC D0 05		        BNE @+
   593
   594 				        ;Play animation at end of Level 3
   595 22BE A9 09		        LDA #$09     ;#%00001001
   596 				        //JSR SFX_PLAY
   597 22C0 20 E7 A5		        JSR SET_FORT_ON_FIRE
   598
   599 22C3 A9 02		@	    LDA #$02     ;Song to play (Level complete)
   600 				        //JSR MUSIC_INIT
   601 22C5 20 78 A6		        JSR PRINT_LVL_COMPLETE
   602 22C8 EE F3 04		        INC LEVEL_NR
   603 						
   604
   605 				        ; Since LVL2 was removed from the game, when LVL2 is reached,
   606 				        ; the level is changed to LVL3.
   607 22CB AD F3 04		        LDA LEVEL_NR
   608 22CE 29 07		        AND #$07     ;#%00000011
   609 22D0 8D F3 04				sta level_nr
   610 				        ;CMP #$02     ;#%00000010
   611 				        ;BNE @+
   612 				        ;INC LEVEL_NR
   613
   614 22D3 4C 2E 22		@	    JMP START_LEVEL			
   615 							
   616
   617 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
   618 				; Animate hero "is dead"
   619 22D6			HERO_DIED               ;b0953
   620 22D6 AD 03 05		        LDA IS_HERO_DEAD
   621 22D9 C9 02		        CMP #$02     ;Died of fall in trench/water?
   622 22DB D0 1E		        BNE @+1
   623
   624 				        ; Hero fell down in trench
   625 22DD EE E6 04		        INC COUNTER1
   626 22E0 AD E6 04		        LDA COUNTER1
   627 22E3 C9 14		        CMP #$14     ;#%00010100
   628 22E5 90 0C		        BCC @+
   629 22E7 C9 50		        CMP #$50     ;#%01010000
   630 22E9 B0 2E		        BCS @+3
   631 22EB A9 CC		        LDA #$CC     ;Hero fall down in trench frame #1
   632 22ED 8D 50 D8		        STA SPRITES_PTR00
   633 22F0 4C 48 22		        JMP GAME_LOOP
   634
   635 22F3 A9 CB		@	    LDA #$CB     ;Hero fall down in trench frame #0
   636 22F5 8D 50 D8		        STA SPRITES_PTR00
   637 22F8 4C 48 22		        JMP GAME_LOOP
   638
   639 				        ; Hero was shot
   640 22FB EE E6 04		@	    INC COUNTER1
   641 22FE AD E6 04		        LDA COUNTER1
   642 2301 C9 14		        CMP #$14     ;#%00010100
   643 2303 90 0C		        BCC @+
   644 2305 C9 50		        CMP #$50     ;#%01010000
   645 2307 B0 10		        BCS @+1
   646 2309 A9 B8		        LDA #$B8     ;Hero was shot: frame #1
   647 230B 8D 50 D8		        STA SPRITES_PTR00
   648 230E 4C 48 22		        JMP GAME_LOOP
   649
   650 2311 A9 DD		@	    LDA #$DD     ;Hero was shot: frame #0
   651 2313 8D 50 D8		        STA SPRITES_PTR00
   652 2316 4C 48 22		        JMP GAME_LOOP
   653
   654 				        ; End of "died" animation. Decrease life.
   655 2319			@	    ;DEC LIVES
   656 2319 38					sec
   657 231A AD 00 05				lda lives
   658 231D F8					sed
   659 231E E9 01				sbc #1
   660 2320 D8					cld
   661 2321 8D 00 05				sta lives
   662 						
   663 2324 20 81 36		        JSR SCREEN_REFRESH_LIVES
   664 2327 AD 00 05		        LDA LIVES
   665 232A F0 03		        BEQ GAME_OVER
   666 232C 4C 33 22		        JMP RESTART
   667 									
   668 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
   669 232F			GAME_OVER
   670 232F 20 59 2E				jsr wait_vbl
   671 2332 20 5C 20				jsr clear_screen_vbxe
   672 						
   673 2335 A2 06		        LDX #$06     ;#%00000110
   674 2337 8A			@	    TXA						;L00
   675 2338 0A			        ASL 
   676 2339 A8			        TAY
   677 233A AD F9 04		        LDA SCORE_MSB
   678 233D D9 0F A4		        CMP HISCORE_LSB00,Y
   679 2340 90 4C		        BCC @+3
   680 2342 D0 08		        BNE @+
   681 2344 AD F8 04		        LDA SCORE_LSB
   682 2347 D9 10 A4		        CMP HISCORE_MSB00,Y
   683 234A 90 42		        BCC @+3
   684 234C 8A			@	    TXA							;L01
   685 234D 0A			        ASL 
   686 234E A8			        TAY
   687 234F B9 0F A4		        LDA HISCORE_LSB00,Y
   688 2352 99 11 A4		        STA HISCORE_LSB01,Y
   689 2355 B9 10 A4		        LDA HISCORE_MSB00,Y
   690 2358 99 12 A4		        STA HISCORE_MSB01,Y
   691 235B 8A			        TXA
   692 235C 0A			        ASL 
   693 235D 0A			        ASL 
   694 235E 0A			        ASL 
   695 235F A8			        TAY
   696 2360 B9 C7 A3		@	    LDA HISCORE_NAME00,Y			;L02
   697 2363 99 CF A3		        STA HISCORE_NAME01,Y
   698 2366 C8			        INY
   699 2367 98			        TYA
   700 2368 29 07		        AND #$07     ;#%00000111
   701 236A D0 F4		        BNE @-
   702 236C CA			        DEX
   703 236D 10 C8		        BPL @-2
   704
   705 236F AD F9 04		        LDA SCORE_MSB
   706 2372 8D 0F A4		        STA HISCORE_LSB00
   707 2375 AD F8 04		        LDA SCORE_LSB
   708 2378 8D 10 A4		        STA HISCORE_MSB00
   709 237B 20 6B A1		        JSR SCREEN_ENTER_HI_SCORE
   710
   711 237E A0 00		        LDY #$00
   712 2380 B9 06 05		@	    LDA HISCORE_NAME,Y
   713 2383 99 C7 A3		        STA HISCORE_NAME00,Y
   714 2386 C8			        INY
   715 2387 C0 08		        CPY #$08
   716 2389 D0 F5		        BNE @-
   717 238B 4C BC 23		        JMP @+3				;do L07
   718
   719 238E 8A			@	    TXA				;L04
   720 238F 0A			        ASL 
   721 2390 A8			        TAY
   722 2391 AD F9 04		        LDA SCORE_MSB
   723 2394 99 11 A4		        STA HISCORE_LSB01,Y
   724 2397 AD F8 04		        LDA SCORE_LSB
   725 239A 99 12 A4		        STA HISCORE_MSB01,Y
   726 239D E0 06		        CPX #$06     ;#%00000110
   727 239F D0 03		        BNE @+
   728 23A1 4C 10 22		        JMP START
   729
   730 23A4 8A			@	    TXA					;L05
   731 23A5 48			        PHA
   732 23A6 20 6B A1		        JSR SCREEN_ENTER_HI_SCORE
   733 23A9 68			        PLA
   734 23AA 0A			        ASL 
   735 23AB 0A			        ASL 
   736 23AC 0A			        ASL 
   737 23AD AA			        TAX
   738 23AE A0 00		        LDY #$00     ;#%00000000
   739 23B0 B9 06 05		@	    LDA HISCORE_NAME,Y					;L06
   740 23B3 9D CF A3		        STA HISCORE_NAME01,X
   741 23B6 E8			        INX
   742 23B7 C8			        INY
   743 23B8 C0 08		        CPY #$08     ;#%00001000
   744 23BA D0 F4		        BNE @-								;L06
   745
   746 23BC 20 A8 35		@	    JSR CLEANUP_SPRITES			;L07
   747 23BF 20 F5 A2		        JSR DISPLAY_HI_SCORES
   748
   749 23C2 A0 64		        LDY #$64     ;#%01100100
   750 23C4 20 D5 35		        JSR DELAY
   751
   752 				        ; Wait for 255 frames or joystick fire
   753
   754 23C7 A9 FF		        LDA #$FF     ;#%11111111
   755 23C9 8D E6 04		        STA COUNTER1
   756 23CC			@	    ;LDA $DC00    ;CIA1: Data Port Register A  (fire in Game Over scene) ;L08
   757 				        ;CMP #$6F     ;#%01101111
   758 23CC AD 10 D0				lda trig0
   759 23CF F0 08		        BEQ @+
   760 23D1 20 59 2E		        JSR WAIT_RASTER_AT_BOTTOM
   761 23D4 CE E6 04		        DEC COUNTER1
   762 23D7 D0 F3		        BNE @-
   763 23D9 4C 10 22		@	    JMP START				;L09
   764
   765 23DC			tab_y_m
   766 23DC 00 00 00 00 00 00 + 		:256 dta b(<[#*SCREEN_SZER])
   767 						
   768 24DC			tab_y_s
   769 24DC 00 02 04 06 08 0A + 		:256 dta b(>[#*SCREEN_SZER])	
   770 						
   771 25DC			tab_y_s1
   772 25DC 00 00 00 00 00 00 + 		:256 dta b([#*SCREEN_SZER]>>16)			
   773
   774 26DC			tab_shapes
   775 26DC 00 02 04 06 08 0A + 		:112 dta b(#*2)
   776
   777 274C			set_color
   778 274C A0 44					ldy	#$44
   779 274E A9 C0 91 71 C8				mva	#$c0	(fx_ptr),y+	; CSEL ,nr koloru
   780 2753 A9 01 91 71					mva	#1	(fx_ptr),y	; PSEL	,nr palety
   781 							
   782 2757 BD 7F 27					lda tab_colbg,x
   783 275A 8D 6E 27					sta _r0+1
   784 275D BD 80 27					lda tab_colbg+1,x
   785 2760 8D 73 27					sta _g0+1
   786 2763 BD 81 27					lda tab_colbg+2,x
   787 2766 8D 78 27					sta _b0+1
   788 							
   789 							
   790 2769 A2 40					ldx #$40
   791 276B A0 46		@			ldy #$46
   792 276D A9 00 91 71 C8	_r0			mva #0	(fx_ptr),y+		;RED
   793 2772 A9 00 91 71 C8	_g0			mva #0	(fx_ptr),y+		;GREEN
   794 2777 A9 00 91 71		_b0			mva #0	(fx_ptr),y		;BLUE
   795 277B CA						dex
   796 277C D0 ED					bne @-
   797 277E 60						rts
   798 							
   799 277F 29 8D 3C		tab_colbg	dta 41,141,60		;green
   800 2782 34 29 89					dta 52,41,137		;blue
   801 							
   802 							
   803 							
   804
   805 2785			init_sprites
   806 2785 A2 0F				ldx #TOTAL_MAX_SPRITES-1
   807 2787 A9 00		@		lda #0		
   808 2789 9D 20 D8				sta SPRITES_Y00,x
   809 278C 9D 70 D8				sta SPRITES_DELTA_Y00,x
   810 278F 9D 10 D8				sta SPRITES_X_LO00,x
   811 2792 9D 20 D8				sta SPRITES_Y00,x
   812 2795 9D 60 D8				sta SPRITES_DELTA_X00,x
   813 2798 9D 80 D8				sta sprites_TYPE00,x
   814 279B A9 FF				lda #255
   815 279D 9D 50 D8				sta sprites_PTR00,x
   816 27A0 CA					dex
   817 27A1 10 E4				bpl @-
   818 27A3 60					rts
   819
   820 27A4			print_sprites
   821 27A4 A9 66 85 73 A9 46 + 		mwa #$4000+[duszki_vbxe&$3fff] pom
   822 						
   823 27AC A0 5D				ldy #$5d
   824 27AE A9 8F 91 71				mva #$80+[duszki_vbxe >> 14] (fx_ptr),y	;wlacz okno B
   825
   826 27B2 A2 0F				ldx #15
   827 						
   828 						
   829 27B4 BC 50 D8		@		ldy SPRITES_PTR00,x
   830 27B7 B9 4C 26				lda tab_shapes-$90,y
   831 27BA A0 01				ldy #1
   832 27BC 91 73				sta (pom),y				;ksztalt
   833 						
   834 27BE BC 20 D8				ldy SPRITES_Y00,x
   835 27C1 B9 DC 24				lda tab_y_s,y
   836 27C4 85 79				sta pom0
   837 27C6 B9 DC 25				lda tab_y_s1,y
   838 27C9 85 7A				sta pom0a
   839 27CB 18					clc
   840 27CC B9 DC 23				lda tab_y_m,y
   841 27CF 7D 10 D8				adc SPRITES_X_LO00,x
   842 27D2 A0 06				ldy #6
   843 27D4 91 73				sta (pom),y
   844 27D6 BD 00 D8				lda SPRITES_X_HI00,x
   845 27D9 10 02				bpl *+4
   846 27DB A9 01				lda #1
   847 27DD 65 79				adc pom0
   848 27DF C8					iny
   849 27E0 91 73				sta (pom),y				;pozycja na ekranie
   850 						
   851 27E2 A9 01				lda #1
   852 27E4 65 7A				adc pom0a
   853 27E6 C8					iny
   854 27E7 91 73				sta (pom),y	
   855 						
   856 27E9 BD 40 D8				lda SPRITES_COLOR00,x
   857 27EC 0A 0A				:2 asl
   858 27EE 09 03				ora #$03
   859 27F0 29 3F				and #$3f
   860 27F2 A0 0F				ldy #15
   861 27F4 91 73				sta (pom),y				;kolor
   862 						
   863 = 27F7			sprites_size	equ *+1		
   864 27F6 A9 00				lda #$00			;zoom x i y
   865 27F8 A0 12				ldy #18
   866 27FA 91 73				sta (pom),y	
   867 						
   868 27FC BD 30 D8				lda sprites_bkg_pri00,x
   869 27FF F0 02				beq *+4
   870 2801 A9 02				lda #2
   871 2803 85 79				sta pom0
   872 								
   873 2805 A0 14				ldy #20
   874 2807 B1 73				lda (pom),y
   875 2809 29 09				and #8+1
   876 280B 05 79				ora pom0
   877 280D 91 73				sta (pom),y
   878 						
   879 						
   880 						
   881 280F 18					clc
   882 2810 A5 73				lda pom
   883 2812 69 15				adc #21			;next bcb
   884 2814 85 73				sta pom
   885 2816 90 02				bcc *+4
   886 2818 E6 74				inc pom+1	
   887 						
   888 281A CA					dex
   889 281B 10 97				bpl @-
   890 281D 60					rts
   891 281E			print_sprites1		
   892 281E A0 5D				ldy #$5d
   893 2820 A9 00 91 71				mva #0 (fx_ptr),y
   894 						
   895 2824 A0 53				ldy	#$53	; BLITTER_BUSY
   896 2826 B1 71		@		lda (fx_ptr),y
   897 2828 D0 FC				bne @-	
   898 						
   899 282A A0 50				ldy	#$50	; BL_ADR0
   900 282C A9 66 91 71 C8			mva	#duszki_vbxe&$ff	(fx_ptr),y+	; BL_ADR0			;najmlodszy bajt adresu
   901 2831 A9 C6 91 71 C8			mva	#[duszki_vbxe>>8]&$ff	(fx_ptr),y+	; BL_ADR1		;nastepne bajty adresu
   902 2836 A9 03 91 71 C8			mva	#duszki_vbxe>>16	(fx_ptr),y+	; BL_ADR2
   903 283B A9 01 91 71				mva	#1	(fx_ptr),y	; BLITTER_START				;wykonaj
   904 						
   905 283F 60					rts	
   906
   907 2840			tab_vscrol0
   908 				.rept	4,#*2520
   909 							DTA A(ADZ0&$3FFF+:1)
   910 				.ENDR
   910 				.endr
Source: REPT
   909 2840 00 00					DTA A(ADZ0&$3FFF+0)
   909 2842 D8 09					DTA A(ADZ0&$3FFF+2520)
   909 2844 B0 13					DTA A(ADZ0&$3FFF+5040)
   909 2846 88 1D					DTA A(ADZ0&$3FFF+7560)
Source: c.asm
   911 				.rept	4,#*2520
   912 							DTA A(ADZ4&$3FFF+$4000+:1)
   913 				.ENDR
   913 				.endr
Source: REPT
   912 2848 00 40					DTA A(ADZ4&$3FFF+$4000+0)
   912 284A D8 49					DTA A(ADZ4&$3FFF+$4000+2520)
   912 284C B0 53					DTA A(ADZ4&$3FFF+$4000+5040)
   912 284E 88 5D					DTA A(ADZ4&$3FFF+$4000+7560)
Source: c.asm
   914
   915 				//rysuj pasek mapa=pom , x=nr paska
   916 2850			draw_ekran
   917 2850 AD 0B D4		@			lda vcount
   918 2853 C9 29					cmp #41
   919 							;bne @-
   920 							
   921 2855 A0 5D					ldy #$5d
   922 2857 A9 8E 91 71					mva #$80+[cp_znaki_vbxe >> 14] (fx_ptr),y
   923 285B A5 85 8D 00 41 A5 + 			mwa mapa_ad $4000+[cp_znaki_vbxe& $3fff]					;adres linii mapy , skad bedzie pobierac znaki
   924 							
   925 2865 A5 7F					lda vscrol1
   926 2867 0A						asl
   927 2868 AA						tax
   928 2869 BD 40 28					lda tab_vscrol0,x
   929 286C 48						pha
   930 286D 8D 15 41					sta $4000+[cp_znaki_vbxe& $3fff]+21	
   931 2870 BD 41 28					lda tab_vscrol0+1,x
   932 2873 AA						tax
   933 2874 8D 16 41					sta $4001+[cp_znaki_vbxe& $3fff]+21	
   934 2877 68						pla
   935 2878 18						clc
   936 2879 69 01					adc #1
   937 287B 90 02					bcc *+4
   938 287D E8						inx
   939 287E 18						clc
   940 287F 8D 2A 41					sta $4000+[cp_znaki_vbxe& $3fff]+42
   941 2882 8E 2B 41					stx $4001+[cp_znaki_vbxe& $3fff]+42
   942 2885 18						clc
   943 2886 69 01					adc #1
   944 2888 90 01					bcc *+3
   945 288A E8						inx
   946 288B 8D 3F 41					sta $4000+[cp_znaki_vbxe& $3fff]+63
   947 288E 8E 40 41					stx $4001+[cp_znaki_vbxe& $3fff]+63
   948 							
   949 2891 A5 83 8D 64 41				mva level_m $4010+[cp_znaki_vbxe& $3fff]+84			;ktÃ³ra mapa 00=0,40=1,80=2,c0=3
   950 2896 A5 84 8D 79 41				mva level_s $4010+[cp_znaki_vbxe& $3fff]+105			;ktora czworka map 6=0,1,2,3 7=4,5,6,7	
   951
   952 289B A9 00 91 71					mva #0 (fx_ptr),y
   953 							
   954 				//wlacz blit'a			
   955 289F A0 50					ldy	#$50	; BL_ADR0
   956 28A1 A9 00 91 71 C8				mva	#cp_znaki_vbxe&$ff	(fx_ptr),y+	; BL_ADR0			;najmlodszy bajt adresu
   957 28A6 A9 81 91 71 C8				mva	#[cp_znaki_vbxe>>8]&$ff	(fx_ptr),y+	; BL_ADR1		;nastepne bajty adresu
   958 28AB A9 03 91 71 C8				mva	#cp_znaki_vbxe>>16	(fx_ptr),y+	; BL_ADR2
   959 28B0 A9 01 91 71					mva	#1	(fx_ptr),y	; BLITTER_START				;wykonaj		
   960 							
   961 28B4 60						rts		
   962
   963 28B5			SCREEN_MAIN_TITLE
   964 28B5 20 21 A4					jsr clear_screen
   965 28B8 20 52 2E					jsr wait_vbl1
   966 28BB A0 40					ldy #$40
   967 28BD A9 01 91 71					mva #1 (fx_ptr),y	
   968 28C1 20 5C 20					jsr clear_screen_vbxe
   969 28C4 20 A8 35					jsr cleanup_sprites
   970 							//wyczysc duszki
   971 							
   972 							;mva #0 colbak			;czarne tÅ‚o
   973 							;sta colpf2
   974 							;mva #$08 colpf1
   975 							
   976 							; HACK: Sets level number to LVL2 in order to use the charset from $D000  ?
   977 28C7 A9 02					lda #$02     ;#%00000010
   978 28C9 8D F3 04					sta LEVEL_NR
   979
   980 28CC A9 11					lda #$11
   981 28CE 8D F7 27					sta sprites_size
   982 							
   983 28D1 A2 00					LDX #$00     ;#%00000000
   984 28D3 A9 48		@    		LDA #$48     ;Sprite Y position
   985 28D5 9D 25 D8					STA SPRITES_Y05,X					;pozycja Y dszkÃ³w
   986 28D8 BD 39 2C					LDA _MS_SPRITES_X_LO05,X			;pozycja X duszka mlodszy bajt
   987 28DB 9D 15 D8					STA SPRITES_X_LO05,X
   988 28DE BD 47 2C					LDA _MS_SPRITES_PTR05,X
   989 28E1 9D 55 D8					STA SPRITES_PTR05,X
   990 28E4 BD 40 2C					LDA _MS_SPRITES_X_HI05,X
   991 28E7 9D 05 D8					STA SPRITES_X_HI05,X
   992 28EA A9 00					LDA #$00     ;#%00000000
   993 28EC 9D 65 D8					STA SPRITES_DELTA_X05,X
   994 28EF 9D 75 D8					STA SPRITES_DELTA_Y05,X
   995 28F2 A9 10					LDA #$10            ;anim_type_10: void
   996 28F4 9D 85 D8					STA SPRITES_TYPE05,X
   997 28F7 A9 07					LDA #$08-1     ;orange
   998 28F9 9D 45 D8					STA SPRITES_COLOR05,X
   999 28FC A9 00					LDA #$00     ;#%00000000
  1000 28FE 9D 35 D8					STA SPRITES_BKG_PRI05,X
  1001 2901 E8						INX
  1002 2902 E0 07					CPX #$07     ;total number of sprites
  1003 2904 D0 CD					BNE @-
  1004 							
  1005 							
  1006 2906 20 5E 2C					JSR APPLY_DELTA_MOV
  1007 							;JSR SORT_SPRITES_BY_Y
  1008 							
  1009 							
  1010 							
  1011 2909			SCREEN_MAIN_TITLE1	
  1012 2909 20 1C 2D					JSR PRINT_CREDITS
  1013 						
  1014 290C A9 00					LDA #$00     ;#%00000000
  1015 290E 8D 90 D8					STA SPRITES_TMP_A01
  1016 										
  1017 2911 20 52 2E					jsr wait_vbl1		
  1018 2914 A0 40					ldy #$40
  1019 2916 A9 01 91 71					mva #1 (fx_ptr),y				
  1020 291A 20 5C 20					jsr clear_screen_vbxe
  1021 291D 20 A4 27					jsr print_sprites
  1022 2920 20 1E 28					jsr print_sprites1
  1023
  1024 2923 A9 FF		@	    	LDA #$FF     ;#%11111111
  1025 2925 8D E6 04					STA COUNTER1
  1026 2928			_WAIT_FIRE
  1027 2928 AD 10 D0					lda trig0
  1028 292B F0 5B					BEQ _END
  1029 292D 20 52 2E					JSR wait_vbl1	;WAIT_RASTER_AT_BOTTOM
  1030 2930 CE E6 04					DEC COUNTER1
  1031 2933 D0 F3					BNE _WAIT_FIRE
  1032 							
  1033 2935 A0 40					ldy #$40
  1034 2937 A9 05 91 71					mva #1+4 (fx_ptr),y	
  1035 							
  1036 293B AE 90 D8					LDX SPRITES_TMP_A01			;licznik
  1037 293E E0 07					cpx #7
  1038 2940 F0 C7					jeq SCREEN_MAIN_TITLE1
  1039 							
  1040 2942 20 89 29					jsr clear_screen1
  1041 							
  1042 2945 AE 90 D8					ldx SPRITES_TMP_A01		;licznik
  1043 2948 BC A1 29					ldy _SCROLL_IDX,X		;nr linii startowej
  1044 294B B9 74 2A					lda tab_40m,y
  1045 294E 85 85					sta mapa_ad
  1046 2950 B9 3C 2B					lda tab_40s,y
  1047 2953 BC 9A 29					ldy _LEVEL_IDX,X
  1048 2956 19 04 2C					ora tab_mapa,y
  1049 2959 85 86					sta mapa_ad+1
  1050 										
  1051 295B A9 00 85 7F					mva #0 vscrol1
  1052 							
  1053 295F BD 9A 29					LDA _LEVEL_IDX,X
  1054 2962 29 03					and #3
  1055 2964 A8						tay
  1056 2965 B9 A8 29					lda tab_lev_m,y
  1057 2968 85 83					sta level_m
  1058 296A BD 9A 29					LDA _LEVEL_IDX,X
  1059 296D 4A 4A					:2 lsr
  1060 296F 09 06					ora #6
  1061 2971 85 84					sta level_s
  1062 2973 EE 90 D8					INC SPRITES_TMP_A01
  1063 2976 BC 9A 29					ldy _LEVEL_IDX,X
  1064 2979 BE C8 2E					ldx level_color_tab,y
  1065 297C 20 4C 27					jsr set_color
  1066 297F 20 59 2E					jsr wait_vbl
  1067 2982 20 50 28					jsr draw_ekran
  1068 							
  1069 2985 4C 23 29					jmp @-
  1070
  1071 2988			_END    	
  1072 2988 60						rts
  1073 							
  1074 2989			clear_screen1
  1075 2989 A2 00					ldx #0
  1076 298B A9 20					lda #$20
  1077 298D 9D 00 FA		@			sta $fa00,x
  1078 2990 9D 00 FB					sta $fb00,x
  1079 2993 9D 00 FC					sta $fc00,x
  1080 2996 CA						dex
  1081 2997 D0 F4					bne @-
  1082 2999 60						rts
  1083
  1084 299A			_LEVEL_IDX      ;$1001
  1085 299A 00 04 01 05 02 03 + 			.BYTE $00,$04,$01,$05,$02,$03,$07	;nr poziomÃ³w
  1086 29A1			_SCROLL_IDX     ;$1008
  1087 29A1 53 7C 3A 01 A9 6E + 			.BYTE $53,$7C,$3A,$01,$A9,$6E,$36		;przesuniÄ™cie w poziomie
  1088 							
  1089 29A8 00 40 80 C0		tab_lev_m	.he 00,40,80,c0			
  1090 							
  1091 29AC			tab_5
  1092 29AC 00 01 02 03 04 00 + 		:40 dta b(0,1,2,3,4)
  1093 						
  1094 2A74			tab_40m
  1095 2A74 00 28 50 78 A0 C8 + 		:200 dta b(<[#*40])
  1096 2B3C			tab_40s
  1097 2B3C 00 00 00 00 00 00 + 		:200 dta b(>[#*40])		
  1098
  1099 2C04			tab_mapa
  1100 2C04 00 20 40 60 80 A0 + 		.he 00,20,40,60,80,a0,c0,e0
  1101
  1102
  1103 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  1104 				; Copies "current" map to screen RAM
  1105 				; FIXME: Can be improved by having a precalcualted offset table
  1106 2C0C			LEVEL_DRAW_VIEWPORT             ;$3F93		
  1107 2C0C AC 03 04					ldy V_SCROLL_ROW_IDX
  1108 2C0F B9 74 2A					lda tab_40m,y
  1109 2C12 85 85					sta mapa_ad
  1110 2C14 B9 3C 2B					lda tab_40s,y
  1111 2C17 AC F3 04					ldy level_nr
  1112 2C1A 19 04 2C					ora tab_mapa,y
  1113 2C1D 85 86					sta mapa_ad+1
  1114 							
  1115 2C1F AD F3 04					LDA level_nr
  1116 2C22 29 03					and #3
  1117 2C24 A8						tay
  1118 2C25 B9 A8 29					lda tab_lev_m,y
  1119 2C28 85 83					sta level_m
  1120 2C2A AD F3 04					LDA level_nr
  1121 2C2D 4A 4A					:2 lsr
  1122 2C2F 09 06					ora #6
  1123 2C31 85 84					sta level_s
  1124
  1125 2C33 20 A4 27					jsr print_sprites
  1126 2C36 4C 50 28					jmp draw_ekran
  1127
  1128
  1129 				; Main Screen (MS) "Commando" 7-sprites data
  1130 2C39			_MS_SPRITES_X_LO05
  1131 2C39 1C 4C 7C AC DC 0C + 			.BYTE $1C,$4C,$7C,$AC,$DC,$0C,$3C		;pozycje X liter
  1132 2C40			_MS_SPRITES_X_HI05
  1133 2C40 00 00 00 00 00 FF + 			.BYTE $00,$00,$00,$00,$00,$FF,$FF
  1134 2C47			_MS_SPRITES_PTR05
  1135 2C47 F6 F7 F8 F9 FA FB + 			.BYTE $F6,$F7,$F8,$F9,$FA,$FB,$AC		;ksztalty duszkow
  1136
  1137 							
  1138 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  1139 				        ; Original Y positions for al 16 sprites
  1140 2C4E			ORIG_SPRITE_Y00
  1141 2C4E C2			        .BYTE $C2
  1142 2C4F			ORIG_SPRITE_Y01
  1143 2C4F C2 C2 C2 28		        .BYTE $C2,$C2,$C2,$28
  1144 2C53			ORIG_SPRITE_Y05
  1145 2C53 28 28 28 1E 1E 1E +         .BYTE $28,$28,$28,$1E,$1E,$1E,$1E,$1E
  1146 2C5B 1E 1E 1E		        .BYTE $1E,$1E,$1E			
  1147
  1148
  1149 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  1150 2C5E			APPLY_DELTA_MOV         ;$3D48
  1151 				        ; For the hero (sprite 0)
  1152 				        ; Apply delta X
  1153 2C5E AD 10 D8		        LDA SPRITES_X_LO00
  1154 2C61 18			        CLC
  1155 2C62 6D 60 D8		        ADC SPRITES_DELTA_X00
  1156 2C65 48			        PHA
  1157 2C66 70 0F		        BVS _Lad00
  1158 2C68 4D 10 D8		        EOR SPRITES_X_LO00
  1159 2C6B 29 80		        AND #$80     ;#%10000000
  1160 2C6D F0 08		        BEQ _Lad00
  1161 2C6F AD 00 D8		        LDA SPRITES_X_HI00
  1162 2C72 49 FF		        EOR #$FF     ;#%11111111
  1163 2C74 8D 00 D8		        STA SPRITES_X_HI00
  1164 2C77 68			_Lad00   PLA
  1165 2C78 8D 10 D8		        STA SPRITES_X_LO00
  1166
  1167 				        ; Apply delta Y
  1168 2C7B AD 20 D8		        LDA SPRITES_Y00
  1169 2C7E 18			        CLC
  1170 2C7F 6D 70 D8		        ADC SPRITES_DELTA_Y00
  1171 2C82 8D 20 D8		        STA SPRITES_Y00
  1172 2C85 8D B5 D8		        STA SPRITES_PREV_Y00
  1173
  1174 				        ; For the remaining sprites: 1-15
  1175 2C88 A2 01		        LDX #$01
  1176 2C8A BD 20 D8		_Lad01  LDA SPRITES_Y00,X
  1177 2C8D 9D B5 D8		        STA SPRITES_PREV_Y00,X
  1178 2C90 BD 80 D8		        LDA SPRITES_TYPE00,X
  1179 2C93 F0 2B		        BEQ _Lad03
  1180
  1181 				        ; Apply delta X
  1182 2C95 BD 10 D8		        LDA SPRITES_X_LO00,X
  1183 2C98 18			        CLC
  1184 2C99 7D 60 D8		        ADC SPRITES_DELTA_X00,X
  1185 2C9C 48			        PHA
  1186 2C9D 70 0F		        BVS _Lad02
  1187 2C9F 5D 10 D8		        EOR SPRITES_X_LO00,X
  1188 2CA2 29 80		        AND #$80     ;#%10000000
  1189 2CA4 F0 08		        BEQ _Lad02
  1190 2CA6 BD 00 D8		        LDA SPRITES_X_HI00,X
  1191 2CA9 49 FF		        EOR #$FF     ;#%11111111
  1192 2CAB 9D 00 D8		        STA SPRITES_X_HI00,X
  1193 2CAE 68			_Lad02  PLA
  1194 2CAF 9D 10 D8		        STA SPRITES_X_LO00,X
  1195
  1196 				        ; Apply delta Y
  1197 2CB2 BD 20 D8		        LDA SPRITES_Y00,X
  1198 2CB5 18			        CLC
  1199 2CB6 7D 70 D8		        ADC SPRITES_DELTA_Y00,X
  1200 2CB9 38			        SEC
  1201 2CBA ED 04 04		        SBC V_SCROLL_DELTA
  1202 2CBD 9D 20 D8		        STA SPRITES_Y00,X
  1203 2CC0 E8			_Lad03  INX
  1204 2CC1 E0 10		        CPX #TOTAL_MAX_SPRITES
  1205 2CC3 D0 C5		        BNE _Lad01
  1206 2CC5 60			        RTS
  1207
  1208 				        ; FIXME: Unused, remove me
  1209 				/*
  1210 				        LDA #$00
  1211 				        STA SPRITES_TYPE00,X
  1212 				        STA SPRITES_DELTA_X00,X
  1213 				        STA SPRITES_DELTA_Y00,X
  1214 				        LDA ORIG_SPRITE_Y00,X
  1215 				        STA SPRITES_Y00,X
  1216 				        LDA #$64
  1217 				        STA SPRITES_X_LO00,X
  1218 				        LDA #$FF
  1219 				        STA SPRITES_X_HI00,X
  1220 				        LDA #$FF
  1221 				        STA SPRITES_PTR00,X
  1222 				        JMP _Lad03   */
  1222
  1223
  1224 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  1225 				; Sort sprites by Y.
  1226 				; FIXME: kind of slow algorithm
  1227 2CC6			SORT_SPRITES_BY_Y       ;$3F24
  1228 2CC6 60					rts
  1229 2CC7 A9 0F		        LDA #$0F        ;#%00001111
  1230 2CC9 85 14		        STA a14
  1231 2CCB 85 D7		        STA aD7
  1232 2CCD 46 14		ss0		LSR a14
  1233 2CCF F0 4A		        BEQ ss4
  1234 2CD1 A5 D7		        LDA aD7
  1235 2CD3 38			        SEC
  1236 2CD4 E5 14		        SBC a14
  1237 2CD6 85 C9		        STA a00C9
  1238 2CD8 A9 00		        LDA #$00     ;#%00000000
  1239 2CDA 85 3D		        STA a003D
  1240 2CDC A5 3D		ss1 	LDA a003D
  1241 2CDE 85 3F		        STA a003F
  1242 2CE0 A5 3F		ss2  	LDA a003F
  1243 2CE2 18			        CLC
  1244 2CE3 65 14		        ADC a14
  1245 2CE5 85 41		        STA a41
  1246 2CE7 A6 41		        LDX a41
  1247 2CE9 B4 4B		        LDY SPRITE_IDX_TBL,X
  1248 2CEB B9 20 D8		        LDA SPRITES_Y00,Y
  1249 2CEE A6 3F		        LDX a003F
  1250 2CF0 B4 4B		        LDY SPRITE_IDX_TBL,X
  1251 2CF2 D9 20 D8		        CMP SPRITES_Y00,Y
  1252 2CF5 B0 19		        BCS ss3
  1253 2CF7 A6 3F		        LDX a003F
  1254 2CF9 A4 41		        LDY a41
  1255 2CFB B9 4B 00		        LDA SPRITE_IDX_TBL,Y
  1256 2CFE 48			        PHA
  1257 2CFF B5 4B		        LDA SPRITE_IDX_TBL,X
  1258 2D01 99 4B 00		        STA SPRITE_IDX_TBL,Y
  1259 2D04 68			        PLA
  1260 2D05 95 4B		        STA SPRITE_IDX_TBL,X
  1261 2D07 A5 3F		        LDA a003F
  1262 2D09 38			        SEC
  1263 2D0A E5 14		        SBC a14
  1264 2D0C 85 3F		        STA a003F
  1265 2D0E 10 D0		        BPL ss2
  1266 2D10 E6 3D		ss3		INC a003D
  1267 2D12 A5 C9		        LDA a00C9
  1268 2D14 C5 3D		        CMP a003D
  1269 2D16 90 B5		        BCC ss0
  1270 2D18 4C DC 2C		        JMP ss1
  1271
  1272 2D1B 60			ss4   	RTS
  1273
  1274 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  1275 2D1C			PRINT_CREDITS       ;$10FC
  1276 				        ; $FB/$FC -> Screen RAM pamiÄ™Ä‡ obrazu
  1277 2D1C A9 29		        LDA #<$fa29  ;Screen RAM lo
  1278 2D1E 85 FB		        STA pFB
  1279 2D20 A9 FA		        LDA #>$fa29  ;Screen RAM hi
  1280 2D22 85 FC		        STA pFC
  1281
  1282 				        ; $FD/$FE -> Color RAM;mapa kolorÃ³w
  1283 2D24 A9 29		        LDA #<pD829  ;Color RAM lo
  1284 2D26 85 FD		        STA pFD
  1285 2D28 A9 D8		        LDA #>pD829  ;Color RAM hi
  1286 2D2A 85 FE		        STA pFE
  1287
  1288 2D2C A2 00		        LDX #$00
  1289 2D2E A0 00		@	    LDY #$00
  1290 2D30 BD 55 2D		@	    LDA CREDITS_TXT,X
  1291 2D33 C9 FF		        CMP #$FF     ;End of line?
  1292 2D35 F0 0A		        BEQ @+
  1293 2D37 C9 FE		        CMP #$FE     ;End of message
  1294 2D39 F0 19		        BEQ @+1
  1295 2D3B 91 FB		        STA (pFB),Y
  1296 				        ;LDA #$01     ;Color
  1297 				        ;STA (pFD),Y
  1298 2D3D E8			        INX
  1299 2D3E C8			        INY
  1300 2D3F D0 EF				bne @-
  1301
  1302 2D41 E8			@  	 	INX
  1303 2D42 A5 FB		        LDA pFB
  1304 2D44 18			        CLC
  1305 2D45 69 50		        ADC #$50     ;#%01010000
  1306 2D47 85 FB		        STA pFB
  1307 2D49 85 FD		        STA pFD
  1308 2D4B 90 E1		        BCC @-2
  1309 2D4D E6 FC		        INC pFC
  1310 2D4F E6 FE		        INC pFE
  1311 2D51 4C 2E 2D			    JMP @-2
  1312 2D54 60			@	    RTS
  1313
  1314 2D55			CREDITS_TXT         ;napisy na stronie tytyÅ‚owej
  1315 2D55 20 20 20 20 20 20 +         .BYTE $20,$20,$20,$20,$20,$20,$20,$20
  1316 2D5D 20 20 20 5F 66 63 +         .BYTE $20,$20,$20,$5F,$66,$63,$6E,$5F
  1317 2D65 20 6A 6C 5F 6D 5F +         .BYTE $20,$6A,$6C,$5F,$6D,$5F,$68,$6E
  1318 2D6D 6D FF FF FF FF 20 +         .BYTE $6D,$FF,$FF,$FF,$FF,$20,$20,$20
  1319 2D75 20 20 6A 6C 69 61 +         .BYTE $20,$20,$6A,$6C,$69,$61,$6C,$5B
  1320 2D7D 67 67 63 68 61 20 +         .BYTE $67,$67,$63,$68,$61,$20,$20,$20
  1321 2D85 5D 62 6C 63 6D 20 +         .BYTE $5D,$62,$6C,$63,$6D,$20,$5C,$6F
  1322 2D8D 6E 66 5F 6C FF 20 +         .BYTE $6E,$66,$5F,$6C,$FF,$20,$20,$20
  1323 2D95 20 20 20 20 20 61 +         .BYTE $20,$20,$20,$20,$20,$61,$6C,$5B
  1324 2D9D 6A 62 63 5D 6D 20 +         .BYTE $6A,$62,$63,$5D,$6D,$20,$20,$20
  1325 2DA5 6C 69 6C 73 20 61 +         .BYTE $6C,$69,$6C,$73,$20,$61,$6C,$5F
  1326 2DAD 5F 68 FF 20 20 20 +         .BYTE $5F,$68,$FF,$20,$20,$20,$20,$20
  1327 2DB5 20 20 20 20 20 20 +         .BYTE $20,$20,$20,$20,$20,$20,$20,$20
  1328 2DBD 20 20 20 20 20 20 +         .BYTE $20,$20,$20,$20,$20,$20,$5D,$62
  1329 2DC5 6C 63 6D 20 62 5B +         .BYTE $6C,$63,$6D,$20,$62,$5B,$6C,$70
  1330 2DCD 5F 73 FF 20 20 20 +         .BYTE $5F,$73,$FF,$20,$20,$20,$20,$20
  1331 2DD5 20 20 20 20 20 20 +         .BYTE $20,$20,$20,$20,$20,$20,$6D,$69
  1332 2DDD 6F 68 5E 20 20 20 +         .BYTE $6F,$68,$5E,$20,$20,$20,$6C,$69
  1333 2DE5 5C 20 62 6F 5C 5C +         .BYTE $5C,$20,$62,$6F,$5C,$5C,$5B,$6C
  1334 2DED 5E FF 20 20 20 20 +         .BYTE $5E,$FF,$20,$20,$20,$20,$20,$64
  1335 2DF5 5B 6A 5B 68 20 5D +         .BYTE $5B,$6A,$5B,$68,$20,$5D,$5B,$6A
  1336 2DFD 6D 6F 66 5F 20 5D +         .BYTE $6D,$6F,$66,$5F,$20,$5D,$69,$67
  1337 2E05 6A 6F 6E 5F 6C 6D +         .BYTE $6A,$6F,$6E,$5F,$6C,$6D,$20,$6F
  1338 2E0D 65 20 66 6E 5E FF +         .BYTE $65,$20,$66,$6E,$5E,$FF,$FF,$20
  1339 2E15 20 20 20 20 20 20 +         .BYTE $20,$20,$20,$20,$20,$20,$20,$20
  1340 2E1D 5D 69 6A 73 6C 63 +         .BYTE $5D,$69,$6A,$73,$6C,$63,$61,$62
  1341 2E25 6E 20 5D 5B 6A 5D +         .BYTE $6E,$20,$5D,$5B,$6A,$5D,$69,$67
  1342 2E2D 20 22 2A 29 26 FF +         .BYTE $20,$22,$2A,$29,$26,$FF,$20,$20
  1343 2E35 20 20 20 20 20 20 +         .BYTE $20,$20,$20,$20,$20,$20,$20,$20
  1344 2E3D 6A 6C 5F 6D 6D 20 +         .BYTE $6A,$6C,$5F,$6D,$6D,$20,$60,$63
  1345 2E45 6C 5F 20 6E 69 20 +         .BYTE $6C,$5F,$20,$6E,$69,$20,$6D,$6E
  1346 2E4D 5B 6C 6E FF FE	        .BYTE $5B,$6C,$6E,$FF,$FE
  1347
  1348
  1349 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  1350 				; Waits until raster reaches $d5 vertical position
  1351 				; triggered by IRQ_A
  1352
  1353 2E52			wait_vbl1
  1354 2E52 A5 70				lda zegar
  1355 2E54 C5 70				cmp zegar
  1356 2E56 F0 FC				beq *-2
  1357 2E58 60					rts   
  1358
  1359 2E59			wait_vbl
  1360 2E59			WAIT_RASTER_AT_BOTTOM   ;$402A
  1361 2E59 8A					txa
  1362 2E5A 48					pha
  1363 2E5B 98					tya
  1364 2E5C 48					pha
  1365 						;jsr rmt_p2
  1366
  1367 						//lda zegar
  1368 						//cmp zegar
  1369 						//beq *-2
  1370 						
  1371 2E5D AD 0B D4		@		lda vcount
  1372 2E60 C9 14				cmp #20
  1373 2E62 D0 F9				bne @-
  1374 2E64 AD 0B D4		@		lda vcount
  1375 2E67 C9 15				cmp #21
  1376 2E69 D0 F9				bne @-		
  1377 						
  1378 						
  1379 						;jsr setpokey
  1380 						
  1381 2E6B A5 81 85 82				mva trig0s trig0s1
  1382 2E6F AD 10 D0 85 81			mva trig0 trig0s
  1383 2E74 05 82				ora trig0s1
  1384 2E76 F0 07				beq wra0
  1385 2E78 A9 00 85 80				mva #0 licznik_trig
  1386 2E7C 4C 85 2E				jmp @+
  1387 2E7F			wra0		
  1388 2E7F A5 80				lda licznik_trig
  1389 2E81 30 02				bmi @+
  1390 2E83 E6 80				inc licznik_trig
  1391 = 2E85			@		equ *		
  1392 						
  1393 						
  1394 						
  1395 2E85 68					pla
  1396 2E86 A8					tay
  1397 2E87 68					pla
  1398 2E88 AA					tax
  1399 						
  1400 2E89 60					rts
  1401
  1402 				/*        LDA RASTER_TICK
  1403 				_L00    CMP RASTER_TICK
  1404 				        BEQ _L00
  1405 				        RTS   */
  1405
  1406
  1407 						
  1408 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  1409 				; $D018 points to right charset for level
  1410 				; And sets a bunch of variables needed for the level
  1411 2E8A			INIT_LEVEL_DATA                 ;$1445
  1412 						;lda LEVEL_NR
  1413 						;ora #$c8
  1414 						;STA ZESTAW_ZNAKOW
  1415 						;ldy	#$5d	; MEMB		
  1416 						;sta (fx_ptr),y		;$28000
  1417
  1418 						
  1419 2E8A AD F3 04				lda level_nr
  1420 				        ;LDA LEVEL_NR
  1421 2E8D 29 07		        AND #$07     ;#%00000011
  1422 2E8F A8			        TAY
  1423 2E90 B9 DD 2E		        LDA f3ECE,Y				;starszy bajt adresu mapy		
  1424 2E93 8D 05 04		        STA LVL_MAP_MSB
  1425 2E96 98					tya
  1426 				        ;LDA LEVEL_NR
  1427 				        ;AND #$03     ;#%00000011
  1428 2E97 0A			        ASL 
  1429 2E98 A8			        TAY
  1430 2E99 A9 21 85 24 A9 30 + 		mwa #LVL_TRIGGER_ROW_TBL p24
  1431 				        //LDA f14AB,Y
  1432 				        //STA p24     ;Rows that trigger the creation of sprites
  1433 				        //LDA f14AC,Y
  1434 				        //STA p25
  1435
  1436 2EA1 A9 21 85 22 A9 31 + 		mwa #LVL_SPRITE_X_LO_TBL p22
  1437 				        //LDA f14A3,Y
  1438 				        //STA p22     ;X LSB of newly created sprite
  1439 				        //LDA f14A4,Y
  1440 				        //STA p23
  1441
  1442 2EA9 A9 21 85 26 A9 32 + 		mwa #LVL_SPRITE_X_HI_TBL p26
  1443 				        //LDA f14B3,Y
  1444 				        //STA p26    ; X MSB of newly created sprite
  1445 				        //LDA f14B4,Y
  1446 				        //STA p27
  1447
  1448 2EB1 A9 21 85 28 A9 33 + 		mwa #LVL_ACTION_TBL p28
  1449 				        //LDA f14BB,Y
  1450 				        //STA p28     ;Sprite type to create
  1451 				        //LDA f14BC,Y
  1452 				        //STA p29
  1453
  1454 2EB9 A9 21 85 2A A9 2F + 		mwa #LVL_CHARSET_MASK_TBL p2A
  1455 				        //LDA f14C3,Y
  1456 				        //STA p2A
  1457 				        //LDA f14C4,Y
  1458 				        //STA p2B
  1459
  1460
  1461 				        ; Charsets:
  1462 				        ; lvl0 = $c000
  1463 				        ; lvl1 = $c800
  1464 				        ; main screen / lvl2: $d000
  1465 				        ; lvl3 = $d800
  1466 2EC1 84 FB		        STY pFB
  1467 				        //LDA $D018    ;VIC Memory Control Register
  1468 2EC3 29 F0		        AND #$F0     ;#%11110000
  1469 2EC5 05 FB		        ORA pFB  ;Set charset address
  1470 				       // STA $D018    ;VIC Memory Control Register
  1471
  1472 2EC7 60			        RTS
  1473
  1474 2EC8			level_color_tab 
  1475 2EC8 00 03 00 00 00 03 + 		.he 00,03,00,00,00,03,00,00
  1476 						
  1477 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  1478 				; Updates the Color RAM for current level
  1479 2ED0			SET_LEVEL_COLOR_RAM             ;$4033
  1480 2ED0 AD F3 04		        LDA LEVEL_NR
  1481 2ED3 29 07		        AND #$07     ;#%00000011
  1482 2ED5 A8			        tay
  1483 2ED6 BE C8 2E				ldx level_color_tab,y
  1484 2ED9 20 4C 27				jsr set_color
  1485 						
  1486 						;mva #0 colbak
  1487 						;sta colpf0
  1488 						
  1489 2EDC 60					rts
  1490 				/*
  1491 				        ; Data for lvl0-3, although lvl2 was not included in the game
  1492 				f14A4   =*+1
  1493 				f14A3   dta a(LVL0_SPRITE_X_LO_TBL)
  1494 				        dta a(LVL1_SPRITE_X_LO_TBL)
  1495 				        dta a(LVL2_SPRITE_X_LO_TBL)
  1496 				        dta a(LVL3_SPRITE_X_LO_TBL)
  1497 				f14AC   =*+1
  1498 				f14AB   dta a(LVL0_TRIGGER_ROW_TBL)
  1499 				        dta a(LVL1_TRIGGER_ROW_TBL)
  1500 				        dta a(LVL2_TRIGGER_ROW_TBL)
  1501 				        dta a(LVL3_TRIGGER_ROW_TBL)
  1502 				f14B4   =*+1
  1503 				f14B3   dta a(LVL0_SPRITE_X_HI_TBL)
  1504 				        dta a(LVL1_SPRITE_X_HI_TBL)
  1505 				        dta a(LVL2_SPRITE_X_HI_TBL)
  1506 				        dta a(LVL3_SPRITE_X_HI_TBL)
  1507 				f14BC   =*+1
  1508 				f14BB   dta a(LVL0_ACTION_TBL)
  1509 				        dta a(LVL1_ACTION_TBL)
  1510 				        dta a(LVL2_ACTION_TBL)
  1511 				        dta a(LVL3_ACTION_TBL)
  1512 				f14C4   =*+1
  1513 				f14C3   dta a(LVL0_CHARSET_MASK_TBL)
  1514 				        dta a(LVL1_CHARSET_MASK_TBL)
  1515 				        dta a(LVL2_CHARSET_MASK_TBL)
  1516 				        dta a(LVL3_CHARSET_MASK_TBL)  */
  1516
  1517 						
  1518 				       ;LVL MAP MSB address. E.g: $6000,$8000,$8000,$A000
  1519 2EDD			level_tab	   
  1520 2EDD 60 80 80 A0		f3ECE   .BYTE $60,$80,$80,$A0				;adresy 
  1521
  1522 				        ;Mask regarding how frequent sholdiers shoot.
  1523 2EE1 3F 1F 0F 0F		f3ED2   .BYTE $3F,$1F,$0F,$0F       ;Mask for level 0-3
  1524 2EE5 0F 0F 0F 0F		        .BYTE $0F,$0F,$0F,$0F       ;Mask for level 0-3, 2nd loop
  1525
  1526 				        ; Restart row index for each level.
  1527 2EE9 13 3D 61 83 AF	f3EDA   .BYTE $13,$3D,$61,$83,$AF   ;LVL0
  1528 2EEE 13 3D 61 83 A6	f3EDF   .BYTE $13,$3D,$61,$83,$A6   ;LVL1
  1529 2EF3 13 3D 61 83 B4	rest2   .BYTE $13,$3D,$61,$83,$B4   ;LVL2
  1530 2EF8 13 3D 61 83 A6	f3EE9   .BYTE $13,$3D,$61,$83,$A6   ;LVL3
  1531 2EFD 13 3D 61 9C B4	rest4	.BYTE $13,$3D,$61,$9C,$B4
  1532 2F02 1D 32 61 83 B4	rest5	.BYTE $1D,$32,$61,$83,$B4
  1533 2F07 13 3D 61 83 B4	rest6	.BYTE $13,$3D,$61,$83,$B4
  1534 2F0C 13 32 61 83 B4	rest7	.BYTE $13,$32,$61,$83,$B4
  1535
  1536 = 2F12			f3EEF    =*+1
  1537 2F11 E9 2E		f3EEE   dta a(f3EDA)         ;LVL0
  1538 2F13 EE 2E		        dta a(f3EDF)         ;LVL1
  1539 2F15 F3 2E		        dta a(rest2)         ;LVL2
  1540 2F17 F8 2E		        dta a(f3EE9)         ;LVL3		
  1541 2F19 FD 2E				dta a(rest4)
  1542 2F1B 02 2F				dta a(rest5)
  1543 2F1D 07 2F				dta a(rest6)
  1544 2F1F 0C 2F				dta a(rest7)
  1545
  1546
  1547 = 2F21			dane_mapy=LVL_CHARSET_MASK_TBL
  1548 2F21			LVL_CHARSET_MASK_TBL	org *+$100
  1549 3021			LVL_TRIGGER_ROW_TBL		org *+$100
  1550 3121			LVL_SPRITE_X_LO_TBL		org *+$100
  1551 3221			LVL_SPRITE_X_HI_TBL		org *+$100
  1552 3321			LVL_ACTION_TBL			org *+$100
  1553
  1554 				/*
  1555 				       ; LVL0 data
  1556 				LVL0_TRIGGER_ROW_TBL    ;$1C3E
  1557 				        .BYTE $9E,$9B,$98,$90,$8E,$84,$81,$7E
  1558 				        .BYTE $7B,$7B,$7B,$66,$64,$5B,$5B,$57
  1559 				        .BYTE $56,$54,$53,$50,$4D,$4A,$46,$3E
  1560 				        .BYTE $3E,$3E,$37,$34,$2E,$2E,$29,$26
  1561 				        .BYTE $1E,$19,$19,$14,$11,$01,$00,$00
  1562 				        .BYTE $FF
  1563 				LVL0_SPRITE_X_LO_TBL
  1564 				        .BYTE $00,$00,$00,$14,$F0,$00,$00,$00
  1565 				        .BYTE $E6,$D2,$BE,$32,$1E,$00,$00,$50
  1566 				        .BYTE $00,$50,$AE,$1E,$50,$76,$BE,$2B
  1567 				        .BYTE $A5,$1D,$46,$28,$14,$2E,$2E,$28
  1568 				        .BYTE $A4,$1E,$3C,$1E,$14,$00,$00,$00
  1569 				LVL0_SPRITE_X_HI_TBL    ;$1C8F
  1570 				        .BYTE $00,$00,$00,$FF,$00,$00,$00,$00
  1571 				        .BYTE $00,$00,$00,$FF,$FF,$00,$00,$58
  1572 				        .BYTE $00,$58,$00,$00,$58,$00,$00,$00
  1573 				        .BYTE $00,$FF,$00,$00,$FF,$FF,$00,$00
  1574 				        .BYTE $00,$00,$00,$FF,$FF,$00,$00,$00
  1575 				LVL0_ACTION_TBL         ;$1CB7
  1576 				        .BYTE $01,$01,$01,$00,$07,$02,$02,$02
  1577 				        .BYTE $05,$06,$05,$03,$07,$04,$0C,$08
  1578 				        .BYTE $0C,$09,$00,$00,$08,$00,$00,$00
  1579 				        .BYTE $00,$00,$00,$07,$00,$00,$00,$07
  1580 				        .BYTE $00,$00,$00,$00,$07,$0B,$0D,$1B
  1581
  1582 				        ; LVL1 data
  1583 				LVL1_TRIGGER_ROW_TBL    ;$1CDF
  1584 				        .BYTE $A5,$A2,$9f,$9B,$9B,$96,$95,$95
  1585 				        .BYTE $93,$8C,$8C,$8A,$88,$83,$7B,$7B
  1586 				        .BYTE $7B,$74,$70,$68,$61,$5E,$52,$51
  1587 				        .BYTE $46,$3D,$3D,$3A,$29,$1B,$01,$00
  1588 				        .BYTE $FF
  1589 				LVL1_SPRITE_X_LO_TBL    ;$1D00
  1590 				        .BYTE $00,$32,$30,$DC,$0A,$00,$3C,$5A
  1591 				        .BYTE $F0,$96,$B4,$28,$32,$32,$D2,$F0
  1592 				        .BYTE $14,$32,$C8,$00,$50,$50,$00,$00
  1593 				        .BYTE $C8,$6E,$00,$00,$00,$00,$00,$00
  1594 				LVL1_SPRITE_X_HI_TBL    ;$1D20
  1595 				        .BYTE $00,$00,$00,$00,$FF,$00,$00,$00
  1596 				        .BYTE $00,$00,$00,$FF,$FF,$00,$00,$00
  1597 				        .BYTE $FF,$00,$00,$00,$63,$63,$00,$00
  1598 				        .BYTE $00,$3F,$00,$00,$00,$00,$00,$00
  1599 				LVL1_ACTION_TBL         ;$1D40
  1600 				        .BYTE $15,$07,$0E,$16,$0E,$13,$0E,$0E
  1601 				        .BYTE $0E,$0E,$0E,$07,$0E,$0E,$0E,$0E
  1602 				        .BYTE $0E,$0E,$07,$0C,$08,$09,$12,$11
  1603 				        .BYTE $0E,$09,$0F,$0C,$10,$0F,$0B,$1B
  1604
  1605 				        ; LVL2 data
  1606 				        ; FIXME: all LVL2 data can be removed since it is not used.
  1607 				LVL2_TRIGGER_ROW_TBL
  1608 				  .BYTE $C6,$C4,$B5,$B4,$A7,$9D,$97,$95
  1609 				        .BYTE $87,$81,$68,$68,$5E,$5E,$50,$4B
  1610 				        .BYTE $3C,$36,$32,$28,$09,$09,$01,$00
  1611 				        .BYTE $00,$FF 
  1612
  1613 				LVL2_SPRITE_X_LO_TBL
  1614 						.BYTE $F5,$3F,$21,$E9,$90,$38,$1E,$AA
  1615 				        .BYTE $E2,$5F,$00,$00,$50,$50,$00,$00
  1616 				        .BYTE $00,$00,$00,$00,$0E,$4A,$00,$00
  1617 				        .BYTE $00 
  1618 				LVL2_SPRITE_X_HI_TBL
  1619 						.BYTE $00,$00,$00,$00,$00,$00,$FF,$00
  1620 				        .BYTE $00,$00,$00,$00,$63,$63,$00,$00
  1621 				        .BYTE $00,$00,$00,$00,$FF,$00,$00,$00
  1622 				        .BYTE $00 
  1623 				LVL2_ACTION_TBL
  1624 						.BYTE $18,$18,$17,$17,$18,$18,$07,$17
  1625 				        .BYTE $18,$18,$04,$0C,$08,$09,$14,$14
  1626 				        .BYTE $16,$13,$16,$16,$03,$1A,$0B,$0D
  1627 				        .BYTE $1B 
  1628
  1629 				        ; LVL3 data
  1630 				LVL3_TRIGGER_ROW_TBL    ;$1DC5
  1631 				        .BYTE $B4,$B3,$A4,$A3,$92,$8B,$8B,$83
  1632 				        .BYTE $77,$74,$73,$61,$60,$5D,$58,$53
  1633 				        .BYTE $50,$4E,$4C,$43,$3E,$3B,$3A,$26
  1634 				        .BYTE $24,$1E,$1C,$18,$16,$0A,$0A,$02
  1635 				        .BYTE $02,$00,$FF
  1636 				LVL3_SPRITE_X_LO_TBL    ;$1DE8
  1637 				        .BYTE $00,$00,$00,$00,$00,$28,$41,$50
  1638 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  1639 				        .BYTE $00,$00,$1E,$32,$00,$00,$00,$00
  1640 				        .BYTE $00,$00,$1E,$00,$00,$47,$1E,$78
  1641 				        .BYTE $E6,$00
  1642 				LVL3_SPRITE_X_HI_TBL    ;$1E0A
  1643 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  1644 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  1645 				        .BYTE $00,$00,$FF,$FF,$00,$00,$00,$00
  1646 				        .BYTE $00,$00,$FF,$00,$00,$00,$FF,$00
  1647 				        .BYTE $00,$00
  1648 				LVL3_ACTION_TBL         ;$1E2C
  1649 				        .BYTE $12,$11,$12,$12,$11,$00,$00,$07
  1650 				        .BYTE $13,$11,$12,$13,$12,$14,$14,$11
  1651 				        .BYTE $12,$12,$07,$19,$11,$12,$11,$12
  1652 				        .BYTE $12,$12,$07,$11,$11,$00,$00,$00
  1653 				        .BYTE $00,$1B	
  1654
  1655
  1656 				       ; CHARSET_MASK_TBL
  1657 				        ; Bit 0 = ??
  1658 				        ; Bit 1 = Used for sprite-char background priority.
  1659 				        ; Bit 2 = ??
  1660 				        ; LVL0 data. Used by ($2A)
  1661 				LVL0_CHARSET_MASK_TBL    ;$17A9
  1662 				        .BYTE $00,$02,$02,$02,$02,$02,$02,$02
  1663 				        .BYTE $02,$02,$02,$02,$02,$02,$02,$02
  1664 				        .BYTE $02,$02,$00,$00,$00,$02,$02,$00
  1665 				        .BYTE $00,$00,$01,$01,$00,$00,$00,$00
  1666 				        .BYTE $01,$00,$01,$01,$02,$00,$01,$01
  1667 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1668 				        .BYTE $00,$01,$00,$00,$00,$00,$00,$01
  1669 				        .BYTE $01,$02,$03,$01,$00,$03,$01,$01
  1670 				        .BYTE $03,$01,$03,$02,$01,$01,$01,$01
  1671 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$02
  1672 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1673 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1674 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1675 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1676 				        .BYTE $02,$01,$01,$01,$01,$01,$01,$01
  1677 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1678 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1679 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1680 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1681 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1682 				        .BYTE $01,$01,$01,$02,$02,$02,$02,$02
  1683 				        .BYTE $02,$02,$02,$02,$02,$02,$02,$02
  1684 				        .BYTE $02,$02,$00,$00,$02,$01,$01,$01
  1685 				        .BYTE $00,$02,$02,$03,$00,$01,$01,$00
  1686 				        .BYTE $00,$00,$00,$00,$02,$01,$00,$02
  1687 				        .BYTE $02,$02,$02,$02,$02,$02,$01,$01
  1688 				        .BYTE $00,$01,$01,$01,$01,$01,$01,$00
  1689 				        .BYTE $02,$02,$01,$01,$01,$00,$01,$01
  1690 				        .BYTE $01,$01,$02,$02,$02,$03,$01,$01
  1691 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1692 				        .BYTE $02,$01,$01,$01,$01,$03,$02,$01
  1693 				        .BYTE $03,$02,$01,$03,$00,$01,$01,$00
  1694
  1695 				        ; LVL1 data. Used by ($2A)
  1696 				LVL1_CHARSET_MASK_TBL   ;$18A9
  1697 				        .BYTE $00,$04,$04,$04,$04,$04,$04,$04
  1698 				        .BYTE $04,$04,$04,$04,$04,$04,$04,$04
  1699 				        .BYTE $02,$02,$02,$02,$02,$02,$00,$00
  1700 				        .BYTE $00,$04,$00,$00,$00,$00,$00,$00
  1701 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  1702 				        .BYTE $00,$00,$00,$04,$04,$04,$00,$04
  1703 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  1704 				        .BYTE $00,$02,$01,$01,$01,$01,$01,$01
  1705 				        .BYTE $01,$01,$01,$01,$01,$00,$00,$00
  1706 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  1707 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  1708 				        .BYTE $00,$00,$01,$00,$00,$00,$00,$00
  1709 				        .BYTE $00,$00,$00,$00,$01,$01,$01,$01
  1710 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1711 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1712 				        .BYTE $01,$01,$01,$00,$01,$01,$01,$01
  1713 				        .BYTE $01,$01,$01,$00,$00,$00,$01,$01
  1714 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1715 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1716 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1717 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1718 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1719 				        .BYTE $01,$01,$01,$01,$01,$01,$00,$01
  1720 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1721 				        .BYTE $01,$01,$00,$00,$00,$00,$01,$01
  1722 				        .BYTE $01,$01,$01,$00,$01,$01,$01,$01
  1723 				        .BYTE $00,$01,$01,$01,$01,$01,$01,$00
  1724 				        .BYTE $02,$02,$01,$01,$01,$00,$00,$00
  1725 				        .BYTE $00,$00,$00,$00,$00,$00,$01,$01
  1726 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$01
  1727 				        .BYTE $02,$00,$01,$01,$01,$03,$02,$01
  1728 				        .BYTE $03,$02,$01,$03,$00,$01,$01,$00
  1729
  1730 				        ; LVL2 data (not used). FIXME: remove
  1731 				LVL2_CHARSET_MASK_TBL
  1732 				        .BYTE $00,$04,$04,$04,$04,$04,$04,$04
  1733 				        .BYTE $04,$04,$04,$04,$04,$04,$04,$04
  1734 				        .BYTE $02,$02,$01,$01,$01,$01,$00,$00
  1735 				        .BYTE $00,$00,$01,$01,$01,$01,$00,$00
  1736 				        .BYTE $01,$00,$00,$00,$00,$00,$00,$00
  1737 				        .BYTE $00,$00,$00,$01,$01,$01,$00,$01
  1738 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  1739 				        .BYTE $00,$02,$01,$01,$00,$01,$01,$00
  1740 				        .BYTE $01,$01,$01,$01,$01,$00,$00,$00
  1741 				        .BYTE $00,$00,$01,$01,$01,$01,$01,$02
  1742 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1743 				        .BYTE $01,$01,$01,$00,$00,$00,$00,$00
  1744 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  1745 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  1746 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  1747 				        .BYTE $00,$01,$01,$01,$01,$01,$01,$01
  1748 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1749 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1750 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1751 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1752 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1753 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1754 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1755 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1756 				        .BYTE $01,$01,$00,$00,$01,$01,$01,$01
  1757 				        .BYTE $01,$01,$01,$01,$02,$01,$01,$01
  1758 				        .BYTE $00,$01,$01,$01,$01,$01,$01,$00
  1759 				        .BYTE $01,$01,$00,$01,$01,$01,$01,$01
  1760 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1761 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1762 				        .BYTE $02,$01,$01,$01,$01,$03,$02,$01
  1763 				        .BYTE $03,$02,$01,$03,$00,$01,$01,$00  
  1764
  1765 				        ; LVL3 data. Used by $2A
  1766 				LVL3_CHARSET_MASK_TBL   ;$1AA9
  1767 				        .BYTE $00,$02,$02,$02,$02,$02,$02,$02
  1768 				        .BYTE $02,$02,$00,$02,$02,$02,$02,$00
  1769 				        .BYTE $00,$02,$00,$00,$00,$02,$02,$02
  1770 				        .BYTE $00,$00,$01,$01,$02,$04,$00,$00
  1771 				        .BYTE $01,$00,$00,$00,$00,$00,$00,$00
  1772 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  1773 				        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  1774 				        .BYTE $00,$04,$04,$04,$04,$04,$04,$04
  1775 				        .BYTE $04,$04,$04,$04,$04,$01,$01,$01
  1776 				        .BYTE $01,$01,$04,$04,$04,$04,$04,$00
  1777 				        .BYTE $04,$04,$04,$04,$04,$04,$01,$01
  1778 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1779 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1780 				        .BYTE $00,$00,$04,$04,$04,$04,$01,$01
  1781 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1782 				        .BYTE $01,$00,$01,$01,$01,$01,$00,$01
  1783 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1784 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1785 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1786 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1787 				        .BYTE $01,$01,$01,$02,$02,$02,$02,$02
  1788 				        .BYTE $02,$02,$02,$02,$02,$02,$02,$02
  1789 				        .BYTE $02,$04,$04,$04,$02,$01,$01,$01
  1790 				        .BYTE $01,$02,$02,$00,$01,$01,$02,$02
  1791 				        .BYTE $01,$02,$00,$00,$01,$01,$01,$01
  1792 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1793 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1794 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1795 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1796 				        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  1797 				        .BYTE $00,$01,$01,$01,$01,$01,$01,$01
  1798 				        .BYTE $01,$01,$01,$01,$00,$01,$02,$00  */
  1798
  1799 						
  1800 						
  1801 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  1802 				; Setup up lvl: hero position, patches door to closed, patches turrets to restored,
  1803 				; min grenades is 5, and more
  1804 3421			SETUP_LEVEL             ;$3DFE
  1805 3421-3D65> 20 C1 20			jsr copy_mapa
  1806 3424 20 78 20				jsr copy_data
  1807
  1808
  1809 3427 20 A8 35		        JSR CLEANUP_SPRITES
  1810 342A A9 97		        LDA #$97     ;#%10010111
  1811 342C 8D 10 D8		        STA SPRITES_X_LO00
  1812 342F A9 B4		        LDA #$B4     ;#%10110100
  1813 3431 8D 20 D8		        STA SPRITES_Y00
  1814 3434 A9 98		        LDA #$98     ;#%10011000
  1815 3436 8D 50 D8		        STA SPRITES_PTR00
  1816 3439 A9 06		        LDA #$06     ;blue
  1817 343B 8D 40 D8		        STA SPRITES_COLOR00
  1818 343E A9 00		        LDA #$00     ;#%00000000
  1819 3440 8D 00 D8		        STA SPRITES_X_HI00
  1820 3443 8D 60 D8		        STA SPRITES_DELTA_X00
  1821 3446 8D 70 D8		        STA SPRITES_DELTA_Y00
  1822 3449 8D E1 04		        STA a04E1
  1823 344C 8D E0 04		        STA HERO_ANIM_MOV_IDX
  1824 344F 8D 30 D8		        STA SPRITES_BKG_PRI00
  1825 3452 8D 03 05		        STA IS_HERO_DEAD
  1826 3455 AD F3 04		        LDA LEVEL_NR
  1827 3458 29 07		        AND #$07    ;#%00000011
  1828 345A 0A			        ASL 
  1829 345B AA			        TAX
  1830
  1831 				        ; $FB/$FC -> points to tbl related to levels
  1832 345C BD 11 2F		        LDA f3EEE,X
  1833 345F 85 FB		        STA pFB
  1834 3461 BD 12 2F		        LDA f3EEF,X
  1835 3464 85 FC		        STA pFC
  1836
  1837 3466 A0 00		        LDY #$00
  1838 3468 B1 FB		@	    LDA (pFB),Y
  1839 346A CD 03 04		        CMP V_SCROLL_ROW_IDX
  1840 346D B0 04		        BCS @+
  1841 346F C8			        INY
  1842 3470 4C 68 34		        JMP @-
  1843
  1844 3473 8D 03 04		@    	STA V_SCROLL_ROW_IDX
  1845 3476 A9 00		        LDA #$00
  1846 3478 8D 02 04		        STA V_SCROLL_BIT_IDX
  1847 347B 8D EE 04		        STA a04EE
  1848 347E A9 14		        LDA #$14     ;Number of enemies that leaves the final fort/warehouse
  1849 3480 8D EF 04		        STA ENEMIES_IN_FORT
  1850 3483 20 8A 2E		        JSR INIT_LEVEL_DATA
  1851 3486 A9 00		        LDA #$00     ;Closed door
  1852 3488 20 9C 9F		        JSR LEVEL_PATCH_DOOR		;zamyka drzwi?
  1853 348B A9 00		        LDA #$00
  1854 348D 8D F7 04		        STA IS_ANIM_EXIT_DOOR
  1855 3490 8D FD 04		        STA a04FD
  1856
  1857
  1858 3493 AD F3 04				lda level_nr
  1859 3496 C9 01				cmp #1
  1860 3498 F0 56				beq turr1
  1861 349A C9 05				cmp #5
  1862 349C F0 03 4C 29 35			jne pomin_turr		;tylko dla pierwszego poziomu
  1863 					
  1864 34A1 A9 E0				LDA #<$5ae0			;level5 , cztery dzialka
  1865 34A3 85 FB		        STA pFB
  1866 34A5 85 73				sta pom
  1867 34A7 A9 5A		        LDA #>$5ae0
  1868 34A9 85 FC		        STA pFC
  1869 34AB 09 20				ora #$20
  1870 34AD 85 74				sta pom+1
  1871 34AF A9 00				lda #$00
  1872 34B1 20 87 A7				JSR LEVEL_PATCH_TURRET	
  1873 34B4 A9 60				LDA #<$5860
  1874 34B6 85 FB		        STA pFB
  1875 34B8 85 73				sta pom
  1876 34BA A9 58		        LDA #>$5860
  1877 34BC 85 FC		        STA pFC
  1878 34BE 09 20				ora #$20
  1879 34C0 85 74				sta pom+1
  1880 34C2 A9 00				lda #$00
  1881 34C4 20 87 A7				JSR LEVEL_PATCH_TURRET
  1882 						
  1883 34C7 A9 9A				lDA #<$599a
  1884 34C9 85 FB		        STA pFB
  1885 34CB 85 73				sta pom
  1886 34CD A9 59		        LDA #>$599a
  1887 34CF 85 FC		        STA pFC
  1888 34D1 09 20				ora #$20
  1889 34D3 85 74				sta pom+1
  1890 34D5 A9 02				lda #$02
  1891 34D7 20 87 A7		        jSR LEVEL_PATCH_TURRET
  1892 34DA A9 1A				lDA #<$571a
  1893 34DC 85 FB		        STA pFB
  1894 34DE 85 73				sta pom
  1895 34E0 A9 57		        LDA #>$571a
  1896 34E2 85 FC		        STA pFC
  1897 34E4 09 20				ora #$20
  1898 34E6 85 74				sta pom+1
  1899 34E8 A9 02				lda #$02
  1900 34EA 20 87 A7		        jSR LEVEL_PATCH_TURRET
  1901 						
  1902 34ED 4C 29 35				jmp pomin_turr
  1903
  1904 34F0			turr1		
  1905 				        ;Draw Left turret at row 56 ($88c0) in lvl1
  1906 34F0 A9 C0		        LDA #<$48C0
  1907 34F2 85 FB		        STA pFB
  1908 34F4 85 73				sta pom
  1909 34F6 A9 48		        LDA #>$48C0
  1910 34F8 85 FC		        STA pFC
  1911 34FA 09 20				ora #$20
  1912 34FC 85 74				sta pom+1
  1913 34FE A9 00				lda #$00
  1914 3500 20 87 A7				JSR LEVEL_PATCH_TURRET
  1915
  1916 				        ;Draw right turret at row  35 ($859a) in lvl1
  1917 3503 A9 9A		        LDA #<$459A
  1918 3505 85 FB		        STA pFB
  1919 3507 85 73				sta pom
  1920 3509 A9 45		        LDA #>$459A
  1921 350B 85 FC		        STA pFC
  1922 350D 09 20				ora #$20
  1923 350F 85 74				sta pom+1
  1924 3511 A9 02				lda #$02
  1925 3513 20 87 A7		        jSR LEVEL_PATCH_TURRET
  1926
  1927 				        ;Draw Left turret at row 22 ($859a) in lvl1
  1928 3516 A9 70		        LDA #<$4370
  1929 3518 85 FB		        STA pFB
  1930 351A 85 73				sta pom
  1931 351C A9 43		        LDA #>$4370
  1932 351E 85 FC		        STA pFC
  1933 3520 09 20				ora #$20
  1934 3522 85 74				sta pom+1
  1935 3524 A9 00				lda #$00
  1936 3526 20 87 A7		        JSR LEVEL_PATCH_TURRET
  1937 3529			pomin_turr
  1938 3529 A9 00		        LDA #$00
  1939 352B 8D F5 04		        STA IS_LEVEL_COMPLETE
  1940
  1941 352E AD F3 04		        LDA LEVEL_NR
  1942 3531 29 07		        AND #$07     ;#%00000111
  1943 3533 AA			        TAX
  1944 3534 BD E1 2E		        LDA f3ED2,X
  1945 3537 8D 04 05		        STA SHOOT_FREQ_MASK
  1946 353A A9 00		        LDA #$00
  1947 353C 8D DF 04		        STA FIRE_COOLDOWN
  1948 				/*
  1949 				        LDX #$00     ;Set sprite $ff as empty
  1950 				@	    LDA #$00
  1951 				        STA aFFC0,X
  1952 				        INX
  1953 				        CPX #$40     ;length of the sprite
  1954 				        BNE @-  */
  1954
  1955
  1956 353F 20 C6 2C		        JSR SORT_SPRITES_BY_Y
  1957 3542 20 0F A1		        JSR RERUN_ACTIONS
  1958
  1959 				        ; Make sure player has at least 5 grenades
  1960 3545 AD FF 04		        LDA GRENADES
  1961 3548 C9 05		        CMP #$05
  1962 354A B0 05		        BCS @+
  1963 354C A9 05		        LDA #$05
  1964 354E 8D FF 04		        STA GRENADES
  1965 3551 60			@	    RTS
  1966
  1967 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  1968 				; Setup VIC, plus status bar, scores, sprites, etc.
  1969 3552			SETUP_SCREEN            ;$4067
  1970 3552 20 21 A4				jsr clear_screen
  1971 3555 20 D0 2E		        JSR SET_LEVEL_COLOR_RAM
  1972 3558 AD 02 04				lda V_SCROLL_BIT_IDX
  1973 355B 85 7F				sta vscrol1
  1974 				        ;JSR LEVEL_DRAW_VIEWPORT
  1975
  1976 						
  1977
  1978 				        ; set rows 21 and 23 with text and color
  1979 355D A2 00		        LDX #$00     ;#%00000000
  1980 355F BD 80 35		@	    LDA STATUS_BAR_TXT,X
  1981 3562 9D 48 FD		        STA $fd48,X  ;row 21
  1982 3565 A9 20		        LDA #$20     ;#%00100000
  1983 3567 9D 98 FD		        STA $fd98,X  ;row 23
  1984 356A E8			        INX
  1985 356B E0 28		        CPX #$28     ;#%00101000
  1986 356D D0 F0		        BNE @-
  1987
  1988 356F 20 FF 35		        JSR SCREEN_REFRESH_SCORE
  1989 3572 20 67 36		        JSR SCREEN_REFRESH_GRENADES
  1990 3575 20 81 36		        JSR SCREEN_REFRESH_LIVES
  1991 3578 20 33 36		        JSR SCREEN_REFRESH_HISCORE 
  1992
  1993 357B 60			        RTS
  1994
  1995 357C			LEVEL_COLOR_RAM         ;$40DA
  1996 357C 0D 0E 0D 0D		        .BYTE $0D,$0E,$0D,$0D
  1997
  1998 3580			STATUS_BAR_TXT          ;$40DE
  1999 3580 6D 5D 69 6C 5F 20 +         .BYTE $6D,$5D,$69,$6C,$5F,$20,$20,$20
  2000 3588 20 20 21 21 20 20 +         .BYTE $20,$20,$21,$21,$20,$20,$20,$3C
  2001 3590 3F 21 20 20 20 67 +         .BYTE $3F,$21,$20,$20,$20,$67,$5F,$68
  2002 3598 20 21 21 20 20 20 +         .BYTE $20,$21,$21,$20,$20,$20,$20,$62
  2003 35A0 63 20 20 20 20 20 +         .BYTE $63,$20,$20,$20,$20,$20,$21,$21	
  2004 						
  2005 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2006 				; CLEANUP_SPRITES
  2007 				; All 16 sprites are init and make them invisible
  2008 35A8			CLEANUP_SPRITES     ;$3DD3
  2009 35A8 A2 00		        LDX #$00
  2010 35AA A9 64		@    	LDA #$64
  2011 35AC 9D 10 D8		        STA SPRITES_X_LO00,X
  2012 35AF BD 4E 2C		        LDA ORIG_SPRITE_Y00,X
  2013 35B2 A9 00				lda #0
  2014 35B4 9D 20 D8		        STA SPRITES_Y00,X
  2015 35B7 A9 00		        LDA #$00
  2016 35B9 9D 60 D8		        STA SPRITES_DELTA_X00,X
  2017 35BC 9D 70 D8		        STA SPRITES_DELTA_Y00,X
  2018 35BF A9 FF		        LDA #$FF
  2019 35C1 9D 00 D8		        STA SPRITES_X_HI00,X
  2020 35C4 9D 50 D8		        STA SPRITES_PTR00,X
  2021 35C7 A9 00		        LDA #$00
  2022 35C9 9D 30 D8		        STA SPRITES_BKG_PRI00,X
  2023 35CC 9D 80 D8		        STA SPRITES_TYPE00,X
  2024 35CF E8			        INX
  2025 35D0 E0 10		        CPX #TOTAL_MAX_SPRITES
  2026 35D2 D0 D6		        BNE @-
  2027 35D4 60			        RTS	
  2028 						
  2029 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2030 				; Y = number of frames to wait
  2031 35D5			DELAY   ;$1366
  2032 35D5 20 59 2E		        jsr wait_vbl
  2033 35D8 88			        DEY
  2034 35D9 10 FA		        BPL DELAY
  2035 35DB 60			        RTS
  2036
  2037 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2038 				; A=Score to add
  2039 35DC			SCORE_ADD
  2040 35DC F8			        SED
  2041 35DD 18			        CLC
  2042 35DE 6D F8 04		        ADC SCORE_LSB
  2043 35E1 8D F8 04		        STA SCORE_LSB
  2044 35E4 90 18		        BCC _L00
  2045
  2046 				        ; Lives +=1 every 10000 points
  2047 35E6 AD F9 04		        LDA SCORE_MSB
  2048 35E9 18			        CLC
  2049 35EA 69 01		        ADC #$01     ;#%00000001
  2050 35EC 8D F9 04		        STA SCORE_MSB
  2051 35EF AD 00 05				lda lives
  2052 35F2 18					clc
  2053 35F3 69 01				adc #1
  2054 35F5 8D 00 05				sta lives
  2055 35F8 D8					cld
  2056 				        ;INC LIVES
  2057 35F9 20 81 36		        JSR SCREEN_REFRESH_LIVES
  2058 35FC A9 0C		        LDA #$0C     ;#%00001100
  2059 				        //JSR SFX_PLAY
  2060 35FE D8			_L00    CLD
  2061 				        ; fall-through		
  2062
  2063 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2064 35FF			SCREEN_REFRESH_SCORE
  2065 35FF AD F9 04		        LDA SCORE_MSB
  2066 3602 29 F0		        AND #$F0     ;#%11110000
  2067 3604 4A			        LSR 
  2068 3605 4A			        LSR 
  2069 3606 4A			        LSR 
  2070 3607 4A			        LSR 
  2071 3608 69 21		        ADC #$21     ;#%00100001
  2072 360A 8D 4E FD				sta $fd48+6
  2073 360D AD F9 04		        LDA SCORE_MSB
  2074 3610 29 0F		        AND #$0F     ;#%00001111
  2075 3612 18			        CLC
  2076 3613 69 21		        ADC #$21     ;#%00100001
  2077 3615 8D 4F FD				sta $fd48+7
  2078 3618 AD F8 04		        LDA SCORE_LSB
  2079 361B 29 F0		        AND #$F0     ;#%11110000
  2080 361D 4A			        LSR 
  2081 361E 4A			        LSR 
  2082 361F 4A			        LSR 
  2083 3620 4A			        LSR 
  2084 3621 18			        CLC
  2085 3622 69 21		        ADC #$21     ;#%00100001
  2086 3624 8D 50 FD				sta $fd48+8
  2087 3627 AD F8 04		        LDA SCORE_LSB
  2088 362A 29 0F		        AND #$0F     ;#%00001111
  2089 362C 18			        CLC
  2090 362D 69 21		        ADC #$21     ;#%00100001
  2091 362F 8D 51 FD				sta $fd48+9
  2092 3632 60			        RTS
  2093
  2094 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2095 3633			SCREEN_REFRESH_HISCORE
  2096 3633 AD 0F A4		        LDA HISCORE_LSB00
  2097 3636 29 F0		        AND #$F0     ;#%11110000
  2098 3638 4A			        LSR 
  2099 3639 4A			        LSR 
  2100 363A 4A			        LSR 
  2101 363B 4A			        LSR 
  2102 363C 69 21		        ADC #$21     ;#%00100001
  2103 363E 8D 6A FD				sta $fd48+34
  2104 3641 AD 0F A4		        LDA HISCORE_LSB00
  2105 3644 29 0F		        AND #$0F     ;#%00001111
  2106 3646 18			        CLC
  2107 3647 69 21		        ADC #$21     ;#%00100001
  2108 3649 8D 6B FD				sta $fd48+35
  2109 364C AD 10 A4		        LDA HISCORE_MSB00
  2110 364F 29 F0		        AND #$F0     ;#%11110000
  2111 3651 4A			        LSR 
  2112 3652 4A			        LSR 
  2113 3653 4A			        LSR 
  2114 3654 4A			        LSR 
  2115 3655 18			        CLC
  2116 3656 69 21		        ADC #$21     ;#%00100001
  2117 3658 8D 6C FD				sta $fd48+36
  2118 365B AD 10 A4		        LDA HISCORE_MSB00
  2119 365E 29 0F		        AND #$0F     ;#%00001111
  2120 3660 18			        CLC
  2121 3661 69 21		        ADC #$21     ;#%00100001
  2122 3663 8D 6D FD				sta $fd48+37
  2123 3666 60			        RTS
  2124
  2125 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2126 3667			SCREEN_REFRESH_GRENADES
  2127 3667 AD FF 04		        LDA GRENADES
  2128 366A 29 F0		        AND #$F0     ;#%11110000
  2129 366C 4A			        LSR 
  2130 366D 4A			        LSR 
  2131 366E 4A			        LSR 
  2132 366F 4A			        LSR 
  2133 3670 69 21		        ADC #$21     ;#%00100001
  2134 3672 8D 59 FD				sta $fd48+17
  2135 3675 AD FF 04		        LDA GRENADES
  2136 3678 29 0F		        AND #$0F     ;#%00001111
  2137 367A 18			        CLC
  2138 367B 69 21		        ADC #$21     ;#%00100001
  2139 367D 8D 5A FD				sta $fd48+18
  2140 3680 60			        RTS
  2141
  2142 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2143 3681			SCREEN_REFRESH_LIVES
  2144 3681 AD 00 05		        LDA LIVES
  2145 3684 29 F0		        AND #$F0     ;#%11110000
  2146 3686 4A			        LSR 
  2147 3687 4A			        LSR 
  2148 3688 4A			        LSR 
  2149 3689 4A			        LSR 
  2150 368A 69 21		        ADC #$21     ;#%00100001
  2151 368C 8D 61 FD				sta $fd48+25
  2152 368F AD 00 05		        LDA LIVES
  2153 3692 29 0F		        AND #$0F     ;#%00001111
  2154 3694 18			        CLC
  2155 3695 69 21		        ADC #$21     ;#%00100001
  2156 3697 8D 62 FD				sta $fd48+26
  2157 369A 60			        RTS
  2158
  2159 369B A2 0F		        LDX #$0F     ;#%00001111
  2160 369D BD 20 D8		@	    LDA SPRITES_Y00,X
  2161 36A0 9D B5 D8		        STA SPRITES_PREV_Y00,X
  2162 36A3 CA			        DEX
  2163 36A4 10 F7		        BPL @-
  2164 36A6 60			        RTS		
  2165
  2166
  2167
  2168 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2169 				; Level complete. Open door and animate hero to go through the exit door
  2170 36A7			HERO_START_ANIM_EXIT_DOOR          ;$3A4C
  2171 36A7 A9 01		        LDA #$01
  2172 36A9 8D F7 04		        STA IS_ANIM_EXIT_DOOR
  2173 36AC A9 02		        LDA #$02     ;Draw open door
  2174 36AE 20 9C 9F		        JSR LEVEL_PATCH_DOOR			;drzwi juÅ¼ dawno sÄ… otwarte
  2175 				        ;JSR LEVEL_DRAW_VIEWPORT
  2176
  2177 36B1			HERO_ANIM_EXIT_DOOR     ;b3A59
  2178 36B1 AD 00 D8		        LDA SPRITES_X_HI00
  2179 36B4 D0 1B		        BNE @+
  2180 36B6 AD 10 D8		        LDA SPRITES_X_LO00
  2181 36B9 C9 AF		        CMP #$AF     ;#%10101111
  2182 36BB F0 26		        BEQ @+1
  2183 36BD B0 12		        BCS @+
  2184
  2185 				        ; Right
  2186 36BF A9 04		        LDA #$04     ;Hero right anim
  2187 36C1 8D E0 04		        STA HERO_ANIM_MOV_IDX
  2188 36C4 A9 02		        LDA #$02     ;2 pixels to the right
  2189 36C6 8D 60 D8		        STA SPRITES_DELTA_X00
  2190 36C9 A9 00		        LDA #$00     ;#%00000000
  2191 36CB 8D 70 D8		        STA SPRITES_DELTA_Y00
  2192 36CE 4C 03 38		        JMP SETUP_HERO_ANIMATION
  2193
  2194 				        ; Left
  2195 36D1 A9 0C		@	    LDA #$0C     ;Hero left anim
  2196 36D3 8D E0 04		        STA HERO_ANIM_MOV_IDX
  2197 36D6 A9 FE		        LDA #$FE     ;to pixels to the left
  2198 36D8 8D 60 D8		        STA SPRITES_DELTA_X00
  2199 36DB A9 00		        LDA #$00     ;#%00000000
  2200 36DD 8D 70 D8		        STA SPRITES_DELTA_Y00
  2201 36E0 4C 03 38		        JMP SETUP_HERO_ANIMATION
  2202
  2203 				        ; Up
  2204 36E3 A9 00		@	    LDA #$00     ;Hero up anim
  2205 36E5 8D 60 D8		        STA SPRITES_DELTA_X00
  2206 36E8 8D E0 04		        STA HERO_ANIM_MOV_IDX
  2207 36EB A9 FF		        LDA #$FF     ;1 pixel up
  2208 36ED 8D 70 D8		        STA SPRITES_DELTA_Y00
  2209 36F0 AD 20 D8		        LDA SPRITES_Y00
  2210 36F3 C9 5A		        CMP #$5A     ;Hero Y pos?
  2211 36F5 F0 03		        BEQ @+
  2212 36F7 4C 03 38		        JMP SETUP_HERO_ANIMATION
  2213
  2214 				        ;Level complete. Hero animation going up done.
  2215 36FA A9 01		@	    LDA #$01
  2216 36FC 8D F5 04		        STA IS_LEVEL_COMPLETE
  2217 36FF 4C 03 38		        JMP SETUP_HERO_ANIMATION
  2218
  2219
  2220 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2221 3702			HANDLE_JOY2         ;$3AAA
  2222 3702 AD F7 04		        LDA IS_ANIM_EXIT_DOOR
  2223 3705 D0 AA		        BNE HERO_ANIM_EXIT_DOOR
  2224 3707 AD EF 04		        LDA ENEMIES_IN_FORT
  2225 370A D0 08		        BNE _jh00
  2226 370C AD F4 04		        LDA ANY_ENEMY_IN_MAP
  2227 370F D0 03		        BNE _jh00
  2228 3711 4C A7 36		        JMP HERO_START_ANIM_EXIT_DOOR
  2229
  2230 3714 A9 00		_jh00    LDA #$00     ;#%00000000
  2231 3716 8D 60 D8		        STA SPRITES_DELTA_X00
  2232 3719 8D 70 D8		        STA SPRITES_DELTA_Y00
  2233 371C 8D 04 04		        STA V_SCROLL_DELTA
  2234
  2235 371F AD 00 D3				lda porta
  2236 				        ;LDA $DC00    ;CIA1: Data Port Register A (in-game up)
  2237 3722 29 01		        AND #$01     ;#%00000001
  2238 3724 D0 32		        BNE _jh03
  2239 3726 A9 00		        LDA #$00     ;Anim index for SOLDIER_ANIM_FRAMES (up)
  2240 3728 8D E0 04		        STA HERO_ANIM_MOV_IDX
  2241 372B AD 03 04		        LDA V_SCROLL_ROW_IDX
  2242 372E D0 14		        BNE _jh01					;jeszcze nie koniec ekranu
  2243
  2244 3730 A9 01		        LDA #$01     ;#%00000001
  2245 3732 8D EE 04		        STA a04EE
  2246 3735 AD 20 D8		        LDA SPRITES_Y00
  2247 3738 C9 6E		        CMP #$6E     ;#%01101110        Hero reached top to move up?
  2248 373A 90 1C		        BCC _jh03
  2249 373C A9 FF		        LDA #$FF     ;Sprite move up 1 pixel
  2250 373E 8D 70 D8		        STA SPRITES_DELTA_Y00
  2251 3741 4C 58 37		        JMP _jh03
  2252
  2253 3744 AD 20 D8		_jh01    LDA SPRITES_Y00
  2254 3747 C9 A4		        CMP #$A4     ;#%10100100
  2255 3749 90 08		        BCC _jh02
  2256 374B A9 FF		        LDA #$FF     ;#%11111111
  2257 374D 8D 70 D8		        STA SPRITES_DELTA_Y00
  2258 3750 4C 58 37		        JMP _jh03
  2259
  2260 3753 A9 FF		_jh02    LDA #$FF     ;Scroll up 1 pixel
  2261 3755 8D 04 04		        STA V_SCROLL_DELTA
  2262 						
  2263
  2264 3758			_jh03    ;LDA $DC00    ;CIA1: Data Port Register A (in-game down)
  2265 3758 AD 00 D3				lda porta
  2266 375B 29 02		        AND #$02     ;#%00000010
  2267 375D D0 11		        BNE _jh04
  2268 375F A9 08		        LDA #$08     ;Anim index for SOLIDER_ANIM_FRAMES (down)
  2269 3761 8D E0 04		        STA HERO_ANIM_MOV_IDX
  2270 3764 AD 20 D8		        LDA SPRITES_Y00
  2271 3767 C9 C1		        CMP #$C1     ;#%11000001
  2272 3769 B0 05		        BCS _jh04
  2273 376B A9 01		        LDA #$01     ;#%00000001
  2274 376D 8D 70 D8		        STA SPRITES_DELTA_Y00
  2275
  2276 3770			_jh04    ;LDA $DC00    ;CIA1: Data Port Register A (in-game left)
  2277 3770 AD 00 D3				lda porta
  2278 3773 29 04		        AND #$04     ;#%00000100
  2279 3775 D0 16		        BNE _jh06
  2280 3777 A9 0C		        LDA #$0C     ;Anim index for SOLDIER_ANIM_FRAMES (left)
  2281 3779 8D E0 04		        STA HERO_ANIM_MOV_IDX
  2282 377C AD 00 D8		        LDA SPRITES_X_HI00
  2283 377F D0 07		        BNE _jh05
  2284 3781 AD 10 D8		        LDA SPRITES_X_LO00
  2285 3784 C9 18		        CMP #$18     ;#%00011000
  2286 3786 90 05		        BCC _jh06
  2287 3788 A9 FE		_jh05    LDA #$FE     ;#%11111110
  2288 378A 8D 60 D8		        STA SPRITES_DELTA_X00
  2289
  2290 378D			_jh06    ;LDA $DC00    ;CIA1: Data Port Register A (in-game right)
  2291 378D AD 00 D3				lda porta
  2292 3790 29 08		        AND #$08     ;#%00001000
  2293 3792 D0 16		        BNE _jh08
  2294 3794 A9 04		        LDA #$04     ;Anim index for SOLDIER_ANIM_FRAMES (right)
  2295 3796 8D E0 04		        STA HERO_ANIM_MOV_IDX
  2296 3799 AD 00 D8		        LDA SPRITES_X_HI00
  2297 379C F0 07		        BEQ _jh07
  2298 379E AD 10 D8		        LDA SPRITES_X_LO00
  2299 37A1 C9 41		        CMP #$41     ;#%01000001
  2300 37A3 B0 05		        BCS _jh08
  2301 37A5 A9 02		_jh07    LDA #$02     ;#%00000010
  2302 37A7 8D 60 D8		        STA SPRITES_DELTA_X00
  2303
  2304 37AA			_jh08    ;LDA $DC00    ;CIA1: Data Port Register A (multiple directions)
  2305 37AA AD 00 D3				lda porta
  2306 37AD 29 09				and #1+8		
  2307 				        ;ORA #$10     ;#%00010000
  2308 				        ;CMP #$76     ;#%01110110        up-right
  2309 37AF D0 0D		        BNE _jh09
  2310
  2311 37B1 A2 02		        LDX #$02     ;Anim index for SOLDIER_ANIM_FRAMES (up-right)
  2312 37B3 8E E0 04		        STX HERO_ANIM_MOV_IDX
  2313 37B6 A9 0D		        LDA #<HERO_FRAMES_UP_RIGHT  ;#%10111000
  2314 37B8 85 19		        STA p19
  2315 37BA A9 39		        LDA #>HERO_FRAMES_UP_RIGHT  ;#%00111100
  2316 37BC 85 1A		        STA p1A
  2317 				        ;FIXME: unintended fallthrough.
  2318 				        ;       a jump must be placed here
  2319
  2320 37BE			_jh09    ;CMP #$75     ;#%01110101        down-right
  2321 37BE AD 00 D3				lda porta
  2322 37C1 29 0A				and #2+8
  2323 37C3 D0 0D		        BNE _jh10
  2324 37C5 A2 06		        LDX #$06     ;Anim index for SOLDIER_ANIM_FRAMES (down-right)
  2325 37C7 8E E0 04		        STX HERO_ANIM_MOV_IDX
  2326 37CA A9 05		        LDA #<HERO_FRAMES_DOWN_RIGHT  ;#%10110000
  2327 37CC 85 19		        STA p19
  2328 37CE A9 39		        LDA #>HERO_FRAMES_DOWN_RIGHT  ;#%00111100
  2329 37D0 85 1A		        STA p1A
  2330 				        ;FIXME: unintended fallthrough.
  2331 				        ;       a jump must be placed here
  2332
  2333 37D2			_jh10    ;CMP #$79     ;#%01111001        down-left
  2334 37D2 AD 00 D3				lda porta
  2335 37D5 29 06				and #2+4
  2336 37D7 D0 0D		        BNE _jh11
  2337 37D9 A2 0A		        LDX #$0A     ;Anim index for SOLDER_ANIM_FRAMES (down-left)
  2338 37DB 8E E0 04		        STX HERO_ANIM_MOV_IDX
  2339 37DE A9 09		        LDA #<HERO_FRAMES_DOWN_LEFT  ;#%10110100
  2340 37E0 85 19		        STA p19
  2341 37E2 A9 39		        LDA #>HERO_FRAMES_DOWN_LEFT  ;#%00111100
  2342 37E4 85 1A		        STA p1A
  2343 				        ;FIXME: unintended fallthrough.
  2344 				        ;       a jump must be placed here
  2345
  2346 37E6			_jh11    ;CMP #$7A     ;#%01111010        up-left
  2347 37E6 AD 00 D3				lda porta
  2348 37E9 29 05				and #1+4
  2349 37EB D0 0D		        BNE _jh12
  2350 37ED A2 0E		        LDX #$0E     ;Anim index for SOLDIER_ANIM_FRAMES (up-left)
  2351 37EF 8E E0 04		        STX HERO_ANIM_MOV_IDX
  2352 37F2 A9 11		        LDA #<HERO_FRAMES_UP_LEFT  ;#%10111100
  2353 37F4 85 19		        STA p19
  2354 37F6 A9 39		        LDA #>HERO_FRAMES_UP_LEFT  ;#%00111100
  2355 37F8 85 1A		        STA p1A
  2356
  2357 37FA			_jh12    ;LDA $DC00    ;CIA1: Data Port Register A (in-game direction changed)
  2358 37FA AD 00 D3				lda porta
  2359 37FD 29 0F		        AND #$0F     ;#%00001111
  2360 37FF C9 0F		        CMP #$0F     ;#%00001111
  2361 3801 F0 1E		        BEQ b3BCC
  2362
  2363 				        ; Fall-through
  2364
  2365 3803			SETUP_HERO_ANIMATION            ;$3BAC
  2366 3803 AD E0 04		        LDA HERO_ANIM_MOV_IDX
  2367 3806 A8			        TAY
  2368 3807 B9 15 39		        LDA SOLDIER_ANIM_FRAMES,Y
  2369 380A 85 FB		        STA pFB
  2370 380C B9 16 39		        LDA SOLDIER_ANIM_FRAMES+1,Y
  2371 380F 85 FC		        STA pFC
  2372 3811 EE E6 04		        INC COUNTER1
  2373 3814 AD E6 04		        LDA COUNTER1
  2374 3817 29 0C		        AND #$0C     ;#%00001100
  2375 3819 4A			        LSR
  2376 381A 4A			        LSR
  2377 381B A8			        TAY
  2378 381C B1 FB		        LDA (pFB),Y
  2379 381E 8D 50 D8		        STA SPRITES_PTR00
  2380 3821 20 25 39		b3BCC   JSR s35CE
  2381 3824 AD 00 D8		        LDA SPRITES_X_HI00
  2382 3827 8D F2 04		        STA TMP_SPRITE_X_HI
  2383 382A AD 60 D8		        LDA SPRITES_DELTA_X00
  2384 382D 18			        CLC
  2385 382E 6D 60 D8		        ADC SPRITES_DELTA_X00
  2386 3831 85 FB		        STA pFB
  2387 3833 AD 10 D8		        LDA SPRITES_X_LO00
  2388 3836 18			        CLC
  2389 3837 65 FB		        ADC pFB
  2390 3839 48			        PHA
  2391 383A 70 0F		        BVS b3BF8
  2392 383C 4D 10 D8		        EOR SPRITES_X_LO00
  2393 383F 29 80		        AND #$80     ;#%10000000
  2394 3841 F0 08		        BEQ b3BF8
  2395 3843 AD F2 04		        LDA TMP_SPRITE_X_HI
  2396 3846 49 FF		        EOR #$FF     ;#%11111111
  2397 3848 8D F2 04		        STA TMP_SPRITE_X_HI
  2398 384B 68			b3BF8   PLA
  2399 384C 8D F0 04		        STA TMP_SPRITE_X_LO
  2400 384F AD 20 D8		        LDA SPRITES_Y00
  2401 3852 18			        CLC
  2402 3853 6D 70 D8		        ADC SPRITES_DELTA_Y00
  2403 3856 18			        CLC
  2404 3857 6D 70 D8		        ADC SPRITES_DELTA_Y00
  2405 385A 18			        CLC
  2406 385B 6D 70 D8		        ADC SPRITES_DELTA_Y00
  2407 385E 18			        CLC
  2408 385F 6D 04 04		        ADC V_SCROLL_DELTA
  2409 3862 18			        CLC
  2410 3863 6D 04 04		        ADC V_SCROLL_DELTA
  2411 3866 18			        CLC
  2412 3867 6D 04 04		        ADC V_SCROLL_DELTA
  2413 386A 8D F1 04		        STA TMP_SPRITE_Y
  2414 386D 20 4E 39		        JSR j172F
  2415
  2416 						
  2417 				        ; Get charset mask info
  2418 3870 A0 00		        LDY #$00
  2419 3872 B1 FC		        LDA (pFC),Y			;znak pod bohaterem
  2420 3874 A8			        TAY
  2421 3875 B1 2A		        LDA (p2A),Y			;tablica z opisem znakow
  2422 3877 29 01		        AND #$01     ;#%00000001
  2423 3879 D0 69		        BNE b3C8F					;zakaz wchodzenia
  2424
  2425 387B B1 2A		        LDA (p2A),Y
  2426 387D 29 04		        AND #$04     ;#%00000100
  2427 387F F0 51		        BEQ b3C7D	
  2428
  2429 3881 AD F7 04				LDA IS_ANIM_EXIT_DOOR
  2430 3884 D0 4C				BNE b3C7D				;Podczas animacji zakonczenia poziomu, bohater nie wpadnie do bagna/okopu
  2431
  2432 3886 A9 02		        LDA #$02        ;Hero fell in trench/water		, Hero wpadl do wody/drut kolczasty
  2433 3888 8D 03 05		        STA IS_HERO_DEAD
  2434 388B A9 04		        LDA #$04        ;"Hero dead" SFX
  2435 				        //JSR SFX_PLAY
  2436 388D 8D E6 04		        STA COUNTER1
  2437 3890 AD F0 04		        LDA TMP_SPRITE_X_LO
  2438 3893 18			        CLC
  2439 3894 6D 60 D8		        ADC SPRITES_DELTA_X00
  2440 3897 18			        CLC
  2441 3898 6D 60 D8		        ADC SPRITES_DELTA_X00
  2442 389B 18			        CLC
  2443 389C 6D 60 D8		        ADC SPRITES_DELTA_X00
  2444 389F 18			        CLC
  2445 38A0 6D 60 D8		        ADC SPRITES_DELTA_X00
  2446 38A3 8D 10 D8		        STA SPRITES_X_LO00
  2447 38A6 AD F1 04		        LDA TMP_SPRITE_Y
  2448 38A9 18			        CLC
  2449 38AA 6D 70 D8		        ADC SPRITES_DELTA_Y00
  2450 38AD 18			        CLC
  2451 38AE 6D 70 D8		        ADC SPRITES_DELTA_Y00
  2452 38B1 18			        CLC
  2453 38B2 6D 70 D8		        ADC SPRITES_DELTA_Y00
  2454 38B5 18			        CLC
  2455 38B6 6D 04 04		        ADC V_SCROLL_DELTA
  2456 38B9 18			        CLC
  2457 38BA 6D 04 04		        ADC V_SCROLL_DELTA
  2458 38BD 18			        CLC
  2459 38BE 6D 04 04		        ADC V_SCROLL_DELTA
  2460 38C1 18			        CLC
  2461 38C2 69 0C		        ADC #$0C     ;#%00001100
  2462 38C4 8D 20 D8		        STA SPRITES_Y00
  2463 38C7 A9 00		        LDA #$00
  2464 38C9 8D 60 D8		        STA SPRITES_DELTA_X00
  2465 38CC 8D 70 D8		        STA SPRITES_DELTA_Y00
  2466 38CF 8D 04 04		        STA V_SCROLL_DELTA
  2467
  2468 				        ; Get charset mask info
  2469 38D2 B1 2A		b3C7D   LDA (p2A),Y
  2470 38D4 29 02		        AND #$02     ;#%00000010
  2471 38D6 F0 06		        BEQ b3C89
  2472
  2473 38D8 A9 FF		        LDA #$FF
  2474 38DA 8D 30 D8		        STA SPRITES_BKG_PRI00
  2475 38DD 60			        RTS
  2476
  2477 38DE A9 00		b3C89   LDA #$00
  2478 38E0 8D 30 D8		        STA SPRITES_BKG_PRI00
  2479 38E3 60			        RTS
  2480
  2481 38E4 AD F7 04		b3C8F   LDA IS_ANIM_EXIT_DOOR
  2482 38E7 D0 0B		        BNE b3C9F
  2483 38E9 A9 00		        LDA #$00						;nie mozna wejsc na to pole
  2484 38EB 8D 60 D8		        STA SPRITES_DELTA_X00
  2485 38EE 8D 70 D8		        STA SPRITES_DELTA_Y00
  2486 38F1 8D 04 04		        STA V_SCROLL_DELTA
  2487 38F4 60			b3C9F   RTS
  2488
  2489 38F5			HERO_FRAMES_UP
  2490 38F5 98 99 9A 99		        .BYTE $98,$99,$9A,$99                   ;Anim up
  2491 38F9			HERO_FRAMES_DOWN
  2492 38F9 9B 9C 9D 9C		        .BYTE $9B,$9C,$9D,$9C                   ;Anim down
  2493 38FD			HERO_FRAMES_LEFT
  2494 38FD D5 D6 D7 D8		        .BYTE $D5,$D6,$D7,$D8                   ;Anim left
  2495 3901			HERO_FRAMES_RIGHT
  2496 3901 D9 DA DB DC		        .BYTE $D9,$DA,$DB,$DC                   ;Anim right
  2497 3905			HERO_FRAMES_DOWN_RIGHT
  2498 3905 9E 9F DF A0		        .BYTE $9E,$9F,$DF,$A0                   ;Anim down-right
  2499 3909			HERO_FRAMES_DOWN_LEFT
  2500 3909 A1 A2 E0 A3		        .BYTE $A1,$A2,$E0,$A3                   ;Anim down-left
  2501 390D			HERO_FRAMES_UP_RIGHT
  2502 390D A6 A7 A8 E1		        .BYTE $A6,$A7,$A8,$E1                   ;Anim up-right
  2503 3911			HERO_FRAMES_UP_LEFT
  2504 3911 A9 AA AB E2		        .BYTE $A9,$AA,$AB,$E2                   ;Anim up-left
  2505
  2506 				; These frames are shared by the hero and the regular enemies
  2507 3915			SOLDIER_ANIM_FRAMES                     ;$3CC0
  2508 3915 F5 38		        dta a(HERO_FRAMES_UP)            ;0
  2509 3917 0D 39		        dta a(HERO_FRAMES_UP_RIGHT)      ;1
  2510 3919 01 39		        dta a(HERO_FRAMES_RIGHT)         ;2
  2511 391B 05 39		        dta a(HERO_FRAMES_DOWN_RIGHT)    ;3
  2512 391D F9 38		        dta a(HERO_FRAMES_DOWN)          ;4
  2513 391F 09 39		        dta a(HERO_FRAMES_DOWN_LEFT)     ;5
  2514 3921 FD 38		        dta a(HERO_FRAMES_LEFT)          ;6
  2515 3923 11 39		        dta a(HERO_FRAMES_UP_LEFT)       ;7
  2516
  2517 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2518 3925 AD 0A 04		s35CE   LDA GAME_TICK   ;unused
  2519 3928 AD E1 04		        LDA a04E1
  2520 392B 29 0F		        AND #$0F     ;#%00001111
  2521 392D CD E0 04		        CMP HERO_ANIM_MOV_IDX
  2522 3930 F0 13		        BEQ @+1
  2523 3932 38			        SEC
  2524 3933 ED E0 04		        SBC HERO_ANIM_MOV_IDX
  2525 3936 29 0F		        AND #$0F     ;#%00001111
  2526 3938 C9 08		        CMP #$08     ;#%00001000
  2527 393A 90 06		        BCC @+
  2528 393C EE E1 04		        INC a04E1
  2529 393F EE E1 04		        INC a04E1
  2530 3942 CE E1 04		@	    DEC a04E1
  2531 3945 AD E1 04		@	    LDA a04E1
  2532 3948 29 0F		        AND #$0F     ;#%00001111
  2533 394A 8D E1 04		        STA a04E1
  2534 394D 60			        RTS
  2535
  2536 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2537 394E AD F0 04		j172F   LDA TMP_SPRITE_X_LO
  2538 3951 38			        SEC
  2539 3952 E9 10		        SBC #$10     ;#%00010000
  2540 3954 08			        PHP
  2541 3955 4A			        LSR
  2542 3956 4A			        LSR
  2543 3957 4A			        LSR
  2544 3958 28			        PLP
  2545 3959 90 08		        BCC @+
  2546
  2547 395B AC F2 04		        LDY TMP_SPRITE_X_HI
  2548 395E F0 03		        BEQ @+
  2549
  2550 3960 18			        CLC
  2551 3961 69 20		        ADC #$20     ;#%00100000
  2552
  2553 3963 85 FB		@	    STA pFB
  2554 3965 A9 00		        LDA #$00     ;#%00000000
  2555 3967 85 FC		        STA pFC
  2556 						
  2557 3969 85 FD		        STA pFD
  2558 396B 85 FE		        STA pFE
  2559 396D AD F1 04		        LDA TMP_SPRITE_Y
  2560 3970 38			        SEC
  2561 3971 E9 1E		        SBC #$1E     ;#%00011110
  2562 3973 B0 0C				bcs pomin0
  2563 3975 C9 F6				cmp #$f6
  2564 3977 B0 04				bcs skok1
  2565 3979 A9 FE				lda #$fe
  2566 397B D0 07				bne skok0
  2567 397D A9 FF		skok1	lda #$ff
  2568 397F D0 03				bne skok0 
  2569 3981 4A			pomin0	LSR
  2570 3982 4A			        LSR
  2571 3983 4A			        LSR
  2572 3984 18			skok0	CLC 
  2573 3985 6D 03 04		        ADC V_SCROLL_ROW_IDX
  2574 3988 48			        PHA
  2575 3989 4A			        LSR
  2576 398A 66 FC		        ROR pFC
  2577 398C 4A			        LSR
  2578 398D 66 FC		        ROR pFC
  2579 398F 4A			        LSR
  2580 3990 66 FC		        ROR pFC
  2581 3992 85 FD		        STA pFD
  2582 3994 68			        PLA
  2583 3995 0A			        ASL
  2584 3996 26 FE		        ROL pFE
  2585 3998 0A			        ASL
  2586 3999 26 FE		        ROL pFE
  2587 399B 0A			        ASL
  2588 399C 26 FE		        ROL pFE
  2589 399E 18			        CLC
  2590 399F 65 FC		        ADC pFC
  2591 39A1 85 FC		        STA pFC
  2592 39A3 A5 FD		        LDA pFD
  2593 39A5 65 FE		        ADC pFE
  2594 39A7 85 FD		        STA pFD
  2595 39A9 A5 FC		        LDA pFC
  2596 39AB 18			        CLC
  2597 39AC 65 FB		        ADC pFB
  2598 39AE 85 FC		        STA pFC
  2599 39B0 A5 FD		        LDA pFD
  2600 39B2 69 00		        ADC #$00
  2601 39B4 85 FD		        STA pFD
  2602 39B6 A5 FD		        LDA pFD
  2603 39B8 18			        CLC                 ;FIXME: CLC/ADC could be replaced with ORA
  2604 39B9 69 40		        ADC #>mapa
  2605 39BB 85 FD		        STA pFD
  2606
  2607 39BD 60			        RTS
  2608
  2609 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2610 39BE			CHECK_COLLISION       ;$100F
  2611 39BE A0 00		        LDY #$00     ;#%00000000
  2612 39C0 B9 85 D8		@	    LDA SPRITES_TYPE05,Y
  2613 39C3 84 FB		        STY pFB
  2614 39C5 A8			        TAY
  2615 39C6 B9 1E 3A		        LDA f1074,Y
  2616 39C9 A4 FB		        LDY pFB
  2617 39CB 29 01		        AND #$01     ;#%00000001
  2618 39CD F0 49		        BEQ @+
  2619
  2620 39CF AD 00 D8		        LDA SPRITES_X_HI00
  2621 39D2 D9 05 D8		        CMP SPRITES_X_HI05,Y
  2622 39D5 D0 41		        BNE @+
  2623 39D7 AD 10 D8		        LDA SPRITES_X_LO00
  2624 39DA 18			        CLC
  2625 39DB 69 04		        ADC #$04     ;#%00000100
  2626 39DD D9 15 D8		        CMP SPRITES_X_LO05,Y
  2627 39E0 90 36		        BCC @+
  2628 39E2 AD 10 D8		        LDA SPRITES_X_LO00
  2629 39E5 38			        SEC
  2630 39E6 E9 04		        SBC #$04     ;#%00000100
  2631 39E8 D9 15 D8		        CMP SPRITES_X_LO05,Y
  2632 39EB B0 2B		        BCS @+
  2633 39ED AD 20 D8		        LDA SPRITES_Y00
  2634 39F0 18			        CLC
  2635 39F1 69 08		        ADC #$08     ;#%00001000
  2636 39F3 D9 25 D8		        CMP SPRITES_Y05,Y
  2637 39F6 90 20		        BCC @+
  2638 39F8 AD 20 D8		        LDA SPRITES_Y00
  2639 39FB 38			        SEC
  2640 39FC E9 08		        SBC #$08     ;#%00001000
  2641 39FE D9 25 D8		        CMP SPRITES_Y05,Y
  2642 3A01 B0 15		        BCS @+
  2643 3A03 A9 01		        LDA #$01     ;Hero was shot
  2644 3A05 8D 03 05		        STA IS_HERO_DEAD
  2645 3A08 8D E6 04		        STA COUNTER1
  2646 3A0B A9 04		        LDA #$04     ;#%00000100
  2647 				        //JSR SFX_PLAY
  2648 3A0D A9 00		        LDA #$00     ;#%00000000
  2649 3A0F 8D 60 D8		        STA SPRITES_DELTA_X00
  2650 3A12 8D 70 D8		        STA SPRITES_DELTA_Y00
  2651 3A15 8D 04 04		        STA V_SCROLL_DELTA
  2652 3A18 C8			@	    INY
  2653 3A19 C0 0B		        CPY #TOTAL_MAX_SPRITES-5
  2654 3A1B D0 A3		        BNE @-1
  2655 3A1D 60			        RTS
  2656
  2657 				        ; Sprite types that can collide with hero.
  2658 				        ; Flagged types:
  2659 				        ; anim_type_05, anim_type_08, anim_type_0A, anim_type_0C,
  2660 				        ; anim_type_15, anim_type_17, anim_type_18, anim_type_19,
  2661 				        ; anim_type_1A, anim_type_1B, anim_type_1F, anim_type_20,
  2662 				        ; anim_type_21, anim_type_22, anim_type_23, anim_type_24,
  2663 				        ; anim_type_25
  2664
  2665 				        ; FIXME: Missing information of anim_type_27 and anim_type_28
  2666 3A1E 00 00 00 00 00 01 + f1074   .BYTE $00,$00,$00,$00,$00,$01,$00,$00   ;$00-$07
  2667 3A26 01 00 01 00 01 00 +         .BYTE $01,$00,$01,$00,$01,$00,$00,$00   ;$08-$0F
  2668 3A2E 00 00 00 00 00 01 +         .BYTE $00,$00,$00,$00,$00,$01,$00,$01   ;$10-$17
  2669 3A36 01 01 01 01 00 00 +         .BYTE $01,$01,$01,$01,$00,$00,$00,$01   ;$18-$1F
  2670 3A3E 01 01 01 01 01 01 +         .BYTE $01,$01,$01,$01,$01,$01,$00       ;$28-$26
  2671
  2672 				        ; Bullet delta-X values
  2673 3A45 00 03 06 07 08 07 + f35F7   .BYTE $00,$03,$06,$07,$08,$07,$06,$03
  2674 3A4D 00 FD FA F9 F8 F9 +         .BYTE $00,$FD,$FA,$F9,$F8,$F9,$FA,$FD
  2675 				        ; Bullet delta-Y values
  2676 3A55 FA FB FC FE 00 02 + f3607   .BYTE $FA,$FB,$FC,$FE,$00,$02,$04,$05
  2677 3A5D 06 05 04 02 00 FE +         .BYTE $06,$05,$04,$02,$00,$FE,$FC,$FB
  2678 				        ; Bullet (?) X-lo values
  2679 3A65 04 04 04 04 00 00 + f3617   .BYTE $04,$04,$04,$04,$00,$00,$02,$02
  2680 3A6D F9 F9 00 00 00 00 +         .BYTE $F9,$F9,$00,$00,$00,$00,$00,$00
  2681 				        ; Bullet (?) Y values
  2682 3A75 00 00 02 02 00 00 + f3627   .BYTE $00,$00,$02,$02,$00,$00,$02,$02
  2683 3A7D 00 00 02 02 00 00 +         .BYTE $00,$00,$02,$02,$00,$00,$07,$07		
  2684 						
  2685 3A85			HERO_TYPE_ANIM_TBL
  2686 3A85 53 A9		        dta a(TYPE_ANIM_HERO_MAIN)               ;hero_type_anim_00
  2687 3A87 A9 A8		        dta a(TYPE_ANIM_BULLET)                  ;hero_type_anim_01
  2688 3A89 C6 3A		        dta a(TYPE_ANIM_GRENADE)                 ;hero_type_anim_02
  2689 3A8B 4A 3B		        dta a(TYPE_ANIM_BULLET_END)              ;hero_type_anim_03
  2690 3A8D 88 3B		        dta a(TYPE_ANIM_GRENADE_END)             ;hero_type_anim_04
  2691
  2692 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2693 				; Calls the different hero-related animation, based on the sprite type assigned.
  2694 				; E.g: throw grenade, bullet start, bullet end, main anim, etc.
  2695 3A8F			ANIM_HERO       ;$3641
  2696 				        ; Sprites 1-5 are bullets / grenades
  2697 3A8F A2 00		        LDX #$00     ;#%00000000
  2698
  2699 				        ; If bullet/grenade is outside bounds, remove it
  2700 3A91 BD 21 D8		@	    LDA SPRITES_Y01,X
  2701 3A94 C9 1E		        CMP #$1E     ;#%00011110
  2702 3A96 90 10		        BCC @+
  2703 3A98 C9 DC		        CMP #$DC     ;#%11011100
  2704 3A9A B0 0C		        BCS @+
  2705 3A9C BD 11 D8		        LDA SPRITES_X_LO01,X
  2706 3A9F C9 5B		        CMP #$5B     ;#%01011011
  2707 3AA1 90 08		        BCC @+1
  2708 3AA3 BD 01 D8		        LDA SPRITES_X_HI01,X
  2709 3AA6 F0 03		        BEQ @+1
  2710 3AA8 20 69 3B		@	    JSR CLEANUP_HERO_SPRITE
  2711
  2712 				        ; FIXME: Fallthrough. Intended? will it be possible to call
  2713 				        ; TYPE_ANIM_HERO_MAIN more than once per frame?
  2714
  2715 3AAB BD 81 D8		@	    LDA SPRITES_TYPE01,X
  2716 3AAE 0A			        ASL
  2717 3AAF A8			        TAY
  2718 3AB0 B9 85 3A		        LDA HERO_TYPE_ANIM_TBL,Y
  2719 3AB3 85 FB		        STA pFB
  2720 3AB5 B9 86 3A		        LDA HERO_TYPE_ANIM_TBL+1,Y
  2721 3AB8 85 FC		        STA pFC
  2722 3ABA 20 C3 3A		        JSR @+
  2723 3ABD E8			        INX
  2724 3ABE E0 04		        CPX #$04     ;For sprites 1-5
  2725 3AC0 D0 CF		        BNE @-2
  2726
  2727 3AC2 60			        RTS
  2728
  2729 3AC3 6C FB 00		@	    JMP (pFB)
  2730
  2731 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2732 				; ref: anim_type_02, hero_type_anim_02
  2733 				; Hero anim grenade
  2734 3AC6			TYPE_ANIM_GRENADE
  2735 3AC6 FE 90 D8		        INC SPRITES_TMP_A01,X
  2736 3AC9 BD 90 D8		        LDA SPRITES_TMP_A01,X
  2737 3ACC C9 0F		        CMP #$0F     ;#%00001111
  2738 3ACE B0 09		        BCS @+
  2739 3AD0 4A			        LSR
  2740 3AD1 4A			        LSR
  2741 3AD2 A8			        TAY
  2742 3AD3 B9 45 3B		        LDA f36F9,Y
  2743 3AD6 8D 50 D8		        STA SPRITES_PTR00
  2744 3AD9 BD 90 D8		@	    LDA SPRITES_TMP_A01,X
  2745 3ADC 29 07		        AND #$07     ;#%00000111
  2746 3ADE D0 10		        BNE @+
  2747 3AE0 BD 90 D8		        LDA SPRITES_TMP_A01,X
  2748 3AE3 4A			        LSR
  2749 3AE4 4A			        LSR
  2750 3AE5 4A			        LSR
  2751 3AE6 A8			        TAY
  2752 3AE7 B9 3F 3B		        LDA FRAME_GRENADE1,Y
  2753 3AEA 9D 51 D8		        STA SPRITES_PTR01,X
  2754 3AED BD 90 D8		        LDA SPRITES_TMP_A01,X
  2755 3AF0 C9 28		@	    CMP #$28     ;#%00101000
  2756 3AF2 F0 2B		        BEQ @+1
  2757 3AF4 BD 11 D8		        LDA SPRITES_X_LO01,X
  2758 3AF7 8D F0 04		        STA TMP_SPRITE_X_LO
  2759 3AFA BD 21 D8		        LDA SPRITES_Y01,X
  2760 3AFD 8D F1 04		        STA TMP_SPRITE_Y
  2761 3B00 BD 01 D8		        LDA SPRITES_X_HI01,X
  2762 3B03 8D F2 04		        STA TMP_SPRITE_X_HI
  2763 3B06 20 4E 39		        JSR j172F
  2764 3B09 A9 00		        LDA #$00     ;#%00000000
  2765 3B0B 9D 31 D8		        STA SPRITES_BKG_PRI01,X
  2766
  2767 						
  2768 				        ; Get charset mask info
  2769 3B0E A0 00		        LDY #$00
  2770 3B10 B1 FC		        LDA (pFC),Y			;znak pod bohaterem
  2771 3B12 A8			        TAY
  2772 3B13 B1 2A		        LDA (p2A),Y
  2773 						
  2774 						
  2775 3B15 29 02		        AND #$02     ;#%00000010
  2776 3B17 F0 05		        BEQ @+
  2777
  2778 3B19 A9 FF		        LDA #$FF     ;#%11111111
  2779 3B1B 9D 31 D8		        STA SPRITES_BKG_PRI01,X
  2780 3B1E 60			@	    RTS
  2781
  2782 3B1F A9 04		@	    LDA #$04     ;#%00000100
  2783 3B21 9D 81 D8		        STA SPRITES_TYPE01,X
  2784 3B24 A9 00		        LDA #$00     ;#%00000000
  2785 3B26 9D 90 D8		        STA SPRITES_TMP_A01,X
  2786 3B29 9D 61 D8		        STA SPRITES_DELTA_X01,X
  2787 3B2C 9D 71 D8		        STA SPRITES_DELTA_Y01,X
  2788 3B2F 9D 31 D8		        STA SPRITES_BKG_PRI01,X
  2789 3B32 A8			        TAY
  2790 3B33 B9 14 3C		        LDA FRAME_EXPLOSION,Y
  2791 3B36 9D 51 D8		        STA SPRITES_PTR01,X
  2792 3B39 A9 08		        LDA #$08     ;orange
  2793 3B3B 9D 41 D8		        STA SPRITES_COLOR01,X
  2794 3B3E 60			        RTS
  2795
  2796 3B3F			FRAME_GRENADE1      ;$36F3
  2797 3B3F 92 91 91 92 93 93	        .BYTE $92,$91,$91,$92,$93,$93
  2798 3B45 A4 A5 DE 98 98	f36F9   .BYTE $A4,$A5,$DE,$98,$98
  2799
  2800 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2801 				; ref: anim_type_03, hero_type_anim_03
  2802 				; Hero Anim bullet end
  2803 3B4A			TYPE_ANIM_BULLET_END      ;$36FE
  2804 3B4A FE 90 D8		        INC SPRITES_TMP_A01,X
  2805 3B4D BD 90 D8		        LDA SPRITES_TMP_A01,X
  2806 3B50 C9 09		        CMP #$09     ;Frames for anim(?)
  2807 3B52 F0 08		        BEQ @+
  2808 3B54 A8			        TAY
  2809 3B55 B9 60 3B		        LDA FRAME_BULLET_END,Y
  2810 3B58 9D 51 D8		        STA SPRITES_PTR01,X
  2811 3B5B 60			        RTS
  2812
  2813 3B5C 20 69 3B		@	    JSR CLEANUP_HERO_SPRITE
  2814 3B5F 60			        RTS
  2815
  2816 3B60			FRAME_BULLET_END             ;$3714
  2817 3B60 94 95 96 97 96 96 +         .BYTE $94,$95,$96,$97,$96,$96,$94,$FF
  2818 3B68 FF			        .BYTE $FF
  2819
  2820 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2821 				; Hero Reset state (bullet, grenade, main) and disable/hide
  2822 				; Not necessarily the hero in itself, but sprites associated with it like bullet
  2823 				; and grenade.
  2824 3B69			CLEANUP_HERO_SPRITE     ;$371D
  2825 3B69 A9 00		        LDA #$00
  2826 3B6B 9D 81 D8		        STA SPRITES_TYPE01,X
  2827 3B6E 9D 61 D8		        STA SPRITES_DELTA_X01,X
  2828 3B71 9D 71 D8		        STA SPRITES_DELTA_Y01,X
  2829 3B74 BD 4F 2C		        LDA ORIG_SPRITE_Y01,X
  2830 3B77 9D 21 D8		        STA SPRITES_Y01,X
  2831 3B7A A9 64		        LDA #$64
  2832 3B7C 9D 11 D8		        STA SPRITES_X_LO01,X
  2833 3B7F A9 FF		        LDA #$FF
  2834 3B81 9D 01 D8		        STA SPRITES_X_HI01,X
  2835 3B84 9D 51 D8		        STA SPRITES_PTR01,X
  2836 3B87 60			        RTS
  2837
  2838 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2839 				; ref: anim_type_04, hero_type_anim_04
  2840 				; Exploding grenade animation
  2841 3B88			TYPE_ANIM_GRENADE_END ;$373C
  2842 3B88 FE 90 D8		        INC SPRITES_TMP_A01,X
  2843 3B8B A0 00		        LDY #$00     ;#%00000000
  2844
  2845 3B8D B9 85 D8		b3741   LDA SPRITES_TYPE05,Y
  2846 3B90 84 FB		        STY pFB
  2847 3B92 A8			        TAY
  2848 3B93 B9 BC A9		        LDA f2544,Y
  2849 3B96 A4 FB		        LDY pFB
  2850 3B98 29 02		        AND #$02            ;grenade mask
  2851 3B9A F0 41		        BEQ b3793
  2852
  2853 				        ; Collision between hero grenade and enemy?
  2854 3B9C BD 01 D8		        LDA SPRITES_X_HI01,X
  2855 3B9F D9 05 D8		        CMP SPRITES_X_HI05,Y
  2856 3BA2 D0 39		        BNE b3793
  2857 3BA4 BD 11 D8		        LDA SPRITES_X_LO01,X
  2858 3BA7 18			        CLC
  2859 3BA8 69 12		        ADC #$12     ;#%00010010
  2860 3BAA D9 15 D8		        CMP SPRITES_X_LO05,Y
  2861 3BAD 90 2E		        BCC b3793
  2862 3BAF BD 11 D8		        LDA SPRITES_X_LO01,X
  2863 3BB2 38			        SEC
  2864 3BB3 E9 12		        SBC #$12     ;#%00010010
  2865 3BB5 D9 15 D8		        CMP SPRITES_X_LO05,Y
  2866 3BB8 B0 23		        BCS b3793
  2867 3BBA BD 21 D8		        LDA SPRITES_Y01,X
  2868 3BBD 18			        CLC
  2869 3BBE 69 16		        ADC #$16     ;#%00010110
  2870 3BC0 D9 25 D8		        CMP SPRITES_Y05,Y
  2871 3BC3 90 18		        BCC b3793
  2872 3BC5 BD 21 D8		        LDA SPRITES_Y01,X
  2873 3BC8 38			        SEC
  2874 3BC9 E9 16		        SBC #$16     ;#%00010110
  2875 3BCB D9 25 D8		        CMP SPRITES_Y05,Y
  2876 3BCE B0 0D		        BCS b3793
  2877 3BD0 B9 85 D8		        LDA SPRITES_TYPE05,Y
  2878 3BD3 C9 1E		        CMP #$1E            ;anim_type_1E: turret fire
  2879 3BD5 D0 03		        BNE b3790
  2880 3BD7 4C 19 3C		        JMP DESTROY_TURRET
  2881
  2882 3BDA 20 EE 9E		b3790   JSR DIE_ANIM_AND_SCORE
  2883 3BDD C8			b3793   INY
  2884 3BDE C0 0B		        CPY #(TOTAL_MAX_SPRITES-5)
  2885 3BE0 D0 AB		        BNE b3741
  2886
  2887 3BE2 BD 90 D8		        LDA SPRITES_TMP_A01,X
  2888 3BE5 C9 14		        CMP #$14     ;#%00010100
  2889 3BE7 F0 0A		        BEQ b37A9
  2890 3BE9 4A			        LSR
  2891 3BEA 4A			        LSR
  2892 3BEB A8			        TAY
  2893 3BEC B9 14 3C		        LDA FRAME_EXPLOSION,Y
  2894 3BEF 9D 51 D8		        STA SPRITES_PTR01,X
  2895 3BF2 60			        RTS
  2896
  2897 3BF3 A9 00		b37A9   LDA #$00     ;#%00000000
  2898 3BF5 9D 81 D8		        STA SPRITES_TYPE01,X
  2899 3BF8 9D 61 D8		        STA SPRITES_DELTA_X01,X
  2900 3BFB 9D 71 D8		        STA SPRITES_DELTA_Y01,X
  2901 3BFE BD 4F 2C		        LDA ORIG_SPRITE_Y01,X
  2902 3C01 9D 21 D8		        STA SPRITES_Y01,X
  2903 3C04 A9 64		        LDA #$64     ;#%01100100
  2904 3C06 9D 11 D8		        STA SPRITES_X_LO01,X
  2905 3C09 A9 FF		        LDA #$FF     ;#%11111111
  2906 3C0B 9D 01 D8		        STA SPRITES_X_HI01,X
  2907 3C0E A9 FF		        LDA #$FF     ;#%11111111
  2908 3C10 9D 51 D8		        STA SPRITES_PTR01,X
  2909 3C13 60			        RTS		
  2910
  2911 3C14			FRAME_EXPLOSION     ;$37CA
  2912 3C14 AF AE AD AF FF	        .BYTE $AF,$AE,$AD,$AF,$FF		
  2913
  2914 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  2915 				; Destroys the turret
  2916 3C19			DESTROY_TURRET
  2917 3C19 8A			        TXA
  2918 3C1A 48			        PHA
  2919 3C1B 98			        TYA
  2920 3C1C 48			        PHA
  2921 3C1D A9 0A		        LDA #$0A            ;Points scored
  2922 3C1F 20 DC 35		        JSR SCORE_ADD
  2923 3C22 A9 02		        LDA #$02            ;"Turret destroyed" SFX
  2924 				        //JSR SFX_PLAY
  2925 3C24 B9 9F D8		        LDA SPRITES_TMP_B05,Y
  2926 3C27 C9 0A		        CMP #$0A
  2927 				        ;BEQ @+1
  2928 3C29 B9 15 D8		        LDA SPRITES_X_LO05,Y
  2929 3C2C 38			        SEC
  2930 3C2D E9 0E		        SBC #$0E
  2931 3C2F 9D 11 D8		        STA SPRITES_X_LO01,X
  2932 3C32 B9 25 D8		        LDA SPRITES_Y05,Y
  2933 3C35 9D 21 D8		        STA SPRITES_Y01,X
  2934 3C38 A9 0C		        LDA #$0C            ;anim_type_0C: explosion
  2935 3C3A 99 85 D8		        STA SPRITES_TYPE05,Y
  2936 3C3D A9 00		        LDA #$00
  2937 3C3F 99 AA D8		        STA SPRITES_TMP_C05,Y
  2938 3C42 AA			        TAX
  2939 3C43 BD 14 3C		        LDA FRAME_EXPLOSION,X
  2940 3C46 99 55 D8		        STA SPRITES_PTR05,Y
  2941 3C49 A9 08		        LDA #$08            ;orange
  2942 3C4B 99 45 D8		        STA SPRITES_COLOR05,Y
  2943 						
  2944 3C4E A9 18 85 79				mva #$18 pom0
  2945 3C52 A9 04 85 7A				mva #4 pom0a
  2946 3C56 B9 05 D8				lda sprites_x_hi05,y
  2947 3C59 C9 FF				cmp #255
  2948 3C5B D0 08				bne *+10
  2949 3C5D A9 10 85 79				mva #$10 pom0
  2950 3C61 A9 06 85 7A				mva #6 pom0a
  2951 						
  2952 3C65 B9 15 D8		        LDA SPRITES_X_LO05,Y
  2953 3C68 38			        SEC
  2954 3C69 E5 79		        SBC pom0	;#$18
  2955 3C6B 8D F0 04		        STA TMP_SPRITE_X_LO
  2956 3C6E B9 25 D8		        LDA SPRITES_Y05,Y
  2957 3C71 38			        SEC
  2958 3C72 E9 2E		        SBC #$2E
  2959 3C74 8D F1 04		        STA TMP_SPRITE_Y
  2960 3C77 B9 05 D8		        LDA SPRITES_X_HI05,Y
  2961 3C7A 8D F2 04		        STA TMP_SPRITE_X_HI
  2962 3C7D B9 25 D8		        LDA SPRITES_Y05,Y
  2963 3C80 38			        SEC
  2964 3C81 E9 0A		        SBC #$0A
  2965 3C83 99 25 D8		        STA SPRITES_Y05,Y
  2966 3C86 20 4E 39		        JSR j172F
  2967 3C89 A5 FC		        LDA pFC
  2968 3C8B 85 FB		        STA pFB
  2969 3C8D 85 73				sta pom
  2970 3C8F A5 FD		        LDA pFD
  2971 3C91 85 FC		        STA pFC
  2972 3C93 09 20				ora #$20
  2973 3C95 85 74				sta pom+1
  2974 3C97 A5 7A		        LDA pom0a		;#$04            ;Draw left turret destroyed
  2975
  2976 3C99 20 87 A7		        JSR LEVEL_PATCH_TURRET
  2977 3C9C 68			@	    PLA
  2978 3C9D A8			        TAY
  2979 3C9E 68			        PLA
  2980 3C9F AA			        TAX
  2981 3CA0 4C DD 3B		        JMP b3793           ;A grenade could kill more than one enemy at the time.
  2982 				                            ; Continue with the next enemy.
  2983 				/*
  2984 				@	    LDA SPRITES_X_LO05,Y
  2985 				        CLC
  2986 				        ADC #$0E
  2987 				        STA SPRITES_X_LO01,X
  2988 				        LDA SPRITES_Y05,Y
  2989 				        STA SPRITES_Y01,X
  2990 				        LDA #$0C            ;anim_type_0C: explosion
  2991 				        STA SPRITES_TYPE05,Y
  2992 				        LDA #$00
  2993 				        STA SPRITES_TMP_C05,Y
  2994 				        TAX
  2995 				        LDA FRAME_EXPLOSION,X
  2996 				        STA SPRITES_PTR05,Y
  2997 				        LDA #$08     ;orange
  2998 				        STA SPRITES_COLOR05,Y
  2999 				        LDA SPRITES_Y05,Y
  3000 				        SEC
  3001 				        SBC #$0A
  3002 				        STA SPRITES_Y05,Y
  3003 				        LDA #<$459A         ;Turret location in lvl1 lo
  3004 				        STA pFB
  3005 						sta pom
  3006 				        LDA #>$459A         ;Turret location in lvl1 hi
  3007 				        STA pFC
  3008 						ora #$20
  3009 						sta pom+1
  3010 				        LDA #$06            ;Draw right turret destroyed
  3011 				        JSR LEVEL_PATCH_TURRET
  3012 				        JMP @-1  */
  3012
  3013
  3014 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3015 				; Animate explosion
  3016 				; ref: anim_type_0C
  3017 3CA3			TYPE_ANIM_EXPLOSION    ;$388B
  3018 3CA3 FE AA D8		        INC SPRITES_TMP_C05,X
  3019 3CA6 BD AA D8		        LDA SPRITES_TMP_C05,X
  3020 3CA9 C9 14		        CMP #$14     ;#%00010100
  3021 3CAB F0 0A		        BEQ @+
  3022 3CAD 4A			        LSR
  3023 3CAE 4A			        LSR
  3024 3CAF A8			        TAY
  3025 3CB0 B9 14 3C		        LDA FRAME_EXPLOSION,Y
  3026 3CB3 9D 55 D8		        STA SPRITES_PTR05,X
  3027 3CB6 60			        RTS
  3028
  3029 3CB7 A9 00		@	    LDA #$00            ;anim_type_00: spawn soldiers
  3030 3CB9 9D 85 D8		        STA SPRITES_TYPE05,X
  3031 3CBC 9D 65 D8		        STA SPRITES_DELTA_X05,X
  3032 3CBF 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  3033 3CC2 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  3034 3CC5 BD 53 2C		        LDA ORIG_SPRITE_Y05,X
  3035 3CC8 9D 25 D8		        STA SPRITES_Y05,X
  3036 3CCB A9 64		        LDA #$64     ;#%01100100
  3037 3CCD 9D 15 D8		        STA SPRITES_X_LO05,X
  3038 3CD0 A9 FF		        LDA #$FF     ;#%11111111
  3039 3CD2 9D 05 D8		        STA SPRITES_X_HI05,X
  3040 3CD5 A9 FF		        LDA #$FF     ;#%11111111
  3041 3CD7 9D 55 D8		        STA SPRITES_PTR05,X
  3042 3CDA 60			        RTS
  3043
  3044 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3045 3CDB			TRY_THROW_GRENADE               ;$38c3
  3046 3CDB AD 03 05		        LDA IS_HERO_DEAD
  3047 3CDE F0 01		        beq *+3
  3048 3CE0 60					rts	
  3049 3CE1 AD EF 04		        LDA ENEMIES_IN_FORT
  3050 3CE4 D0 05		        BNE @+
  3051 3CE6 AD F4 04		        LDA ANY_ENEMY_IN_MAP
  3052 3CE9 F0 7A		        BEQ _SKIP
  3053 3CEB AD 84 D8		@	    LDA SPRITES_TYPE04
  3054 3CEE D0 75		        BNE _SKIP
  3055 3CF0 AD FF 04		        LDA GRENADES
  3056 3CF3 F0 70		        BEQ _SKIP
  3057 						
  3058 						
  3059 3CF5 A5 80				lda licznik_trig
  3060 3CF7 30 0B				bmi tt2
  3061 3CF9 C9 10				cmp #$10
  3062 3CFB 90 07				bcc tt2
  3063 3CFD A9 80 85 80				mva #128 licznik_trig
  3064 3D01 4C 17 3D				jmp tt1
  3065 = 3D04			tt2		equ *		
  3066 3D04 A5 7D				lda pot0s1
  3067 3D06 C9 1E				cmp #30
  3068 3D08 B0 06				bcs tt0
  3069 3D0A A5 7C				lda pot0s
  3070 3D0C C9 32				cmp #50
  3071 3D0E B0 07				bcs tt1
  3072 = 3D10			tt0		equ *			
  3073 3D10 AD 0F D2				lda skctl
  3074 3D13 29 04				and #4				;dowolny klawisz
  3075 3D15 D0 4E		        BNE _SKIP
  3076 3D17			tt1		
  3077 3D17 AD 10 D8		        LDA SPRITES_X_LO00
  3078 3D1A 8D 14 D8		        STA SPRITES_X_LO04
  3079 3D1D AD 20 D8		        LDA SPRITES_Y00
  3080 3D20 8D 24 D8		        STA SPRITES_Y04
  3081 3D23 AD 00 D8		        LDA SPRITES_X_HI00
  3082 3D26 8D 04 D8		        STA SPRITES_X_HI04
  3083 3D29 A9 00		        LDA #$00     ;#%00000000
  3084 3D2B 8D 64 D8		        STA SPRITES_DELTA_X04
  3085 3D2E A9 FE		        LDA #$FE     ;#%11111110
  3086 3D30 8D 74 D8		        STA SPRITES_DELTA_Y04
  3087 3D33 A9 93		        LDA #$93     ;Grenade (small) frame
  3088 3D35 8D 54 D8		        STA SPRITES_PTR04
  3089 3D38 A9 05		        LDA #$0E-9     ;light blue
  3090 3D3A 8D 44 D8		        STA SPRITES_COLOR04
  3091 3D3D AD 30 D8		        LDA SPRITES_BKG_PRI00
  3092 3D40 8D 34 D8		        STA SPRITES_BKG_PRI04
  3093 3D43 A9 02		        LDA #$02     ;#%00000010
  3094 3D45 8D 84 D8		        STA SPRITES_TYPE04
  3095 3D48 A9 00		        LDA #$00     ;#%00000000
  3096 3D4A 8D 93 D8		        STA SPRITES_TMP_A04
  3097 3D4D 8D E0 04		        STA HERO_ANIM_MOV_IDX
  3098 3D50 A9 A4		        LDA #$A4     ;#%10100100
  3099 3D52 8D 50 D8		        STA SPRITES_PTR00
  3100 3D55 F8			        SED
  3101 3D56 AD FF 04		        LDA GRENADES
  3102 3D59 38			        SEC
  3103 3D5A E9 01		        SBC #$01     ;#%00000001
  3104 3D5C 8D FF 04		        STA GRENADES
  3105 3D5F D8			        CLD
  3106 3D60 20 67 36		        JSR SCREEN_REFRESH_GRENADES
  3107 3D63 A9 01		        LDA #$01     ;Throw grenade SFX
  3108 				        //JSR SFX_PLAY
  3109 3D65 60			_SKIP   RTS
  3110
  3111
  3112
  3113 = 3D66			end_code	equ *
  3114
  3115
  3116
  3117 3D66					org znaki
  3118 8000-A9E4> 00 00 00 00 + 		ins 'main-charset.bin'
  3119 					
  3120 						
  3121 8800					org $8800
  3122 						
  3123 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3124 				; Anim routine for enemies
  3125 8800			ANIM_ENEMIES    ;$24B3
  3126 8800 A2 00		        LDX #$00     ;#%00000000
  3127 8802 8E F4 04		        STX ANY_ENEMY_IN_MAP
  3128
  3129 				        ; If sprite is out of bounds, clean it up
  3130 8805 BD 25 D8		@	    LDA SPRITES_Y05,X
  3131 8808 C9 1E		        CMP #$1E     ;#%00011110
  3132 880A 90 10		        BCC @+
  3133 880C C9 DC		        CMP #$DC	;#$C2     ;#%11000010		przeciwnik dluzej widoczny
  3134 880E B0 0C		        BCS @+
  3135 8810 BD 15 D8		        LDA SPRITES_X_LO05,X
  3136 8813 C9 5B		        CMP #$5B     ;#%01011011
  3137 8815 90 08		        BCC @+1
  3138 8817 BD 05 D8		        LDA SPRITES_X_HI05,X
  3139 881A F0 03		        BEQ @+1
  3140 881C 20 75 98		@	    JSR CLEANUP_SPRITE
  3141
  3142 881F BD 85 D8		@	    LDA SPRITES_TYPE05,X
  3143 8822 0A			        ASL
  3144 8823 A8			        TAY
  3145 8824 B9 3D 88		        LDA TYPE_ANIM_TBL,Y
  3146 8827 85 FB		        STA pFB
  3147 8829 B9 3E 88		        LDA TYPE_ANIM_TBL+1,Y
  3148 882C 85 FC		        STA pFC
  3149 882E EE E7 04		        INC a04E7
  3150 8831 20 3A 88		        JSR JMP_FB
  3151 8834 E8			        INX
  3152 8835 E0 0B		        CPX #TOTAL_MAX_SPRITES-5
  3153 8837 D0 CC		        BNE @-2
  3154
  3155 8839 60			        RTS
  3156
  3157 883A			JMP_FB              ;$24EF
  3158 883A 6C FB 00		        JMP (pFB)
  3159
  3160 				        ; Animation table
  3161 883D			TYPE_ANIM_TBL
  3162 883D EB 8F		        dta a(TYPE_ANIM_SPAWN_SOLDIER)           ;$00
  3163 883F A9 A8		        dta a(TYPE_ANIM_BULLET)                  ;$01
  3164 8841 C6 3A		        dta a(TYPE_ANIM_GRENADE)                 ;$02
  3165 8843 4A 3B		        dta a(TYPE_ANIM_BULLET_END)              ;$03
  3166 8845 88 3B		        dta a(TYPE_ANIM_GRENADE_END)             ;$04
  3167 8847 14 95		        dta a(TYPE_ANIM_SOLDIER)                 ;$05
  3168 8849 48 98		        dta a(TYPE_ANIM_SOLDIER_DIE)             ;$06
  3169 884B D5 92		        dta a(TYPE_ANIM_SOLDIER_BEHIND_SMTH)     ;$07
  3170 884D 4A 92		        dta a(TYPE_ANIM_SOLDIER_BULLET)          ;$08
  3171 884F A0 92		        dta a(TYPE_ANIM_SOLDIER_BULLET_END)      ;$09
  3172 8851 6E 93		        dta a(TYPE_ANIM_SOLDIER_JUMPING)         ;$0A
  3173 8853 D2 91		        dta a(TYPE_ANIM_SOLDIER_GRENADE)         ;$0B
  3174 8855 A3 3C		        dta a(TYPE_ANIM_EXPLOSION)               ;$0C
  3175 8857 F8 8E		        dta a(TYPE_ANIM_MORTAR_ENEMY)            ;$0D
  3176 8859 1E 92		        dta a(TYPE_ANIM_MORTAR_BOMB)             ;$0E
  3177 885B 66 8E		        dta a(TYPE_ANIM_BIKE_IN_BRIDGE)          ;$0F
  3178 885D B8 88		        dta a(TYPE_ANIM_VOID0)                   ;$10
  3179 885F 43 8E		        dta a(TYPE_ANIM_POW_GUARD)               ;$11
  3180 8861 20 8E		        dta a(TYPE_ANIM_POW)                     ;$12
  3181 8863 12 8E		        dta a(TYPE_ANIM_DELAYED_CLEANUP)         ;$13
  3182 8865 F3 8D		        dta a(TYPE_ANIM_POW_FREE)                ;$14
  3183 8867 EE 93		        dta a(TYPE_ANIM_SOLIDER_GO_UP)           ;$15
  3184 8869 94 8D		        dta a(TYPE_ANIM_GRENADE_BOX)             ;$16
  3185 886B 52 8D		        dta a(TYPE_ANIM_SOLDIER_FROM_SIDE_A)     ;$17
  3186 886D DB 8C		        dta a(TYPE_ANIM_SOLDIER_FROM_SIDE_B)     ;$18
  3187 886F 78 8C		        dta a(TYPE_ANIM_19)                      ;$19
  3188 8871 46 8C		        dta a(TYPE_ANIM_BOSS_LVL0)               ;$1A
  3189 8873 FF 94		        dta a(TYPE_ANIM_SOLDIER_IN_FORT)         ;$1B
  3190 8875 98 8B		        dta a(TYPE_ANIM_SOLDIER_IN_TRENCH)       ;$1C
  3191 8877 82 8B		        dta a(TYPE_ANIM_SOLDIER_IN_TRENCH_DIE)   ;$1D
  3192 8879 06 8B		        dta a(TYPE_ANIM_TURRET_FIRE)             ;$1E
  3193 887B 92 92		        dta a(TYPE_ANIM_TURRET_FIRE_END)         ;$1F
  3194 887D 46 8A		        dta a(TYPE_ANIM_BAZOOKA_ENEMY)           ;$20
  3195 887F 92 92		        dta a(TYPE_ANIM_TURRET_FIRE_END)         ;$21
  3196 8881 FF 89		        dta a(TYPE_ANIM_22)                      ;$22
  3197 8883 B8 89		        dta a(TYPE_ANIM_VOID1)                   ;$23
  3198 8885 B9 89		        dta a(TYPE_ANIM_SOLDIER_JUMPING_FROM_TRUCK)  ;$24
  3199 8887 97 89		        dta a(TYPE_ANIM_CART_UP_LVL1)            ;$25
  3200 8889 1B 89		        dta a(TYPE_ANIM_26)                      ;$26
  3201 888B 12 89		        dta a(TYPE_ANIM_TOWER_FIRE_LVL3)         ;$27
  3202 888D B9 88		        dta a(TYPE_ANIM_28)                      ;$28
  3203
  3204
  3205 				        ; Points to score for each sprite type killed
  3206 888F			POINTS_TBL      ;$256D
  3207 888F 00 00 00 00 00 03 +         .BYTE $00,$00,$00,$00,$00,$03,$00,$03
  3208 8897 00 00 03 00 00 05 +         .BYTE $00,$00,$03,$00,$00,$05,$00,$00
  3209 889F 00 0A 00 00 00 03 +         .BYTE $00,$0A,$00,$00,$00,$03,$00,$03
  3210 88A7 03 03 14 03 02 00 +         .BYTE $03,$03,$14,$03,$02,$00,$0A,$00
  3211 88AF 05 00 00 0A 0A 00 +         .BYTE $05,$00,$00,$0A,$0A,$00,$00,$05
  3212 88B7 05			        .BYTE $05
  3213
  3214 88B8			f2596   ;Label used in self-modifying code
  3215 				        ; By default points to incorrect place.
  3216
  3217 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3218 				; ref: anim_type_10
  3219 88B8			TYPE_ANIM_VOID0      ;$2596
  3220 88B8 60			        RTS
  3221
  3222 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3223 				; ref: anim_type_28
  3224 				; Only referenced from ACTION_1A, which is only used in LVL2.
  3225 				; FIXME: remove me
  3226 88B9			TYPE_ANIM_28        ;$2597
  3227 88B9 FE AA D8		        INC SPRITES_TMP_C05,X
  3228 88BC AD EA 04		        LDA a04EA
  3229 88BF F0 25		        BEQ @+2
  3230 88C1 BD AA D8		        LDA SPRITES_TMP_C05,X
  3231 88C4 29 1F		        AND #$1F     ;#%00011111
  3232 88C6 C9 03		        CMP #$03     ;#%00000011
  3233 88C8 D0 05		        BNE @+
  3234 88CA A9 CF		        LDA #$CF     ;Mortar guy
  3235 88CC 9D 55 D8		        STA SPRITES_PTR05,X
  3236 88CF C9 0F		@	    CMP #$0F     ;#%00001111
  3237 88D1 D0 05		        BNE @+
  3238
  3239 88D3 A9 CE		        LDA #$CE
  3240 88D5 9D 55 D8		        STA SPRITES_PTR05,X
  3241 88D8 C9 14		@	    CMP #$14     ;#%00010100
  3242 88DA D0 0A		        BNE @+
  3243
  3244 88DC A9 CD		        LDA #$CD
  3245 88DE 9D 55 D8		        STA SPRITES_PTR05,X
  3246 88E1 A9 00		        LDA #$00     ;#%00000000
  3247 88E3 8D EA 04		        STA a04EA
  3248
  3249 88E6 BD AA D8		@	    LDA SPRITES_TMP_C05,X
  3250 88E9 29 3F		        AND #$3F     ;#%00111111
  3251 88EB F0 01		        BEQ @+
  3252 88ED 60			        RTS
  3253
  3254 88EE 20 F2 95		@	    JSR THROW_GRENADE
  3255 88F1 A9 01		        LDA #$01
  3256 88F3 8D EA 04		        STA a04EA
  3257 88F6 C0 FF		        CPY #$FF
  3258 88F8 F0 17		        BEQ @+
  3259
  3260 88FA A9 D0		        LDA #$D0        ;bomb frame
  3261 88FC 99 55 D8		        STA SPRITES_PTR05,Y
  3262 88FF A9 00		        LDA #$00        ;black
  3263 8901 99 45 D8		        STA SPRITES_COLOR05,Y
  3264 8904 A9 00		        LDA #$00
  3265 8906 99 AA D8		        STA SPRITES_TMP_C05,Y
  3266 8909 99 35 D8		        STA SPRITES_BKG_PRI05,Y
  3267 890C A9 0E		        LDA #$0E        ;anim_type_0E: bomb from mortar animation
  3268 890E 99 85 D8		        STA SPRITES_TYPE05,Y
  3269 8911 60			@	    RTS
  3270
  3271 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3272 				; ref: anim_type_27
  3273 				; The animation of the tower in lvl3 with a guy firing at the hero.
  3274 8912			TYPE_ANIM_TOWER_FIRE_LVL3   ;$25F0
  3275 8912 FE AA D8		        INC SPRITES_TMP_C05,X
  3276 8915 20 1F 93		        JSR SOLIDER_IN_TRENCH_AIM_TO_HERO
  3277 8918 4C BB 96		        JMP j33D0
  3278
  3279 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3280 				; ref: anim_type_26
  3281 				; Unused, since it is only referenced from ACTION_17 and ACTION_18, only used
  3282 				; in LVL2.
  3283 				; FIXME: remove me
  3284 891B			TYPE_ANIM_26            ;$25F9
  3285 891B FE AA D8		        INC SPRITES_TMP_C05,X
  3286 891E BD AA D8		        LDA SPRITES_TMP_C05,X
  3287 8921 29 7F		        AND #$7F     ;#%01111111
  3288 8923 D0 05		        BNE @+
  3289
  3290 8925 A9 FF		        LDA #$FF
  3291 8927 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  3292
  3293 892A BD 75 D8		@	    LDA SPRITES_DELTA_Y05,X
  3294 892D F0 0D		        BEQ @+
  3295 892F BD AA D8		        LDA SPRITES_TMP_C05,X
  3296 8932 29 1F		        AND #$1F     ;#%00011111
  3297 8934 C9 0F		        CMP #$0F     ;#%00001111
  3298 8936 F0 0B		        BEQ @+2
  3299 8938 C9 1E		        CMP #$1E     ;#%00011110
  3300 893A F0 01		        BEQ @+1
  3301 893C 60			@	    RTS
  3302
  3303 893D A9 00		@	    LDA #$00
  3304 893F 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  3305 8942 60			        RTS
  3306
  3307 8943 A9 01		@	    LDA #$01
  3308 8945 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  3309
  3310 				        ; Find empty seat
  3311 8948 A0 00		        LDY #$00
  3312 894A B9 85 D8		@	    LDA SPRITES_TYPE05,Y
  3313 894D F0 06		        BEQ @+
  3314 894F C8			        INY
  3315 8950 C0 0B		        CPY #(TOTAL_MAX_SPRITES-5)
  3316 8952 D0 F6		        BNE @-
  3317 8954 60			        RTS
  3318
  3319 8955 BD 15 D8		@	    LDA SPRITES_X_LO05,X
  3320 8958 99 15 D8		        STA SPRITES_X_LO05,Y
  3321 895B BD 25 D8		        LDA SPRITES_Y05,X
  3322 895E 18			        CLC
  3323 895F 69 10		        ADC #$10
  3324 8961 99 25 D8		        STA SPRITES_Y05,Y
  3325 8964 A9 05		        LDA #$05            ;anim_type_05: regular soldier
  3326 8966 99 85 D8		        STA SPRITES_TYPE05,Y
  3327 8969 A9 0B		        LDA #$0B     ;dark grey
  3328 896B 99 45 D8		        STA SPRITES_COLOR05,Y
  3329 896E BD 05 D8		        LDA SPRITES_X_HI05,X
  3330 8971 99 05 D8		        STA SPRITES_X_HI05,Y
  3331 8974 A9 00		        LDA #$00
  3332 8976 99 AA D8		        STA SPRITES_TMP_C05,Y
  3333 8979 99 35 D8		        STA SPRITES_BKG_PRI05,Y
  3334 897C 8A			        TXA
  3335 897D 48			        PHA
  3336 897E BD 9F D8		        LDA SPRITES_TMP_B05,X
  3337 8981 99 9F D8		        STA SPRITES_TMP_B05,Y
  3338 8984 99 94 D8		        STA SPRITES_TMP_A05,Y
  3339 8987 AA			        TAX
  3340 8988 BD D2 95		        LDA DELTA_X_TBL,X
  3341 898B 99 65 D8		        STA SPRITES_DELTA_X05,Y
  3342 898E BD E2 95		        LDA DELTA_Y_TBL,X
  3343 8991 99 75 D8		        STA SPRITES_DELTA_Y05,Y
  3344 8994 68			        PLA
  3345 8995 AA			        TAX
  3346 8996 60			        RTS
  3347
  3348 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3349 				; ref: anim_type_25
  3350 				; The animation for the "cart" that appears going up at the very beginning of
  3351 				; lvl1
  3352 8997			TYPE_ANIM_CART_UP_LVL1  ;$2675
  3353 8997 FE AA D8		        INC SPRITES_TMP_C05,X
  3354 899A 20 37 94		        JSR s3128
  3355 899D 20 BB 96		        JSR j33D0
  3356 89A0 BD AA D8		        LDA SPRITES_TMP_C05,X
  3357 89A3 C9 46		        CMP #$46
  3358 89A5 F0 05		        BEQ @+
  3359 89A7 C9 8C		        CMP #$8C
  3360 89A9 F0 07		        BEQ @+1
  3361 89AB 60			        RTS
  3362
  3363 89AC A9 FF		@	    LDA #$FF
  3364 89AE 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  3365 89B1 60			        RTS
  3366
  3367 89B2 A9 FE		@	    LDA #$FE
  3368 89B4 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  3369 89B7 60			        RTS
  3370
  3371 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3372 				; ref: anim_type_23
  3373 89B8			TYPE_ANIM_VOID1     ;$2696
  3374 89B8 60			        RTS
  3375
  3376 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3377 				; ref: anim_type_24
  3378 				; Truck from right that appears on lvl3 contains soldiers.
  3379 				; This is the animation for those soldiers.
  3380 89B9			TYPE_ANIM_SOLDIER_JUMPING_FROM_TRUCK    ;$2697
  3381 89B9 FE AA D8		        INC SPRITES_TMP_C05,X
  3382 89BC BD AA D8		        LDA SPRITES_TMP_C05,X
  3383 89BF 29 3F		        AND #$3F     ;#%00111111
  3384 89C1 D0 F5		        BNE TYPE_ANIM_VOID1
  3385
  3386 				        ; Find empty seat
  3387 89C3 A0 00		        LDY #$00
  3388 89C5 B9 85 D8		@	    LDA SPRITES_TYPE05,Y
  3389 89C8 F0 06		        BEQ @+
  3390 89CA C8			        INY
  3391 89CB C0 0B		        CPY #(TOTAL_MAX_SPRITES-5)
  3392 89CD D0 F6		        BNE @-
  3393 89CF 60			        RTS
  3394
  3395 				        ; Create a anim type $0A: jumping soldier
  3396
  3397 89D0 BD 15 D8		@	    LDA SPRITES_X_LO05,X
  3398 89D3 18			        CLC
  3399 89D4 69 0A		        ADC #$0A
  3400 89D6 99 15 D8		        STA SPRITES_X_LO05,Y
  3401 89D9 BD 25 D8		        LDA SPRITES_Y05,X
  3402 89DC 99 25 D8		        STA SPRITES_Y05,Y
  3403 89DF BD 05 D8		        LDA SPRITES_X_HI05,X
  3404 89E2 99 05 D8		        STA SPRITES_X_HI05,Y
  3405 89E5 A9 0A		        LDA #$0A            ;anim_type_0A: jumping soldier
  3406 89E7 99 85 D8		        STA SPRITES_TYPE05,Y
  3407 89EA A9 08		        LDA #$08            ;dark grey
  3408 89EC 99 45 D8		        STA SPRITES_COLOR05,Y
  3409 89EF A9 1D		        LDA #$1D
  3410 89F1 99 AA D8		        STA SPRITES_TMP_C05,Y
  3411 89F4 A9 00		        LDA #$00
  3412 89F6 99 35 D8		        STA SPRITES_BKG_PRI05,Y
  3413 89F9 A9 01		        LDA #$01
  3414 89FB 99 65 D8		        STA SPRITES_DELTA_X05,Y
  3415 89FE 60			        RTS
  3416
  3417 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3418 				; ref: anim_type_22
  3419 89FF			TYPE_ANIM_22        ;$26DD
  3420 89FF FE AA D8		        INC SPRITES_TMP_C05,X
  3421 8A02 BC 94 D8		        LDY SPRITES_TMP_A05,X
  3422 8A05 BD AA D8		        LDA SPRITES_TMP_C05,X
  3423 8A08 29 0F		        AND #$0F            ;#%00001111
  3424 8A0A D0 09		        BNE @+            ;FIXME: probably it should say _L01 instead
  3425
  3426 8A0C FE 25 D8		        INC SPRITES_Y05,X
  3427 8A0F BD 25 D8		        LDA SPRITES_Y05,X
  3428 8A12 99 25 D8		        STA SPRITES_Y05,Y
  3429 8A15 C9 10		@	    CMP #$10
  3430 8A17 D0 09		        BNE @+
  3431
  3432 8A19 DE 25 D8		        DEC SPRITES_Y05,X
  3433 8A1C BD 25 D8		        LDA SPRITES_Y05,X
  3434 8A1F 99 25 D8		        STA SPRITES_Y05,Y
  3435 8A22 60			@	    RTS
  3436
  3437
  3438 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3439 				; ref: anim_type_unk
  3440 				; Seems like an unused animation
  3441 8A23			TYPE_ANIM_UNUSED0
  3442 8A23 FE AA D8		        INC SPRITES_TMP_C05,X
  3443 8A26 BD AA D8		        LDA SPRITES_TMP_C05,X
  3444 8A29 C9 3C		        CMP #$3C     ;#%00111100
  3445 8A2B F0 01		        BEQ @+
  3446 8A2D 60			        RTS
  3447
  3448 8A2E A9 0C		@	    LDA #$0C            ;anim_type_0C: explosion
  3449 8A30 9D 85 D8		        STA SPRITES_TYPE05,X
  3450 8A33 A9 00		        LDA #$00
  3451 8A35 9D AA D8		        STA SPRITES_TMP_C05,X
  3452 8A38 9D 65 D8		        STA SPRITES_DELTA_X05,X
  3453 8A3B 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  3454 8A3E A8			        TAY
  3455 8A3F B9 60 3B		        LDA FRAME_BULLET_END,Y
  3456 8A42 9D 55 D8		        STA SPRITES_PTR05,X
  3457 8A45 60			        RTS
  3458
  3459 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3460 				; ref: anim_type_20
  3461 				; Animation for the guys that fire the bazooka
  3462 8A46			TYPE_ANIM_BAZOOKA_ENEMY     ;$2724
  3463 8A46 FE AA D8		        INC SPRITES_TMP_C05,X
  3464 8A49 BD AA D8		        LDA SPRITES_TMP_C05,X
  3465 8A4C 29 07		        AND #$07     ;#%00000111
  3466 8A4E D0 1E		        BNE @+
  3467 8A50 BD AA D8		        LDA SPRITES_TMP_C05,X
  3468 8A53 29 18		        AND #$18     ;#%00011000
  3469 8A55 4A			        LSR 
  3470 8A56 4A			        LSR 
  3471 8A57 4A			        LSR 
  3472 8A58 A8			        TAY
  3473 8A59 B9 02 8B		        LDA FRAME_BAZOOKA_GUY,Y
  3474 8A5C 9D 55 D8		        STA SPRITES_PTR05,X
  3475 8A5F BC 9F D8		        LDY SPRITES_TMP_B05,X
  3476 8A62 B9 D2 95		        LDA DELTA_X_TBL,Y
  3477 8A65 9D 65 D8		        STA SPRITES_DELTA_X05,X
  3478 8A68 B9 E2 95		        LDA DELTA_Y_TBL,Y
  3479 8A6B 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  3480 8A6E BD AA D8		@	    LDA SPRITES_TMP_C05,X
  3481 8A71 29 1F		        AND #$1F     ;#%00011111
  3482 8A73 F0 01		        BEQ @+1
  3483 8A75 60			@	    RTS
  3484
  3485 8A76 AD 20 D8		@	    LDA SPRITES_Y00
  3486 8A79 DD 25 D8		        CMP SPRITES_Y05,X
  3487 8A7C 90 F7		        BCC @-1
  3488
  3489 				        ; Find empty seat
  3490 8A7E A0 00		        LDY #$00
  3491 8A80 B9 85 D8		@	    LDA SPRITES_TYPE05,Y
  3492 8A83 F0 06		        BEQ @+
  3493 8A85 C8			        INY
  3494 8A86 C0 0B		        CPY #(TOTAL_MAX_SPRITES-5)
  3495 8A88 D0 F6		        BNE @-
  3496 8A8A 60			        RTS
  3497
  3498 8A8B A9 00		@	    LDA #$00
  3499 8A8D 9D 65 D8		        STA SPRITES_DELTA_X05,X
  3500 8A90 9D 65 D8		        STA SPRITES_DELTA_X05,X
  3501 8A93 A9 E8		        LDA #$E8            ;Frame Bazooka guy #3
  3502 8A95 9D 55 D8		        STA SPRITES_PTR05,X
  3503 8A98 BD 15 D8		        LDA SPRITES_X_LO05,X
  3504 8A9B 99 15 D8		        STA SPRITES_X_LO05,Y
  3505 8A9E BD 25 D8		        LDA SPRITES_Y05,X
  3506 8AA1 99 25 D8		        STA SPRITES_Y05,Y
  3507 8AA4 A9 21		        LDA #$21            ;anim_type_21: turret fire end
  3508 8AA6 99 85 D8		        STA SPRITES_TYPE05,Y
  3509 8AA9 A9 01		        LDA #$01            ;white
  3510 8AAB 99 45 D8		        STA SPRITES_COLOR05,Y
  3511 8AAE A9 EA		        LDA #$EA            ;Frame bazooka left-down
  3512 8AB0 99 55 D8		        STA SPRITES_PTR05,Y
  3513 8AB3 BD 05 D8		        LDA SPRITES_X_HI05,X
  3514 8AB6 99 05 D8		        STA SPRITES_X_HI05,Y
  3515 8AB9 A9 00		        LDA #$00
  3516 8ABB 99 AA D8		        STA SPRITES_TMP_C05,Y
  3517 8ABE 99 35 D8		        STA SPRITES_BKG_PRI05,Y
  3518 8AC1 A9 02		        LDA #$02
  3519 8AC3 99 75 D8		        STA SPRITES_DELTA_Y05,Y
  3520 8AC6 BD 05 D8		        LDA SPRITES_X_HI05,X
  3521 8AC9 D0 21		        BNE @+
  3522 8ACB BD 15 D8		        LDA SPRITES_X_LO05,X
  3523 8ACE 38			        SEC
  3524 8ACF E9 1E		        SBC #$1E
  3525 8AD1 CD 10 D8		        CMP SPRITES_X_LO00
  3526 8AD4 B0 16		        BCS @+
  3527 8AD6 BD 15 D8		        LDA SPRITES_X_LO05,X
  3528 8AD9 18			        CLC
  3529 8ADA 69 1E		        ADC #$1E
  3530 8ADC CD 10 D8		        CMP SPRITES_X_LO00
  3531 8ADF 90 16		        BCC @+1
  3532 8AE1 A9 00		        LDA #$00
  3533 8AE3 99 65 D8		        STA SPRITES_DELTA_X05,Y
  3534 8AE6 A9 E9		        LDA #$E9            ;Frame bazooka down
  3535 8AE8 99 55 D8		        STA SPRITES_PTR05,Y
  3536 8AEB 60			        RTS
  3537
  3538 8AEC A9 FE		@	    LDA #$FE
  3539 8AEE 99 65 D8		        STA SPRITES_DELTA_X05,Y
  3540 8AF1 A9 EA		        LDA #$EA            ;Frame bazooka left-down
  3541 8AF3 99 55 D8		        STA SPRITES_PTR05,Y
  3542 8AF6 60			        RTS
  3543
  3544 8AF7 A9 02		@	    LDA #$02
  3545 8AF9 99 65 D8		        STA SPRITES_DELTA_X05,Y
  3546 8AFC A9 EB		        LDA #$EB            ;Frame bazooka right-down
  3547 8AFE 99 55 D8		        STA SPRITES_PTR05,Y
  3548 8B01 60			        RTS
  3549
  3550 8B02			FRAME_BAZOOKA_GUY       ;$27E0
  3551 8B02 E5 E6 E7 E6		        .BYTE $E5,$E6,$E7,$E6
  3552
  3553 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3554 				; ref: anim_type_1E
  3555 				; Turrets are the small houses that can be destroyed and appear on lvl1
  3556 8B06			TYPE_ANIM_TURRET_FIRE   ;$27E4
  3557 8B06 FE AA D8		        INC SPRITES_TMP_C05,X
  3558 8B09 BD AA D8		        LDA SPRITES_TMP_C05,X
  3559 8B0C 29 1F		        AND #$1F
  3560 8B0E F0 01		        BEQ @+   
  3561 8B10 60			        RTS
  3562
  3563 8B11 AD 20 D8		@	    LDA SPRITES_Y00
  3564 8B14 DD 25 D8		        CMP SPRITES_Y05,X
  3565 8B17 90 0C		        BCC @+1
  3566
  3567 				        ; Find empty seat
  3568 8B19 A0 00		        LDY #$00
  3569 8B1B B9 85 D8		@	    LDA SPRITES_TYPE05,Y
  3570 8B1E F0 06		        BEQ @+1
  3571 8B20 C8			        INY
  3572 8B21 C0 0B		        CPY #(TOTAL_MAX_SPRITES-5)
  3573 8B23 D0 F6		        BNE @-
  3574
  3575 8B25 60			@	    RTS
  3576
  3577 8B26 BD 15 D8		@	    LDA SPRITES_X_LO05,X
  3578 8B29 99 15 D8		        STA SPRITES_X_LO05,Y
  3579 8B2C BD 25 D8		        LDA SPRITES_Y05,X
  3580 8B2F 99 25 D8		        STA SPRITES_Y05,Y
  3581 8B32 A9 1F		        LDA #$1F            ;anim_type_1F: turret fire end
  3582 8B34 99 85 D8		        STA SPRITES_TYPE05,Y
  3583 8B37 A9 00		        LDA #$00            ;black
  3584 8B39 99 45 D8		        STA SPRITES_COLOR05,Y
  3585 8B3C A9 D2		        LDA #$D2            ;bullet frame
  3586 8B3E 99 55 D8		        STA SPRITES_PTR05,Y
  3587 8B41 BD 05 D8		        LDA SPRITES_X_HI05,X
  3588 8B44 99 05 D8		        STA SPRITES_X_HI05,Y
  3589 8B47 A9 00		        LDA #$00
  3590 8B49 99 AA D8		        STA SPRITES_TMP_C05,Y
  3591 8B4C 99 35 D8		        STA SPRITES_BKG_PRI05,Y
  3592 8B4F A9 01		        LDA #$01
  3593 8B51 99 75 D8		        STA SPRITES_DELTA_Y05,Y
  3594 8B54 B9 25 D8		        LDA SPRITES_Y05,Y
  3595 8B57 18			        CLC
  3596 8B58 69 06		        ADC #$06
  3597 8B5A 99 25 D8		        STA SPRITES_Y05,Y
  3598 8B5D BD 9F D8		        LDA SPRITES_TMP_B05,X
  3599 8B60 C9 06		        CMP #$06
  3600 8B62 F0 0F		        BEQ @+
  3601 8B64 A9 FE		        LDA #$FE
  3602 8B66 99 65 D8		        STA SPRITES_DELTA_X05,Y
  3603 8B69 B9 15 D8		        LDA SPRITES_X_LO05,Y
  3604 8B6C 38			        SEC
  3605 8B6D E9 08		        SBC #$08
  3606 8B6F 99 15 D8		        STA SPRITES_X_LO05,Y
  3607 8B72 60			        RTS
  3608
  3609 8B73 A9 02		@	    LDA #$02
  3610 8B75 99 65 D8		        STA SPRITES_DELTA_X05,Y
  3611 8B78 B9 15 D8		        LDA SPRITES_X_LO05,Y
  3612 8B7B 18			        CLC
  3613 8B7C 69 08		        ADC #$08
  3614 8B7E 99 15 D8		        STA SPRITES_X_LO05,Y
  3615 8B81 60			        RTS
  3616
  3617 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3618 				; ref: anim_type_1D
  3619 				; Found in lvl1 (might work other levels as well).
  3620 				; Performs the "sprite in trench" die animation and then cleanup.
  3621 8B82			TYPE_ANIM_SOLDIER_IN_TRENCH_DIE     ;$2860
  3622 8B82 FE AA D8		        INC SPRITES_TMP_C05,X
  3623 8B85 BD AA D8		        LDA SPRITES_TMP_C05,X
  3624 8B88 C9 0A		        CMP #$0A     ;#%00001010
  3625 8B8A F0 05		        BEQ @+
  3626 8B8C C9 14		        CMP #$14     ;#%00010100
  3627 8B8E F0 05		        BEQ @+1
  3628 8B90 60			        RTS
  3629
  3630 8B91 FE 55 D8		@	    INC SPRITES_PTR05,X
  3631 8B94 60			        RTS
  3632
  3633 8B95 4C 75 98		@	    JMP CLEANUP_SPRITE
  3634
  3635 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3636 				; ref: anim_type_1C
  3637 8B98			TYPE_ANIM_SOLDIER_IN_TRENCH     ;$2876
  3638 8B98 FE AA D8		        INC SPRITES_TMP_C05,X
  3639 8B9B BD AA D8		        LDA SPRITES_TMP_C05,X
  3640 8B9E 29 70		        AND #$70     ;#%01110000
  3641 8BA0 4A			        LSR 
  3642 8BA1 4A			        LSR 
  3643 8BA2 4A			        LSR 
  3644 8BA3 4A			        LSR 
  3645 8BA4 A8			        TAY
  3646 8BA5 B9 BD 8B		        LDA _TRENCH_FRAMES,Y
  3647 8BA8 9D 55 D8		        STA SPRITES_PTR05,X
  3648 8BAB C9 C8		        CMP #$C8            ;soldier in trench heading south
  3649 8BAD F0 01		        BEQ @+
  3650 8BAF 60			        RTS
  3651
  3652 8BB0 BD 25 D8		@	    LDA SPRITES_Y05,X
  3653 8BB3 C9 50		        CMP #$50
  3654 8BB5 90 03		        BCC @+
  3655 8BB7 20 1F 93		        JSR SOLIDER_IN_TRENCH_AIM_TO_HERO
  3656 8BBA 4C BB 96		@	    JMP j33D0
  3657
  3658 8BBD			_TRENCH_FRAMES
  3659 8BBD EC ED C8 C8 C8 ED +         .BYTE $EC,$ED,$C8,$C8,$C8,$ED,$EC,$EC
  3660
  3661 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3662 				; Valid only for enemies: sprites 5-15
  3663 8BC5			UPDATE_ENEMY_PATH     ;$28A3
  3664 				        ; X
  3665 8BC5 BD 15 D8		        LDA SPRITES_X_LO05,X
  3666 8BC8 18			        CLC
  3667 8BC9 7D 65 D8		        ADC SPRITES_DELTA_X05,X
  3668 8BCC 18			        CLC
  3669 8BCD 7D 65 D8		        ADC SPRITES_DELTA_X05,X
  3670 8BD0 18			        CLC
  3671 8BD1 7D 65 D8		        ADC SPRITES_DELTA_X05,X
  3672 8BD4 18			        CLC
  3673 8BD5 7D 65 D8		        ADC SPRITES_DELTA_X05,X
  3674 8BD8 8D F0 04		        STA TMP_SPRITE_X_LO
  3675
  3676 				        ; Y
  3677 8BDB BD 25 D8		        LDA SPRITES_Y05,X
  3678 8BDE 18			        CLC
  3679 8BDF 7D 75 D8		        ADC SPRITES_DELTA_Y05,X
  3680 8BE2 18			        CLC
  3681 8BE3 7D 75 D8		        ADC SPRITES_DELTA_Y05,X
  3682 8BE6 18			        CLC
  3683 8BE7 7D 75 D8		        ADC SPRITES_DELTA_Y05,X
  3684 8BEA 18			        CLC
  3685 8BEB 7D 75 D8		        ADC SPRITES_DELTA_Y05,X
  3686 8BEE 8D F1 04		        STA TMP_SPRITE_Y
  3687
  3688 8BF1 BD 05 D8		        LDA SPRITES_X_HI05,X
  3689 8BF4 8D F2 04		        STA TMP_SPRITE_X_HI
  3690 8BF7 4C 4E 39		        JMP j172F
  3691
  3692 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3693 8BFA			s28D8		
  3694 				        ; Get charset mask info
  3695 8BFA A0 00		        LDY #$00
  3696 8BFC B1 FC		        LDA (pFC),Y			;znak pod bohaterem
  3697 8BFE A8			        TAY
  3698 8BFF B1 2A		        LDA (p2A),Y
  3699 8C01 29 01		        AND #$01     ;#%00000001
  3700 8C03 D0 06		        BNE @+
  3701
  3702 8C05 B1 2A		        LDA (p2A),Y
  3703 8C07 29 04		        AND #$04     ;#%00000100
  3704 8C09 F0 24		        BEQ @+1
  3705
  3706 8C0B 20 94 98		@	    JSR GET_RANDOM
  3707 8C0E 29 07		        AND #$07     ;#%00000111
  3708 8C10 38			        SEC
  3709 8C11 E9 04		        SBC #$04     ;#%00000100
  3710 8C13 18			        CLC
  3711 8C14 7D 94 D8		        ADC SPRITES_TMP_A05,X
  3712 8C17 18			        CLC
  3713 8C18 69 08		        ADC #$08     ;#%00001000
  3714 8C1A 29 0F		        AND #$0F     ;#%00001111
  3715 8C1C 9D 94 D8		        STA SPRITES_TMP_A05,X
  3716 8C1F 9D 9F D8		        STA SPRITES_TMP_B05,X
  3717 8C22 A8			        TAY
  3718 8C23 B9 D2 95		        LDA DELTA_X_TBL,Y
  3719 8C26 9D 65 D8		        STA SPRITES_DELTA_X05,X
  3720 8C29 B9 E2 95		        LDA DELTA_Y_TBL,Y
  3721 8C2C 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  3722 8C2F 60			@	    RTS
  3723
  3724 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3725 8C30			UPDATE_ENEMY_BKG_PRI    ;$290E		
  3726 				        ; Get charset mask info
  3727 8C30 A0 00		        LDY #$00
  3728 8C32 B1 FC		        LDA (pFC),Y			;znak pod bohaterem
  3729 8C34 A8			        TAY
  3730 				        
  3731 8C35 A9 00		        LDA #$00
  3732 8C37 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  3733
  3734 8C3A B1 2A		        LDA (p2A),Y
  3735 8C3C 29 02		        AND #$02     ;#%00000010
  3736 8C3E F0 05		        BEQ @+
  3737
  3738 8C40 A9 FF		        LDA #$FF
  3739 8C42 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  3740 8C45 60			@	    RTS
  3741
  3742 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3743 				; ref: anim_type_1A
  3744 				; Animation for Level 1 Boss
  3745 8C46			TYPE_ANIM_BOSS_LVL0     ;$2924
  3746 8C46 20 C5 8B		        JSR UPDATE_ENEMY_PATH
  3747 8C49 20 FA 8B		        JSR s28D8
  3748 8C4C 20 30 8C		        JSR UPDATE_ENEMY_BKG_PRI
  3749 8C4F BD 65 D8		        LDA SPRITES_DELTA_X05,X
  3750 8C52 10 10		        BPL @+
  3751 8C54 AD 0A 04		        LDA GAME_TICK
  3752 8C57 29 08		        AND #$08     ;#%00001000
  3753 8C59 4A			        LSR 
  3754 8C5A 4A			        LSR 
  3755 8C5B 4A			        LSR 
  3756 8C5C A8			        TAY
  3757 8C5D B9 76 8C		        LDA FRAME_BOSS1_LEFT,Y
  3758 8C60 9D 55 D8		        STA SPRITES_PTR05,X
  3759 8C63 60			        RTS
  3760
  3761 8C64 AD 0A 04		@	    LDA GAME_TICK
  3762 8C67 29 08		        AND #$08     ;#%00001000
  3763 8C69 4A			        LSR 
  3764 8C6A 4A			        LSR 
  3765 8C6B 4A			        LSR 
  3766 8C6C A8			        TAY
  3767 8C6D B9 74 8C		        LDA FRAME_BOSS1_RIGHT,Y
  3768 8C70 9D 55 D8		        STA SPRITES_PTR05,X
  3769 8C73 60			        RTS
  3770
  3771 8C74			FRAME_BOSS1_RIGHT       ;$2952
  3772 8C74 B9 BA		        .BYTE $B9,$BA
  3773 8C76			FRAME_BOSS1_LEFT        ;$2954
  3774 8C76 EF F0		        .BYTE $EF,$F0
  3775
  3776 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3777 				; ref: anim_type_19
  3778 8C78			TYPE_ANIM_19        ;$2956
  3779 8C78 FE AA D8		        INC SPRITES_TMP_C05,X
  3780 8C7B BD 65 D8		        LDA SPRITES_DELTA_X05,X
  3781 8C7E 1D 75 D8		        ORA SPRITES_DELTA_Y05,X
  3782 8C81 F0 07		        BEQ @+
  3783 8C83 BD AA D8		        LDA SPRITES_TMP_C05,X
  3784 8C86 C9 64		        CMP #$64
  3785 8C88 D0 33		        BNE @+4
  3786
  3787 8C8A A9 00		@	    LDA #$00
  3788 8C8C 9D 65 D8		        STA SPRITES_DELTA_X05,X
  3789 8C8F 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  3790 8C92 BD AA D8		        LDA SPRITES_TMP_C05,X
  3791 8C95 C9 C8		        CMP #$C8
  3792 8C97 B0 17		        BCS @+2
  3793 8C99 29 0F		        AND #$0F     ;#%00001111
  3794 8C9B F0 05		        BEQ @+
  3795 8C9D C9 08		        CMP #$08     ;#%00001000
  3796 8C9F F0 07		        BEQ @+1
  3797 8CA1 60			        RTS
  3798
  3799 8CA2 A9 E3		@	    LDA #$E3    ; soldier throw grenade #1-frame
  3800 8CA4 9D 55 D8		        STA SPRITES_PTR05,X
  3801 8CA7 60			        RTS
  3802
  3803 8CA8 A9 E4		@	    LDA #$E4    ; soldier throw grenade #2-frame
  3804 8CAA 9D 55 D8		        STA SPRITES_PTR05,X
  3805 8CAD 4C F2 95		        JMP THROW_GRENADE
  3806
  3807 8CB0 A9 04		@	    LDA #$04
  3808 8CB2 9D 94 D8		        STA SPRITES_TMP_A05,X
  3809 8CB5 9D 9F D8		        STA SPRITES_TMP_B05,X
  3810 8CB8 A9 01		        LDA #$01
  3811 8CBA 9D 65 D8		        STA SPRITES_DELTA_X05,X
  3812 8CBD BD 9F D8		@	    LDA SPRITES_TMP_B05,X
  3813 8CC0 29 FE		        AND #$FE     ;#%11111110
  3814 8CC2 A8			        TAY
  3815 8CC3 B9 15 39		        LDA SOLDIER_ANIM_FRAMES,Y
  3816 8CC6 85 FB		        STA pFB
  3817 8CC8 B9 16 39		        LDA SOLDIER_ANIM_FRAMES+1,Y
  3818 8CCB 85 FC		        STA pFC
  3819 8CCD AD 0A 04		        LDA GAME_TICK
  3820 8CD0 29 0C		        AND #$0C     ;#%00001100
  3821 8CD2 4A			        LSR 
  3822 8CD3 4A			        LSR 
  3823 8CD4 A8			        TAY
  3824 8CD5 B1 FB		        LDA (pFB),Y
  3825 8CD7 9D 55 D8		        STA SPRITES_PTR05,X
  3826 8CDA 60			        RTS
  3827
  3828 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3829 				; ref: anim_type_18
  3830 				; Appears from the sides, specially at the beginning of lvl0
  3831 				; Very common solider.
  3832 8CDB			TYPE_ANIM_SOLDIER_FROM_SIDE_B   ;$29BB
  3833 8CDB FE AA D8		        INC SPRITES_TMP_C05,X
  3834 8CDE BD AA D8		        LDA SPRITES_TMP_C05,X
  3835 8CE1 29 3F		        AND #$3F
  3836 8CE3 D0 0E		        BNE @+
  3837
  3838 8CE5 A9 00		        LDA #$00
  3839 8CE7 9D 65 D8		        STA SPRITES_DELTA_X05,X
  3840 8CEA 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  3841 8CED A9 E3		        LDA #$E3     ;Frame enemy throw grenade
  3842 8CEF 9D 55 D8		        STA SPRITES_PTR05,X
  3843 8CF2 60			        RTS
  3844
  3845 8CF3 C9 06		@	    CMP #$06
  3846 8CF5 D0 06		        BNE @+
  3847 8CF7 FE 55 D8		        INC SPRITES_PTR05,X
  3848 8CFA 4C F2 95		        JMP THROW_GRENADE
  3849
  3850 8CFD C9 14		@	    CMP #$14
  3851 8CFF D0 23		        BNE @+
  3852 8D01 20 94 98		        JSR GET_RANDOM
  3853 8D04 29 01		        AND #$01
  3854 8D06 0A			        ASL 
  3855 8D07 38			        SEC
  3856 8D08 E9 01		        SBC #$01
  3857 8D0A 18			        CLC
  3858 8D0B 7D 94 D8		        ADC SPRITES_TMP_A05,X
  3859 8D0E 29 0F		        AND #$0F
  3860 8D10 9D 94 D8		        STA SPRITES_TMP_A05,X
  3861 8D13 9D 9F D8		        STA SPRITES_TMP_B05,X
  3862 8D16 A8			        TAY
  3863 8D17 B9 D2 95		        LDA DELTA_X_TBL,Y
  3864 8D1A 9D 65 D8		        STA SPRITES_DELTA_X05,X
  3865 8D1D B9 E2 95		        LDA DELTA_Y_TBL,Y
  3866 8D20 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  3867 8D23 60			        RTS
  3868
  3869 8D24 C9 14		@	    CMP #$14
  3870 8D26 90 1D		        BCC @+
  3871 8D28 BD 9F D8		        LDA SPRITES_TMP_B05,X
  3872 8D2B 29 FE		        AND #$FE
  3873 8D2D A8			        TAY
  3874 8D2E B9 15 39		        LDA SOLDIER_ANIM_FRAMES,Y
  3875 8D31 85 FB		        STA pFB
  3876 8D33 B9 16 39		        LDA SOLDIER_ANIM_FRAMES+1,Y
  3877 8D36 85 FC		        STA pFC
  3878 8D38 AD 0A 04		        LDA GAME_TICK
  3879 8D3B 29 0C		        AND #$0C     ;#%00001100
  3880 8D3D 4A			        LSR 
  3881 8D3E 4A			        LSR 
  3882 8D3F A8			        TAY
  3883 8D40 B1 FB		        LDA (pFB),Y
  3884 8D42 9D 55 D8		        STA SPRITES_PTR05,X
  3885 8D45 20 C5 8B		@	    JSR UPDATE_ENEMY_PATH
  3886 8D48 20 FA 8B		        JSR s28D8
  3887 8D4B 20 30 8C		        JSR UPDATE_ENEMY_BKG_PRI
  3888 8D4E 20 BB 96		        JSR j33D0
  3889 8D51 60			        RTS
  3890
  3891 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3892 				; ref: anim_type_17
  3893 				; Animates the soldiers that appears from the sides and moves mostly
  3894 				; horizontally.
  3895 				; Appears in lvl0, more or less after crossing the bridge
  3896 8D52			TYPE_ANIM_SOLDIER_FROM_SIDE_A     ;$2A34
  3897 8D52 FE AA D8		        INC SPRITES_TMP_C05,X
  3898 8D55 BD 9F D8		        LDA SPRITES_TMP_B05,X
  3899 8D58 29 FE		        AND #$FE     ;#%11111110
  3900 8D5A A8			        TAY
  3901 8D5B B9 15 39		        LDA SOLDIER_ANIM_FRAMES,Y
  3902 8D5E 85 FB		        STA pFB
  3903 8D60 B9 16 39		        LDA SOLDIER_ANIM_FRAMES+1,Y
  3904 8D63 85 FC		        STA pFC
  3905 8D65 AD 0A 04		        LDA GAME_TICK
  3906 8D68 29 0C		        AND #$0C     ;#%00001100
  3907 8D6A 4A			        LSR 
  3908 8D6B 4A			        LSR 
  3909 8D6C A8			        TAY
  3910 8D6D B1 FB		        LDA (pFB),Y
  3911 8D6F 9D 55 D8		        STA SPRITES_PTR05,X
  3912 8D72 20 C5 8B		        JSR UPDATE_ENEMY_PATH
  3913 8D75 20 30 8C		        JSR UPDATE_ENEMY_BKG_PRI
  3914 8D78 BD AA D8		        LDA SPRITES_TMP_C05,X
  3915 8D7B DD 94 D8		        CMP SPRITES_TMP_A05,X
  3916 8D7E F0 01		        BEQ @+
  3917 8D80 60			        RTS
  3918
  3919 8D81 A9 08		@	    LDA #$08     ;#%00001000
  3920 8D83 9D 9F D8		        STA SPRITES_TMP_B05,X
  3921 8D86 A8			        TAY
  3922 8D87 B9 D2 95		        LDA DELTA_X_TBL,Y
  3923 8D8A 9D 65 D8		        STA SPRITES_DELTA_X05,X
  3924 8D8D B9 E2 95		        LDA DELTA_Y_TBL,Y
  3925 8D90 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  3926 8D93 60			        RTS
  3927
  3928 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3929 				; ref: anim_type_16
  3930 8D94			TYPE_ANIM_GRENADE_BOX   ;$2A78
  3931 8D94 AD 00 D8		        LDA SPRITES_X_HI00
  3932 8D97 DD 05 D8		        CMP SPRITES_X_HI05,X
  3933 8D9A D0 44		        BNE @+
  3934 8D9C AD 10 D8		        LDA SPRITES_X_LO00
  3935 8D9F 18			        CLC
  3936 8DA0 69 0F		        ADC #$0F     ;#%00001111
  3937 8DA2 DD 15 D8		        CMP SPRITES_X_LO05,X
  3938 8DA5 90 39		        BCC @+
  3939 8DA7 AD 10 D8		        LDA SPRITES_X_LO00
  3940 8DAA 38			        SEC
  3941 8DAB E9 0F		        SBC #$0F     ;#%00001111
  3942 8DAD DD 15 D8		        CMP SPRITES_X_LO05,X
  3943 8DB0 B0 2E		        BCS @+
  3944 8DB2 AD 20 D8		        LDA SPRITES_Y00
  3945 8DB5 18			        CLC
  3946 8DB6 69 12		        ADC #$12     ;#%00010010
  3947 8DB8 DD 25 D8		        CMP SPRITES_Y05,X
  3948 8DBB 90 23		        BCC @+
  3949 8DBD AD 20 D8		        LDA SPRITES_Y00
  3950 8DC0 38			        SEC
  3951 8DC1 E9 0A		        SBC #$0A     ;#%00001010
  3952 8DC3 DD 25 D8		        CMP SPRITES_Y05,X
  3953 8DC6 B0 18		        BCS @+
  3954 8DC8 A9 03		        LDA #$03     ;#%00000011
  3955 8DCA F8			        SED
  3956 8DCB 18			        CLC
  3957 8DCC 6D FF 04		        ADC GRENADES
  3958 8DCF 8D FF 04		        STA GRENADES
  3959 8DD2 D8			        CLD
  3960 8DD3 20 67 36		        JSR SCREEN_REFRESH_GRENADES
  3961 8DD6 A9 0A		        LDA #$0A
  3962 8DD8 20 DC 35		        JSR SCORE_ADD
  3963 8DDB 20 75 98		        JSR CLEANUP_SPRITE
  3964 8DDE A9 00		        LDA #$00     ;play "pick up grenade" sfx
  3965 				        //JSR SFX_PLAY
  3966 8DE0 A9 0B		@	    LDA #$0B     ;dark grey
  3967 8DE2 9D 45 D8		        STA SPRITES_COLOR05,X
  3968 8DE5 AD 0A 04		        LDA GAME_TICK
  3969 8DE8 29 08		        AND #$08     ;#%00001000
  3970 8DEA F0 01		        BEQ @+
  3971 8DEC 60			        RTS
  3972
  3973 8DED A9 08		@	    LDA #$08     ;orange
  3974 8DEF 9D 45 D8		        STA SPRITES_COLOR05,X
  3975 8DF2 60			        RTS
  3976
  3977 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  3978 				; ref: anim_type_14
  3979 8DF3			TYPE_ANIM_POW_FREE  ;$2ADA
  3980 8DF3 FE AA D8		        INC SPRITES_TMP_C05,X
  3981 8DF6 BD AA D8		        LDA SPRITES_TMP_C05,X
  3982 8DF9 C9 64		        CMP #$64     ;#%01100100
  3983 8DFB F0 10		        BEQ @+
  3984 8DFD AD 0A 04		        LDA GAME_TICK
  3985 8E00 29 08		        AND #$08     ;#%00001000
  3986 8E02 4A			        LSR 
  3987 8E03 4A			        LSR 
  3988 8E04 4A			        LSR 
  3989 8E05 A8			        TAY
  3990 8E06 B9 10 8E		        LDA _FRAME_POW_FREE,Y
  3991 8E09 9D 55 D8		        STA SPRITES_PTR05,X
  3992 8E0C 60			        RTS
  3993
  3994 8E0D 4C 75 98		@	    JMP CLEANUP_SPRITE
  3995
  3996 8E10			_FRAME_POW_FREE         ;$2AF7 (Pow == Prisoner of War)
  3997 8E10 C4 C5		        .BYTE $C4,$C5
  3998
  3999 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4000 				; ref: anim_type_13
  4001 8E12			TYPE_ANIM_DELAYED_CLEANUP   ;s2AF9
  4002 8E12 FE AA D8		        INC SPRITES_TMP_C05,X
  4003 8E15 BD AA D8		        LDA SPRITES_TMP_C05,X
  4004 8E18 C9 41		        CMP #$41     ;#%01000001
  4005 8E1A F0 01		        BEQ @+
  4006 8E1C 60			        RTS
  4007
  4008 8E1D 4C 75 98		@	    JMP CLEANUP_SPRITE
  4009
  4010 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4011 				; ref: anim_type_12
  4012 8E20			TYPE_ANIM_POW   ;$2B07
  4013 8E20 AD 0A 04		        LDA GAME_TICK
  4014 8E23 29 08		        AND #$08     ;#%00001000
  4015 8E25 4A			        LSR 
  4016 8E26 4A			        LSR 
  4017 8E27 4A			        LSR 
  4018 8E28 A8			        TAY
  4019 8E29 B9 41 8E		        LDA FRAME_POW_RUN,Y
  4020 8E2C 9D 55 D8		        STA SPRITES_PTR05,X
  4021 8E2F AD 03 04		        LDA V_SCROLL_ROW_IDX
  4022 8E32 C9 71		        CMP #$71     ;#%01110001
  4023 8E34 B0 0A		        BCS @+
  4024 8E36 A9 FF		        LDA #$FF     ;#%11111111
  4025 8E38 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4026 8E3B A9 FF		        LDA #$FF     ;#%11111111
  4027 8E3D 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4028 8E40 60			@	    RTS
  4029
  4030 8E41			FRAME_POW_RUN       ;$2B28 (POW == Prisoner of War)
  4031 8E41 C2 C3		        .BYTE $C2,$C3
  4032
  4033 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4034 				; ref: anim_type_11
  4035 8E43			TYPE_ANIM_POW_GUARD     ;$2B2A
  4036 8E43 AD 0A 04		        LDA GAME_TICK
  4037 8E46 29 08		        AND #$08     ;#%00001000
  4038 8E48 4A			        LSR 
  4039 8E49 4A			        LSR 
  4040 8E4A 4A			        LSR 
  4041 8E4B A8			        TAY
  4042 8E4C B9 64 8E		        LDA _FRAME_POW_GUARD,Y
  4043 8E4F 9D 55 D8		        STA SPRITES_PTR05,X
  4044 8E52 AD 03 04		        LDA V_SCROLL_ROW_IDX
  4045 8E55 C9 71		        CMP #$71
  4046 8E57 B0 0A		        BCS @+
  4047 8E59 A9 FF		        LDA #$FF
  4048 8E5B 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4049 8E5E A9 FF		        LDA #$FF
  4050 8E60 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4051 8E63 60			@	    RTS
  4052
  4053 8E64			_FRAME_POW_GUARD     ;$2B4B
  4054 8E64 C0 C1		        .BYTE $C0,$C1
  4055
  4056 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4057 				; ref: anim_type_0F
  4058 8E66			TYPE_ANIM_BIKE_IN_BRIDGE ;$2B4D
  4059 8E66 FE AA D8		        INC SPRITES_TMP_C05,X
  4060 8E69 BC 94 D8		        LDY SPRITES_TMP_A05,X
  4061 8E6C BD 15 D8		        LDA SPRITES_X_LO05,X
  4062 8E6F C9 A5		        CMP #$A5
  4063 8E71 D0 48		        BNE @+3
  4064
  4065 				        ; Throw grenades when bike reaches X=$A5
  4066 8E73 A9 00		        LDA #$00
  4067 8E75 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4068 8E78 99 65 D8		        STA SPRITES_DELTA_X05,Y
  4069 8E7B A9 B2		        LDA #$B2     ;Bike Front (throw grenade #0)
  4070 8E7D 9D 55 D8		        STA SPRITES_PTR05,X
  4071 8E80 A9 B3		        LDA #$B3     ;Bike Back (throw grenade #0)
  4072 8E82 99 55 D8		        STA SPRITES_PTR05,Y
  4073 8E85 BD AA D8		        LDA SPRITES_TMP_C05,X
  4074 8E88 29 10		        AND #$10     ;#%00010000
  4075 8E8A F0 0A		        BEQ @+
  4076 8E8C A9 B4		        LDA #$B4     ;Bike Front (throw grenade #1)
  4077 8E8E 9D 55 D8		        STA SPRITES_PTR05,X
  4078 8E91 A9 B5		        LDA #$B5     ;Bike Back (throw grenade #1)
  4079 8E93 99 55 D8		        STA SPRITES_PTR05,Y
  4080 8E96 BD AA D8		@	    LDA SPRITES_TMP_C05,X
  4081 8E99 29 1F		        AND #$1F     ;#%00011111
  4082 8E9B D0 04		        BNE @+
  4083 8E9D 20 F2 95		        JSR THROW_GRENADE
  4084 8EA0 60			        RTS
  4085
  4086 				        ; Bike moving forward (left-direction)
  4087 8EA1 BD 25 D8		@	    LDA SPRITES_Y05,X
  4088 8EA4 C9 73		        CMP #$73
  4089 8EA6 90 12		        BCC @+
  4090 8EA8 A9 FF		        LDA #$FF
  4091 8EAA 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4092 8EAD 99 65 D8		        STA SPRITES_DELTA_X05,Y
  4093 8EB0 A9 B0		        LDA #$B0     ;Bike Front (ride)
  4094 8EB2 9D 55 D8		        STA SPRITES_PTR05,X
  4095 8EB5 A9 B1		        LDA #$B1     ;Bike Back (ride)
  4096 8EB7 99 55 D8		        STA SPRITES_PTR05,Y
  4097 8EBA 60			@	    RTS
  4098
  4099 8EBB BD 15 D8		@	    LDA SPRITES_X_LO05,X
  4100 8EBE 29 1F		        AND #$1F     ;#%00011111
  4101 8EC0 D0 09		        BNE @+
  4102 8EC2 FE 25 D8		        INC SPRITES_Y05,X
  4103 8EC5 BD 25 D8		        LDA SPRITES_Y05,X
  4104 8EC8 99 25 D8		        STA SPRITES_Y05,Y
  4105 8ECB C9 10		@	    CMP #$10     ;#%00010000
  4106 8ECD D0 09		        BNE @+
  4107 8ECF DE 25 D8		        DEC SPRITES_Y05,X
  4108 8ED2 BD 25 D8		        LDA SPRITES_Y05,X
  4109 8ED5 99 25 D8		        STA SPRITES_Y05,Y
  4110 8ED8 BD 15 D8		@	    LDA SPRITES_X_LO05,X
  4111 8EDB C9 B4		        CMP #$B4     ;#%10110100
  4112 8EDD D0 09		        BNE @+
  4113 8EDF A9 FF		        LDA #$FF     ;#%11111111
  4114 8EE1 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4115 8EE4 99 65 D8		        STA SPRITES_DELTA_X05,Y
  4116 8EE7 60			        RTS
  4117
  4118 8EE8 BD 15 D8		@	    LDA SPRITES_X_LO05,X
  4119 8EEB C9 A0		        CMP #$A0     ;#%10100000
  4120 8EED D0 08		        BNE @+
  4121 8EEF A9 FE		        LDA #$FE     ;#%11111110
  4122 8EF1 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4123 8EF4 99 65 D8		        STA SPRITES_DELTA_X05,Y
  4124 8EF7 60			@	    RTS
  4125
  4126 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4127 				; ref: anim_type_0D
  4128 8EF8			TYPE_ANIM_MORTAR_ENEMY  ;$2BDF
  4129 8EF8 FE AA D8		        INC SPRITES_TMP_C05,X
  4130 8EFB AD EA 04		        LDA a04EA
  4131 8EFE F0 25		        BEQ @+2
  4132 8F00 BD AA D8		        LDA SPRITES_TMP_C05,X
  4133 8F03 29 1F		        AND #$1F     ;#%00011111
  4134 8F05 C9 03		        CMP #$03     ;#%00000011
  4135 8F07 D0 05		        BNE @+
  4136 8F09 A9 CF		        LDA #$CF     ;Mortar guy frame #2
  4137 8F0B 9D 55 D8		        STA SPRITES_PTR05,X
  4138 8F0E C9 0F		@	    CMP #$0F     ;#%00001111
  4139 8F10 D0 05		        BNE @+
  4140 8F12 A9 CE		        LDA #$CE     ;Mortar guy frame #1
  4141 8F14 9D 55 D8		        STA SPRITES_PTR05,X
  4142 8F17 C9 14		@	    CMP #$14     ;#%00010100
  4143 8F19 D0 0A		        BNE @+
  4144 8F1B A9 CD		        LDA #$CD     ;Mortar guy frame #0
  4145 8F1D 9D 55 D8		        STA SPRITES_PTR05,X
  4146 8F20 A9 00		        LDA #$00     ;#%00000000
  4147 8F22 8D EA 04		        STA a04EA
  4148 8F25 BD 25 D8		@	    LDA SPRITES_Y05,X
  4149 8F28 C9 82		        CMP #$82     ;#%10000010
  4150 8F2A 90 1E		        BCC @+
  4151 8F2C A9 98		        LDA #$98     ;Frame Hero/Enemy heading up
  4152 8F2E 9D 55 D8		        STA SPRITES_PTR05,X
  4153 8F31 A9 00		        LDA #$00
  4154 8F33 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4155 8F36 9D 94 D8		        STA SPRITES_TMP_A05,X
  4156 8F39 9D 9F D8		        STA SPRITES_TMP_B05,X
  4157 8F3C 9D AA D8		        STA SPRITES_TMP_C05,X
  4158 8F3F A9 FF		        LDA #$FF
  4159 8F41 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4160 8F44 A9 05		        LDA #$05            ;anim_type_05: regular solider
  4161 8F46 9D 85 D8		        STA SPRITES_TYPE05,X
  4162 8F49 60			        RTS
  4163
  4164 8F4A BD AA D8		@	    LDA SPRITES_TMP_C05,X
  4165 8F4D 29 3F		        AND #$3F     ;#%00111111
  4166 8F4F F0 01		        BEQ @+
  4167 8F51 60			        RTS
  4168
  4169 				        ; Find empty seat
  4170 8F52 A0 00		@	    LDY #$00     ;#%00000000
  4171 8F54 B9 85 D8		@	    LDA SPRITES_TYPE05,Y
  4172 8F57 F0 06		        BEQ @+
  4173 8F59 C8			        INY
  4174 8F5A C0 0B		        CPY #(TOTAL_MAX_SPRITES-5)
  4175 8F5C D0 F6		        BNE @-
  4176 8F5E 60			        RTS
  4177
  4178 8F5F AD 00 D8		@	    LDA SPRITES_X_HI00
  4179 8F62 D0 6E		        BNE b2CC0
  4180 8F64 A9 FF		        LDA #$FF     ;#%11111111
  4181 8F66 38			        SEC
  4182 8F67 ED 10 D8		        SBC SPRITES_X_LO00
  4183 8F6A 18			        CLC
  4184 8F6B 69 2F		        ADC #$2F     ;#%00101111
  4185 8F6D B0 63		        BCS b2CC0
  4186 8F6F 85 FB		        STA pFB
  4187 8F71 AD 20 D8		        LDA SPRITES_Y00
  4188 8F74 38			        SEC
  4189 8F75 FD 25 D8		        SBC SPRITES_Y05,X
  4190 8F78 85 FC		        STA pFC
  4191 8F7A A9 CE		        LDA #$CE     ;Motar guy frame #1
  4192 8F7C 9D 55 D8		        STA SPRITES_PTR05,X
  4193 8F7F A9 01		        LDA #$01
  4194 8F81 8D EA 04		        STA a04EA
  4195 8F84 BD 15 D8		        LDA SPRITES_X_LO05,X
  4196 8F87 99 15 D8		        STA SPRITES_X_LO05,Y
  4197 8F8A BD 25 D8		        LDA SPRITES_Y05,X
  4198 8F8D 38			        SEC
  4199 8F8E E9 02		        SBC #$02     ;#%00000010
  4200 8F90 99 25 D8		        STA SPRITES_Y05,Y
  4201 8F93 BD 05 D8		        LDA SPRITES_X_HI05,X
  4202 8F96 99 05 D8		        STA SPRITES_X_HI05,Y
  4203 8F99 20 3E 98		        JSR s3555
  4204 8F9C A5 FB		        LDA pFB
  4205 8F9E 49 FF		        EOR #$FF     ;#%11111111
  4206 8FA0 85 FB		        STA pFB
  4207 8FA2 E6 FB		        INC pFB
  4208 8FA4 A5 FB		        LDA pFB
  4209 8FA6 D0 02		        BNE @+
  4210 8FA8 A9 FF		        LDA #$FF     ;#%11111111
  4211 8FAA 99 65 D8		@	    STA SPRITES_DELTA_X05,Y
  4212 8FAD A5 FC		        LDA pFC
  4213 8FAF 99 75 D8		        STA SPRITES_DELTA_Y05,Y
  4214 8FB2 B9 75 D8		        LDA SPRITES_DELTA_Y05,Y
  4215 8FB5 38			        SEC
  4216 8FB6 E9 02		        SBC #$02
  4217 8FB8 99 75 D8		        STA SPRITES_DELTA_Y05,Y
  4218 8FBB A9 D0		        LDA #$D0            ;Big grenade #0
  4219 8FBD 99 55 D8		        STA SPRITES_PTR05,Y
  4220 8FC0 A9 00		        LDA #$00            ;black
  4221 8FC2 99 45 D8		        STA SPRITES_COLOR05,Y
  4222 8FC5 A9 00		        LDA #$00
  4223 8FC7 99 AA D8		        STA SPRITES_TMP_C05,Y
  4224 8FCA 99 35 D8		        STA SPRITES_BKG_PRI05,Y
  4225 8FCD A9 0E		        LDA #$0E            ;anim_type_0E: mortar bomb
  4226 8FCF 99 85 D8		        STA SPRITES_TYPE05,Y
  4227 8FD2 60			b2CC0   RTS
  4228
  4229 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4230 				; Used to spawn the "regular solider".
  4231 8FD3 29 29 32 32		f2CC1   .BYTE $29,$29,$32,$32       ;Sprite X lo
  4232 8FD7 78 A5 78 A5		f2CC5   .BYTE $78,$A5,$78,$A5       ;Sprite Y
  4233 8FDB 01 01 FF FF		f2CC9   .BYTE $01,$01,$FF,$FF       ;Sprite delta X
  4234 8FDF 04 04 0C 0C		f2CCD   .BYTE $04,$04,$0C,$0C       ;Sprite tmp
  4235 8FE3 9B 9B 9B 9B		f2CD1   .BYTE $9B,$9B,$9B,$9B       ;Sprite frames
  4236 8FE7 00 00 FF FF		f2CD5   .BYTE $00,$00,$FF,$FF       ;Sprite X hi
  4237
  4238 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4239 				; ref: anim_type_00
  4240 				; The animation that spawns regular soldiers, even at the end of the level
  4241 				; This is called when there is at least an empty seat, since this is the
  4242 				; animation handler for "empty seat". If there are no empty seats, then no
  4243 				; extra "regular soldiers" are spawned, which makes sense.
  4244 8FEB			TYPE_ANIM_SPAWN_SOLDIER      ;$2CD9
  4245 8FEB AD 03 04		        LDA V_SCROLL_ROW_IDX
  4246 8FEE F0 03		        BEQ _tss00
  4247 8FF0 4C 91 90		        JMP _tss05
  4248
  4249 				        ; End of level logic
  4250 8FF3 AD EF 04		_tss00    LDA ENEMIES_IN_FORT
  4251 8FF6 F0 DA		        BEQ b2CC0		;rts
  4252 8FF8 20 94 98		        JSR GET_RANDOM
  4253 8FFB 29 7F		        AND #$7F     ;#%01111111
  4254 8FFD D0 D3		        BNE b2CC0		;rts
  4255 8FFF A9 3F		        LDA #$3F                ;Restore frequency to normal at the end of level
  4256 9001 8D 04 05		        STA SHOOT_FREQ_MASK
  4257 9004 CE EF 04		        DEC ENEMIES_IN_FORT
  4258 				        ;BNE _tss01                ;FIXME: probably an "RTS" is missing here?
  4259
  4260 9007 AD F3 04		_tss01    LDA LEVEL_NR
  4261 900A 29 03		        AND #$03
  4262 900C C9 03		        CMP #$03
  4263 900E F0 66		        BEQ _tss04
  4264
  4265 9010 C9 01		        CMP #$01
  4266 9012 D0 07		        BNE _tss02
  4267
  4268 9014 20 94 98		        JSR GET_RANDOM
  4269 9017 29 01		        AND #$01
  4270 9019 F0 1B		        BEQ _tss03
  4271
  4272 				        ; End of lvl0 - door
  4273 901B 20 94 98		_tss02    JSR GET_RANDOM
  4274 901E 29 3F		        AND #$3F     ;#%00111111
  4275 9020 18			        CLC
  4276 9021 69 8C		        ADC #$8C
  4277 9023 9D 15 D8		        STA SPRITES_X_LO05,X
  4278 9026 A9 3C		        LDA #$3C
  4279 9028 9D 25 D8		        STA SPRITES_Y05,X
  4280 902B A9 1B		        LDA #$1B            ;anim_type_1B: soldier in fort lvl0,1,3
  4281 902D 9D 85 D8		        STA SPRITES_TYPE05,X
  4282 9030 EE F4 04		        INC ANY_ENEMY_IN_MAP
  4283 9033 4C CC 90		        JMP _tss06
  4284
  4285 				        ; End of lvl1 - soldiers from sides
  4286 9036 20 94 98		_tss03    JSR GET_RANDOM
  4287 9039 29 03		        AND #$03     ;#%00000011
  4288 903B A8			        TAY
  4289 903C B9 D3 8F		        LDA f2CC1,Y
  4290 903F 9D 15 D8		        STA SPRITES_X_LO05,X
  4291 9042 20 94 98		        JSR GET_RANDOM
  4292 9045 29 07		        AND #$07     ;#%00000111
  4293 9047 18			        CLC
  4294 9048 79 D7 8F		        ADC f2CC5,Y
  4295 904B 9D 25 D8		        STA SPRITES_Y05,X
  4296 904E B9 E7 8F		        LDA f2CD5,Y
  4297 9051 9D 05 D8		        STA SPRITES_X_HI05,X
  4298 9054 B9 DB 8F		        LDA f2CC9,Y
  4299 9057 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4300 905A A9 00		        LDA #$00
  4301 905C 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4302 905F B9 DF 8F		        LDA f2CCD,Y
  4303 9062 9D 94 D8		        STA SPRITES_TMP_A05,X
  4304 9065 9D 9F D8		        STA SPRITES_TMP_B05,X
  4305 9068 B9 E3 8F		        LDA f2CD1,Y
  4306 906B 9D 55 D8		        STA SPRITES_PTR05,X
  4307 906E A9 1B		        LDA #$1B            ;anim_type_1B: soldier in fort lvl0,1,3
  4308 9070 9D 85 D8		        STA SPRITES_TYPE05,X
  4309 9073 4C E8 90		        JMP _tss07
  4310
  4311 				        ; End of lvl3
  4312 9076 20 94 98		_tss04    JSR GET_RANDOM
  4313 9079 29 3F		        AND #$3F     ;#%00111111
  4314 907B 18			        CLC
  4315 907C 69 8C		        ADC #$8C
  4316 907E 9D 15 D8		        STA SPRITES_X_LO05,X
  4317 9081 A9 64		        LDA #$64
  4318 9083 9D 25 D8		        STA SPRITES_Y05,X
  4319 9086 A9 1B		        LDA #$1B            ;anim_type_1B: soldier in fort lvl0,1,3
  4320 9088 9D 85 D8		        STA SPRITES_TYPE05,X
  4321 908B EE F4 04		        INC ANY_ENEMY_IN_MAP
  4322 908E 4C CC 90		        JMP _tss06
  4323
  4324 9091 20 94 98		_tss05    JSR GET_RANDOM
  4325 9094 29 03		        AND #$03     ;#%00000011
  4326 9096 D0 62		        BNE _tss08
  4327 9098 20 94 98		        JSR GET_RANDOM
  4328 909B 29 FF		        AND #$FF     ;#%11111111
  4329 909D D0 5C		        BNE _tss09
  4330 909F 20 94 98		        JSR GET_RANDOM
  4331 90A2 8D F0 04		        STA TMP_SPRITE_X_LO
  4332 90A5 A9 28		        LDA #$28
  4333 90A7 8D F1 04		        STA TMP_SPRITE_Y
  4334 90AA A9 00		        LDA #$00
  4335 90AC 8D F2 04		        STA TMP_SPRITE_X_HI
  4336 90AF 20 4E 39		        JSR j172F
  4337 						
  4338 				        ; Get charset mask info
  4339 90B2 A0 00		        LDY #$00
  4340 90B4 B1 FC		        LDA (pFC),Y			;znak pod bohaterem
  4341 90B6 A8			        TAY
  4342 90B7 B1 2A		        LDA (p2A),Y
  4343 90B9 D0 40		        BNE _tss09
  4344
  4345 90BB AD F0 04		        LDA TMP_SPRITE_X_LO
  4346 90BE 9D 15 D8		        STA SPRITES_X_LO05,X
  4347 90C1 AD F1 04		        LDA TMP_SPRITE_Y
  4348 90C4 9D 25 D8		        STA SPRITES_Y05,X
  4349 90C7 A9 05		        LDA #$05            ;anim_type_05: regular soldier
  4350 90C9 9D 85 D8		        STA SPRITES_TYPE05,X
  4351 90CC A9 01		_tss06    LDA #$01
  4352 90CE 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4353 90D1 A9 00		        LDA #$00
  4354 90D3 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4355 90D6 A9 08		        LDA #$08
  4356 90D8 9D 94 D8		        STA SPRITES_TMP_A05,X
  4357 90DB 9D 9F D8		        STA SPRITES_TMP_B05,X
  4358 90DE A9 9B		        LDA #$9B            ;soldier head south
  4359 90E0 9D 55 D8		        STA SPRITES_PTR05,X
  4360 90E3 A9 00		        LDA #$00
  4361 90E5 9D 05 D8		        STA SPRITES_X_HI05,X
  4362 90E8 A9 0B		_tss07    LDA #$0B            ;dark grey
  4363 90EA 9D 45 D8		        STA SPRITES_COLOR05,X
  4364 90ED 20 94 98		        JSR GET_RANDOM
  4365 90F0 29 1F		        AND #$1F
  4366 90F2 9D AA D8		        STA SPRITES_TMP_C05,X
  4367 90F5 A9 00		        LDA #$00
  4368 90F7 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  4369 90FA 60			_tss08    RTS
  4370
  4371 90FB 20 94 98		_tss09    JSR GET_RANDOM
  4372 90FE 29 FF		        AND #$FF            ;#%11111111
  4373 9100 F0 01		        BEQ _tss10
  4374 9102 60			        RTS
  4375
  4376 9103 20 94 98		_tss10    JSR GET_RANDOM
  4377 9106 29 01		        AND #$01     ;#%00000001
  4378 9108 D0 63		        BNE _tss12
  4379 910A 20 94 98		        JSR GET_RANDOM
  4380 910D 29 7F		        AND #$7F     ;#%01111111
  4381 910F 18			        CLC
  4382 9110 69 3C		        ADC #$3C     ;#%00111100
  4383 9112 8D F1 04		        STA TMP_SPRITE_Y
  4384 9115 A9 18		        LDA #$18     ;#%00011000
  4385 9117 8D F0 04		        STA TMP_SPRITE_X_LO
  4386 911A A9 00		        LDA #$00     ;#%00000000
  4387 911C 8D F2 04		        STA TMP_SPRITE_X_HI
  4388 911F 20 4E 39		        JSR j172F
  4389 						
  4390 				        ; Get charset mask info
  4391 9122 A0 00		        LDY #$00
  4392 9124 B1 FC		        LDA (pFC),Y			;znak pod bohaterem
  4393 9126 A8			        TAY		
  4394 9127 B1 2A		        LDA (p2A),Y
  4395 9129 F0 01		        BEQ _tss11
  4396 912B 60			        RTS
  4397
  4398 912C AD F0 04		_tss11    LDA TMP_SPRITE_X_LO
  4399 912F 9D 15 D8		        STA SPRITES_X_LO05,X
  4400 9132 AD F1 04		        LDA TMP_SPRITE_Y
  4401 9135 9D 25 D8		        STA SPRITES_Y05,X
  4402 9138 A9 00		        LDA #$00
  4403 913A 9D 05 D8		        STA SPRITES_X_HI05,X
  4404 913D A9 01		        LDA #$01
  4405 913F 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4406 9142 A9 00		        LDA #$00
  4407 9144 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4408 9147 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  4409 914A A9 D9		        LDA #$D9            ;soldier head east
  4410 914C 9D 55 D8		        STA SPRITES_PTR05,X
  4411 914F A9 0B		        LDA #$0B     ;dark grey
  4412 9151 9D 45 D8		        STA SPRITES_COLOR05,X
  4413 9154 A9 14		        LDA #$14
  4414 9156 9D AA D8		        STA SPRITES_TMP_C05,X
  4415 9159 A9 18		        LDA #$18            ;anim_type_18: soldier from side B
  4416 915B 9D 85 D8		        STA SPRITES_TYPE05,X
  4417 915E 20 94 98		        JSR GET_RANDOM
  4418 9161 29 03		        AND #$03     ;#%00000011
  4419 9163 18			        CLC
  4420 9164 69 02		        ADC #$02     ;#%00000010
  4421 9166 9D 94 D8		        STA SPRITES_TMP_A05,X
  4422 9169 9D 9F D8		        STA SPRITES_TMP_B05,X
  4423 916C 60			        RTS
  4424
  4425 916D 20 94 98		_tss12    JSR GET_RANDOM
  4426 9170 29 7F		        AND #$7F     ;#%01111111
  4427 9172 18			        CLC
  4428 9173 69 3C		        ADC #$3C     ;#%00111100
  4429 9175 8D F1 04		        STA TMP_SPRITE_Y
  4430 9178 A9 3A		        LDA #$3A     ;#%00111010
  4431 917A 8D F0 04		        STA TMP_SPRITE_X_LO
  4432 917D A9 FF		        LDA #$FF     ;#%11111111
  4433 917F 8D F2 04		        STA TMP_SPRITE_X_HI
  4434 9182 20 4E 39		        JSR j172F
  4435 						
  4436 						
  4437 				        ; Get charset mask info
  4438 9185 A0 00		        LDY #$00
  4439 9187 B1 FC		        LDA (pFC),Y			;znak pod bohaterem
  4440 9189 A8			        TAY
  4441 918A B1 2A				lda (p2A),y
  4442 918C C9 30		        CMP #$30     ;#%00110000
  4443 918E D0 41		        BNE _tss13
  4444 9190 AD F0 04		        LDA TMP_SPRITE_X_LO
  4445 9193 9D 15 D8		        STA SPRITES_X_LO05,X
  4446 9196 AD F1 04		        LDA TMP_SPRITE_Y
  4447 9199 9D 25 D8		        STA SPRITES_Y05,X
  4448 919C A9 FF		        LDA #$FF     ;#%11111111
  4449 919E 9D 05 D8		        STA SPRITES_X_HI05,X
  4450 91A1 A9 FF		        LDA #$FF     ;#%11111111
  4451 91A3 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4452 91A6 A9 00		        LDA #$00     ;#%00000000
  4453 91A8 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4454 91AB 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  4455 91AE A9 15		        LDA #$15     ;FIXME: sprite points at 0xc540.
  4456 91B0 9D 55 D8		        STA SPRITES_PTR05,X
  4457 91B3 A9 0B		        LDA #$0B     ;dark grey
  4458 91B5 9D 45 D8		        STA SPRITES_COLOR05,X
  4459 91B8 A9 14		        LDA #$14     ;#%00010100
  4460 91BA 9D AA D8		        STA SPRITES_TMP_C05,X
  4461 91BD A9 18		        LDA #$18            ;anim_type_18: soldier from side B
  4462 91BF 9D 85 D8		        STA SPRITES_TYPE05,X
  4463 91C2 20 94 98		        JSR GET_RANDOM
  4464 91C5 29 03		        AND #$03     ;#%00000011
  4465 91C7 18			        CLC
  4466 91C8 69 0B		        ADC #$0B     ;#%00001011
  4467 91CA 9D 94 D8		        STA SPRITES_TMP_A05,X
  4468 91CD 9D 9F D8		        STA SPRITES_TMP_B05,X
  4469 91D0 60			        RTS
  4470
  4471 91D1 60			_tss13    RTS
  4472
  4473 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4474 				; ref: anim_type_0B
  4475 91D2			TYPE_ANIM_SOLDIER_GRENADE   ;$2EBF
  4476 91D2 FE AA D8		        INC SPRITES_TMP_C05,X
  4477 91D5 BD AA D8		        LDA SPRITES_TMP_C05,X
  4478 91D8 C9 50		        CMP #$50     ;#%01010000
  4479 91DA D0 04		        BNE @+
  4480 91DC 20 FE 91		        JSR CONVERT_TO_TYPE_ANIM_EXPLOSION
  4481 91DF 60			        RTS
  4482
  4483 91E0 BD AA D8		@	    LDA SPRITES_TMP_C05,X
  4484 91E3 4A			        LSR 
  4485 91E4 4A			        LSR 
  4486 91E5 4A			        LSR 
  4487 91E6 4A			        LSR 
  4488 91E7 A8			        TAY
  4489 91E8 B9 F9 91		        LDA FRAME_GRENADE0,Y
  4490 91EB 9D 55 D8		        STA SPRITES_PTR05,X
  4491 91EE BD AA D8		        LDA SPRITES_TMP_C05,X
  4492 91F1 29 0F		        AND #$0F     ;#%00001111
  4493 91F3 D0 03		        BNE @+
  4494 91F5 FE 75 D8		        INC SPRITES_DELTA_Y05,X
  4495 91F8 60			@	    RTS
  4496
  4497 91F9			FRAME_GRENADE0       ;$2EE6
  4498 91F9 92 91 91 92 93	        .BYTE $92,$91,$91,$92,$93
  4499
  4500 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4501 				; Converts the current animation into an explosion animation.
  4502 				; X=anim to be converted
  4503 91FE			CONVERT_TO_TYPE_ANIM_EXPLOSION       ;$2EEB
  4504 91FE A9 0C		        LDA #$0C            ;anim_type_0C: explosion
  4505 9200 9D 85 D8		        STA SPRITES_TYPE05,X
  4506 9203 A9 00		        LDA #$00
  4507 9205 9D AA D8		        STA SPRITES_TMP_C05,X
  4508 9208 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4509 920B 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4510 920E A9 AF		        LDA #$AF
  4511 9210 9D 55 D8		        STA SPRITES_PTR05,X
  4512 9213 A9 02		        LDA #$02     ;red
  4513 9215 9D 45 D8		        STA SPRITES_COLOR05,X
  4514 9218 AD 03 05		        LDA IS_HERO_DEAD
  4515 921B D0 00		        BNE @+    ;FIXME: what should happen on the other condition?
  4516 921D 60			@	    RTS
  4517
  4518 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4519 				; ref: anim_type_0E
  4520 921E			TYPE_ANIM_MORTAR_BOMB   ;$2F0B
  4521 921E FE AA D8		        INC SPRITES_TMP_C05,X
  4522 9221 BD AA D8		        LDA SPRITES_TMP_C05,X
  4523 9224 C9 50		        CMP #$50
  4524 9226 D0 04		        BNE @+
  4525 9228 20 FE 91		        JSR CONVERT_TO_TYPE_ANIM_EXPLOSION
  4526 922B 60			        RTS
  4527
  4528 922C BD AA D8		@	    LDA SPRITES_TMP_C05,X
  4529 922F 4A			        LSR 
  4530 9230 4A			        LSR 
  4531 9231 4A			        LSR 
  4532 9232 4A			        LSR 
  4533 9233 A8			        TAY
  4534 9234 B9 45 92		        LDA _BOMB_FRAMES,Y
  4535 9237 9D 55 D8		        STA SPRITES_PTR05,X
  4536 923A BD AA D8		        LDA SPRITES_TMP_C05,X
  4537 923D 29 0F		        AND #$0F     ;#%00001111
  4538 923F D0 03		        BNE @+
  4539 9241 FE 75 D8		        INC SPRITES_DELTA_Y05,X
  4540 9244 60			@	    RTS
  4541
  4542 9245			_BOMB_FRAMES
  4543 9245 D2 D1 D0 D1 D2	        .BYTE $D2,$D1,$D0,$D1,$D2
  4544
  4545 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4546 				; ref: anim_type_08
  4547 924A			TYPE_ANIM_SOLDIER_BULLET       ;$2F37
  4548 924A FE AA D8		        INC SPRITES_TMP_C05,X
  4549 924D BD AA D8		        LDA SPRITES_TMP_C05,X
  4550 9250 C9 46		        CMP #$46     ;#%01000110
  4551 9252 F0 26		        BEQ @+1
  4552 9254 BD AA D8		        LDA SPRITES_TMP_C05,X
  4553 9257 C9 16		        CMP #$16     ;#%00010110
  4554 9259 90 1E		        BCC @+
  4555 925B 20 C5 8B		        JSR UPDATE_ENEMY_PATH
  4556 						
  4557 				        ; Get charset mask info
  4558 925E A0 00		        LDY #$00
  4559 9260 B1 FC		        LDA (pFC),Y			;znak pod bohaterem
  4560 9262 A8			        TAY
  4561 9263 B1 2A		        LDA (p2A),Y
  4562 9265 29 01		        AND #$01     ;#%00000001
  4563 9267 D0 11		        BNE @+1
  4564
  4565 9269 A9 00		        LDA #$00
  4566 926B 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  4567 926E B1 2A		        LDA (p2A),Y
  4568 9270 29 02		        AND #$02     ;#%00000010
  4569 9272 F0 05		        BEQ @+
  4570
  4571 9274 A9 FF		        LDA #$FF     ;#%11111111
  4572 9276 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  4573 9279 60			@	    RTS
  4574
  4575 927A A9 09		@	    LDA #$09            ;anim_type_09: soldier bullet end
  4576 927C 9D 85 D8		        STA SPRITES_TYPE05,X
  4577 927F A9 00		        LDA #$00
  4578 9281 9D AA D8		        STA SPRITES_TMP_C05,X
  4579 9284 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4580 9287 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4581 928A A8			        TAY
  4582 928B B9 60 3B		        LDA FRAME_BULLET_END,Y
  4583 928E 9D 55 D8		        STA SPRITES_PTR05,X
  4584 9291 60			        RTS
  4585
  4586 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4587 				; ref: anim_type_1F / anim_type_21
  4588 9292			TYPE_ANIM_TURRET_FIRE_END ;2F7F
  4589 9292 FE AA D8		        INC SPRITES_TMP_C05,X
  4590 9295 BD AA D8		        LDA SPRITES_TMP_C05,X
  4591 9298 C9 5A		        CMP #$5A     ;#%01011010
  4592 929A F0 01		        BEQ @+
  4593 929C 60			        RTS
  4594
  4595 929D 4C FE 91		@	    JMP CONVERT_TO_TYPE_ANIM_EXPLOSION
  4596
  4597 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4598 				; ref: anim_type_09
  4599 92A0			TYPE_ANIM_SOLDIER_BULLET_END   ;$2F8D
  4600 92A0 FE AA D8		        INC SPRITES_TMP_C05,X
  4601 92A3 BD AA D8		        LDA SPRITES_TMP_C05,X
  4602 92A6 C9 09		        CMP #$09     ;#%00001001
  4603 92A8 F0 08		        BEQ @+
  4604 92AA A8			        TAY
  4605 92AB B9 60 3B		        LDA FRAME_BULLET_END,Y
  4606 92AE 9D 55 D8		        STA SPRITES_PTR05,X
  4607 92B1 60			        RTS
  4608
  4609 92B2 20 B6 92		@	    JSR @+1
  4610 92B5 60			        RTS
  4611
  4612 				        ; Cleanup sprite
  4613 92B6 A9 00		@	    LDA #$00            ;anim_type_00: spawn soldiers
  4614 92B8 9D 85 D8		        STA SPRITES_TYPE05,X
  4615 92BB 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4616 92BE 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4617 92C1 BD 53 2C		        LDA ORIG_SPRITE_Y05,X
  4618 92C4 9D 25 D8		        STA SPRITES_Y05,X
  4619 92C7 A9 64		        LDA #$64     ;#%01100100
  4620 92C9 9D 15 D8		        STA SPRITES_X_LO05,X
  4621 92CC A9 FF		        LDA #$FF     ;#%11111111
  4622 92CE 9D 05 D8		        STA SPRITES_X_HI05,X
  4623 92D1 9D 55 D8		        STA SPRITES_PTR05,X
  4624 92D4 60			        RTS
  4625
  4626 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4627 				; ref: anim_type_07
  4628 92D5			TYPE_ANIM_SOLDIER_BEHIND_SMTH   ;$2FC2
  4629 92D5 FE AA D8		        INC SPRITES_TMP_C05,X
  4630 92D8 BD 25 D8		        LDA SPRITES_Y05,X
  4631 92DB C9 82		        CMP #$82
  4632 92DD 90 36		        BCC @+1
  4633 92DF A9 98		        LDA #$98
  4634 92E1 9D 55 D8		        STA SPRITES_PTR05,X
  4635 92E4 A9 0B		        LDA #$0B     ;dark grey
  4636 92E6 9D 45 D8		        STA SPRITES_COLOR05,X
  4637 92E9 A9 00		        LDA #$00
  4638 92EB 9D 94 D8		        STA SPRITES_TMP_A05,X
  4639 92EE 9D 9F D8		        STA SPRITES_TMP_B05,X
  4640 92F1 9D AA D8		        STA SPRITES_TMP_C05,X
  4641 92F4 A9 FF		        LDA #$FF
  4642 92F6 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4643 92F9 20 94 98		        JSR GET_RANDOM
  4644 92FC 29 03		        AND #$03     ;#%00000011
  4645 92FE 38			        SEC
  4646 92FF E9 02		        SBC #$02     ;#%00000010
  4647 9301 C9 FE		        CMP #$FE     ;#%11111110
  4648 9303 D0 02		        BNE @+
  4649 9305 A9 00		        LDA #$00
  4650 9307 9D 65 D8		@	    STA SPRITES_DELTA_X05,X
  4651
  4652 				        ; Switch animation to "go up"
  4653 930A A9 15		        LDA #$15            ;anim_type_15: soldier go up
  4654 930C 9D 85 D8		        STA SPRITES_TYPE05,X
  4655 930F A9 FF		        LDA #$FF
  4656 9311 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  4657 9314 60			        RTS
  4658
  4659 9315 C9 50		@	    CMP #$50     ;#%01010000
  4660 9317 90 03		        BCC @+
  4661 9319 20 1F 93		        JSR SOLIDER_IN_TRENCH_AIM_TO_HERO
  4662 931C 4C BB 96		@	    JMP j33D0
  4663
  4664 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4665 				; Make the soldier in trench or behind something to aim to hero
  4666 931F			SOLIDER_IN_TRENCH_AIM_TO_HERO
  4667 931F BD 05 D8		        LDA SPRITES_X_HI05,X
  4668 9322 CD 00 D8		        CMP SPRITES_X_HI00
  4669 9325 F0 08		        BEQ _sit00
  4670 9327 AD 00 D8		        LDA SPRITES_X_HI00
  4671 932A D0 2A		        BNE _sit03
  4672 932C 4C 3C 93		        JMP _sit01
  4673
  4674 932F AD 10 D8		_sit00    LDA SPRITES_X_LO00
  4675 9332 18			        CLC
  4676 9333 69 32		        ADC #$32     ;#%00110010
  4677 9335 B0 12		        BCS _sit02
  4678 9337 DD 15 D8		        CMP SPRITES_X_LO05,X
  4679 933A B0 0D		        BCS _sit02
  4680
  4681 933C A9 0A		_sit01    LDA #$0A     ;#%00001010
  4682 933E 9D 9F D8		        STA SPRITES_TMP_B05,X
  4683 9341 A9 CA		        LDA #$CA     ;Soldier in trench: left
  4684 9343 9D 55 D8		        STA SPRITES_PTR05,X
  4685 9346 4C 6D 93		        JMP _sit05
  4686
  4687 9349 AD 10 D8		_sit02    LDA SPRITES_X_LO00
  4688 934C 38			        SEC
  4689 934D E9 32		        SBC #$32     ;#%00110010
  4690 934F 90 12		        BCC _sit04
  4691 9351 DD 15 D8		        CMP SPRITES_X_LO05,X
  4692 9354 90 0D		        BCC _sit04
  4693
  4694 9356 A9 06		_sit03    LDA #$06     ;#%00000110
  4695 9358 9D 9F D8		        STA SPRITES_TMP_B05,X
  4696 935B A9 C9		        LDA #$C9     ;Soldier in trench: right
  4697 935D 9D 55 D8		        STA SPRITES_PTR05,X
  4698 9360 4C 6D 93		        JMP _sit05
  4699
  4700 9363 A9 08		_sit04    LDA #$08     ;#%00001000
  4701 9365 9D 9F D8		        STA SPRITES_TMP_B05,X
  4702 9368 A9 C8		        LDA #$C8     ;Soldier in trench: down
  4703 936A 9D 55 D8		        STA SPRITES_PTR05,X
  4704 936D 60			_sit05    RTS
  4705
  4706 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4707 				; ref: anim_type_0A
  4708 936E			TYPE_ANIM_SOLDIER_JUMPING        ;$305B
  4709 936E FE AA D8		        INC SPRITES_TMP_C05,X
  4710 9371 BD AA D8		        LDA SPRITES_TMP_C05,X
  4711 9374 C9 1E		        CMP #$1E     ;#%00011110
  4712 9376 D0 1F		        BNE @+1
  4713 9378 A9 FE		        LDA #$FE     ;#%11111110
  4714 937A 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4715 937D BD 65 D8		        LDA SPRITES_DELTA_X05,X
  4716 9380 10 0B		        BPL @+
  4717 9382 A9 C6		        LDA #$C6     ;#%11000110
  4718 9384 9D 55 D8		        STA SPRITES_PTR05,X
  4719 9387 A9 FF		        LDA #$FF     ;#%11111111
  4720 9389 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4721 938C 60			        RTS
  4722
  4723 938D A9 D3		@	    LDA #$D3     ;#%11010011
  4724 938F 9D 55 D8		        STA SPRITES_PTR05,X
  4725 9392 A9 01		        LDA #$01     ;#%00000001
  4726 9394 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4727 9397 B0 1E		@	    BCS _tas02
  4728 9399 BD 9F D8		        LDA SPRITES_TMP_B05,X
  4729 939C 29 FE		        AND #$FE     ;#%11111110
  4730 939E A8			        TAY
  4731 939F B9 15 39		        LDA SOLDIER_ANIM_FRAMES,Y
  4732 93A2 85 FB		        STA pFB
  4733 93A4 B9 16 39		        LDA SOLDIER_ANIM_FRAMES+1,Y
  4734 93A7 85 FC		        STA pFC
  4735 93A9 AD 0A 04		        LDA GAME_TICK
  4736 93AC 29 0C		        AND #$0C     ;#%00001100
  4737 93AE 4A			        LSR
  4738 93AF 4A			        LSR
  4739 93B0 A8			        TAY
  4740 93B1 B1 FB		        LDA (pFB),Y
  4741 93B3 9D 55 D8		        STA SPRITES_PTR05,X
  4742 93B6 60			        RTS
  4743
  4744 93B7 BD AA D8		_tas02    LDA SPRITES_TMP_C05,X
  4745 93BA C9 23		        CMP #$23     ;#%00100011
  4746 93BC D0 03		        BNE _tas03
  4747 93BE FE 55 D8		        INC SPRITES_PTR05,X
  4748 93C1 29 07		_tas03    AND #$07     ;#%00000111
  4749 93C3 D0 0A		        BNE _tas04
  4750 93C5 FE 75 D8		        INC SPRITES_DELTA_Y05,X
  4751 93C8 BD 75 D8		        LDA SPRITES_DELTA_Y05,X
  4752 93CB C9 03		        CMP #$03     ;#%00000011
  4753 93CD F0 01		        BEQ _tas05
  4754 93CF 60			_tas04    RTS
  4755
  4756 93D0 A9 98		_tas05    LDA #$98     ;#%10011000
  4757 93D2 9D 55 D8		        STA SPRITES_PTR05,X
  4758 93D5 A9 00		        LDA #$00     ;#%00000000
  4759 93D7 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4760 93DA 9D 94 D8		        STA SPRITES_TMP_A05,X
  4761 93DD 9D 9F D8		        STA SPRITES_TMP_B05,X
  4762 93E0 9D AA D8		        STA SPRITES_TMP_C05,X
  4763 93E3 A9 FF		        LDA #$FF     ;#%11111111
  4764 93E5 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4765 93E8 A9 05		        LDA #$05            ;anim_type_05: regular soldier
  4766 93EA 9D 85 D8		        STA SPRITES_TYPE05,X
  4767 93ED 60			        RTS
  4768
  4769 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4770 				; ref: anim_type_15
  4771 				; When the "soldier behind something" (see sprite_type_17) is below our Y
  4772 				; position, it is converted into this sprite_type.
  4773 				; This sprite_type moves the sprite up and kind of chase the hero.
  4774 93EE			TYPE_ANIM_SOLIDER_GO_UP     ;$30DD
  4775 93EE FE AA D8		        INC SPRITES_TMP_C05,X
  4776 93F1 BD 9F D8		        LDA SPRITES_TMP_B05,X
  4777 93F4 29 FE		        AND #$FE     ;#%11111110
  4778 93F6 A8			        TAY
  4779 93F7 B9 15 39		        LDA SOLDIER_ANIM_FRAMES,Y
  4780 93FA 85 FB		        STA pFB
  4781 93FC B9 16 39		        LDA SOLDIER_ANIM_FRAMES+1,Y
  4782 93FF 85 FC		        STA pFC
  4783 9401 AD 0A 04		        LDA GAME_TICK
  4784 9404 29 0C		        AND #$0C     ;#%00001100
  4785 9406 4A			        LSR 
  4786 9407 4A			        LSR 
  4787 9408 A8			        TAY
  4788 9409 B1 FB		        LDA (pFB),Y
  4789 940B 9D 55 D8		        STA SPRITES_PTR05,X
  4790 940E BD AA D8		        LDA SPRITES_TMP_C05,X
  4791 9411 D0 05		        BNE @+
  4792 9413 A9 10		        LDA #$10     ;#%00010000
  4793 9415 9D AA D8		        STA SPRITES_TMP_C05,X
  4794 9418 C9 0F		@	    CMP #$0F     ;#%00001111
  4795 941A 90 09		        BCC @+
  4796 941C 20 C5 8B		        JSR UPDATE_ENEMY_PATH
  4797 941F 20 FA 8B		        JSR s28D8
  4798 9422 20 30 8C		        JSR UPDATE_ENEMY_BKG_PRI
  4799 9425 20 94 98		@	    JSR GET_RANDOM
  4800 9428 29 07		        AND #$07     ;#%00000111
  4801 942A F0 0B		        BEQ s3128
  4802 942C BD AA D8		        LDA SPRITES_TMP_C05,X
  4803 942F 29 1F		        AND #$1F     ;#%00011111
  4804 9431 D0 03		        BNE @+
  4805 9433 4C 62 95		        JMP j3255
  4806
  4807 9436 60			@	    RTS
  4808
  4809 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4810 				; Compares hero with sprite X, and based on positions updates 04AC var.
  4811 9437 BD 05 D8		s3128   LDA SPRITES_X_HI05,X
  4812 943A CD 00 D8		        CMP SPRITES_X_HI00
  4813 943D 90 2C		        BCC _s31_01
  4814 943F D0 4F		        BNE _s31_04
  4815
  4816 9441 BD 15 D8		        LDA SPRITES_X_LO05,X
  4817 9444 18			        CLC
  4818 9445 69 1E		        ADC #$1E     ;#%00011110
  4819 9447 CD 10 D8		        CMP SPRITES_X_LO00
  4820 944A 90 1F		        BCC _s31_01
  4821 944C 38			        SEC
  4822 944D E9 3C		        SBC #$3C     ;#%00111100
  4823 944F CD 10 D8		        CMP SPRITES_X_LO00
  4824 9452 B0 3C		        BCS _s31_04
  4825 9454 BD 25 D8		        LDA SPRITES_Y05,X
  4826 9457 18			        CLC
  4827 9458 69 14		        ADC #$14     ;#%00010100
  4828 945A CD 20 D8		        CMP SPRITES_Y00
  4829 945D 90 09		        BCC _s31_00
  4830 945F 38			        SEC
  4831 9460 E9 28		        SBC #$28     ;#%00101000
  4832 9462 CD 20 D8		        CMP SPRITES_Y00
  4833 9465 B0 4E		        BCS _s31_07
  4834 9467 60			        RTS
  4835
  4836 9468 4C DA 94		_s31_00    JMP _s31_10
  4837
  4838 946B BD 25 D8		_s31_01    LDA SPRITES_Y05,X
  4839 946E 18			        CLC
  4840 946F 69 14		        ADC #$14     ;#%00010100
  4841 9471 CD 20 D8		        CMP SPRITES_Y00
  4842 9474 90 0E		        BCC _s31_02
  4843 9476 38			        SEC
  4844 9477 E9 28		        SBC #$28     ;#%00101000
  4845 9479 CD 20 D8		        CMP SPRITES_Y00
  4846 947C B0 0C		        BCS _s31_03
  4847 947E A9 04		        LDA #$04     ;#%00000100
  4848 9480 9D 9F D8		        STA SPRITES_TMP_B05,X
  4849 9483 60			        RTS
  4850
  4851 9484 A9 06		_s31_02    LDA #$06     ;#%00000110
  4852 9486 9D 9F D8		        STA SPRITES_TMP_B05,X
  4853 9489 60			        RTS
  4854
  4855 948A A9 02		_s31_03    LDA #$02     ;#%00000010
  4856 948C 9D 9F D8		        STA SPRITES_TMP_B05,X
  4857 948F 60			        RTS
  4858
  4859 9490 BD 25 D8		_s31_04    LDA SPRITES_Y05,X
  4860 9493 18			        CLC
  4861 9494 69 14		        ADC #$14     ;#%00010100
  4862 9496 CD 20 D8		        CMP SPRITES_Y00
  4863 9499 90 0E		        BCC _s31_05
  4864 949B 38			        SEC
  4865 949C E9 28		        SBC #$28     ;#%00101000
  4866 949E CD 20 D8		        CMP SPRITES_Y00
  4867 94A1 B0 0C		        BCS _s31_06
  4868 94A3 A9 0C		        LDA #$0C     ;#%00001100
  4869 94A5 9D 9F D8		        STA SPRITES_TMP_B05,X
  4870 94A8 60			        RTS
  4871
  4872 94A9 A9 0A		_s31_05    LDA #$0A     ;#%00001010
  4873 94AB 9D 9F D8		        STA SPRITES_TMP_B05,X
  4874 94AE 60			        RTS
  4875
  4876 94AF A9 0E		_s31_06    LDA #$0E     ;#%00001110
  4877 94B1 9D 9F D8		        STA SPRITES_TMP_B05,X
  4878 94B4 60			        RTS
  4879
  4880 94B5 BD 15 D8		_s31_07    LDA SPRITES_X_LO05,X
  4881 94B8 18			        CLC
  4882 94B9 69 1E		        ADC #$1E     ;#%00011110
  4883 94BB CD 10 D8		        CMP SPRITES_X_LO00
  4884 94BE 90 0E		        BCC _s31_08
  4885 94C0 38			        SEC
  4886 94C1 E9 3C		        SBC #$3C     ;#%00111100
  4887 94C3 CD 10 D8		        CMP SPRITES_X_LO00
  4888 94C6 B0 0C		        BCS _s31_09
  4889 94C8 A9 00		        LDA #$00     ;#%00000000
  4890 94CA 9D 9F D8		        STA SPRITES_TMP_B05,X
  4891 94CD 60			        RTS
  4892
  4893 94CE A9 02		_s31_08    LDA #$02     ;#%00000010
  4894 94D0 9D 9F D8		        STA SPRITES_TMP_B05,X
  4895 94D3 60			        RTS
  4896
  4897 94D4 A9 0E		_s31_09    LDA #$0E     ;#%00001110
  4898 94D6 9D 9F D8		        STA SPRITES_TMP_B05,X
  4899 94D9 60			        RTS
  4900
  4901 94DA BD 15 D8		_s31_10    LDA SPRITES_X_LO05,X
  4902 94DD 18			        CLC
  4903 94DE 69 1E		        ADC #$1E     ;#%00011110
  4904 94E0 CD 10 D8		        CMP SPRITES_X_LO00
  4905 94E3 90 0E		        BCC _s31_11
  4906 94E5 38			        SEC
  4907 94E6 E9 3C		        SBC #$3C     ;#%00111100
  4908 94E8 CD 10 D8		        CMP SPRITES_X_LO00
  4909 94EB B0 0C		        BCS _s31_12
  4910 94ED A9 08		        LDA #$08     ;#%00001000
  4911 94EF 9D 9F D8		        STA SPRITES_TMP_B05,X
  4912 94F2 60			        RTS
  4913
  4914 94F3 A9 06		_s31_11    LDA #$06     ;#%00000110
  4915 94F5 9D 9F D8		        STA SPRITES_TMP_B05,X
  4916 94F8 60			        RTS
  4917
  4918 94F9 A9 0A		_s31_12    LDA #$0A     ;#%00001010
  4919 94FB 9D 9F D8		        STA SPRITES_TMP_B05,X
  4920 94FE 60			        RTS
  4921
  4922 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4923 				; ref: anim_type_1B
  4924 				; Sprites that goes out of the fort in LVL0, LVL1 and LVL3
  4925 				; Same logic as regular soldier but with some randomness at the beginning
  4926 94FF			TYPE_ANIM_SOLDIER_IN_FORT       ;$31F0
  4927 94FF EE F4 04		        INC ANY_ENEMY_IN_MAP
  4928 9502 20 94 98		        JSR GET_RANDOM
  4929 9505 29 3F		        AND #$3F     ;#%00111111
  4930 9507 D0 0B		        BNE TYPE_ANIM_SOLDIER
  4931 9509 20 F2 95		        JSR THROW_GRENADE
  4932 950C A9 00		        LDA #$00     ;#%00000000
  4933 950E 9D 65 D8		        STA SPRITES_DELTA_X05,X
  4934 9511 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  4935
  4936 				        ; fall-through
  4937
  4938 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4939 				; ref: anim_type_05
  4940 9514			TYPE_ANIM_SOLDIER        ;$3205
  4941 9514 FE AA D8		        INC SPRITES_TMP_C05,X
  4942 9517 BD 65 D8		        LDA SPRITES_DELTA_X05,X
  4943 951A 1D 75 D8		        ORA SPRITES_DELTA_Y05,X
  4944 951D F0 20		        BEQ @+
  4945 951F BD 9F D8		        LDA SPRITES_TMP_B05,X
  4946 9522 29 FE		        AND #$FE
  4947 9524 A8			        TAY
  4948 9525 B9 15 39		        LDA SOLDIER_ANIM_FRAMES,Y
  4949 9528 85 FB		        STA pFB
  4950 952A B9 16 39		        LDA SOLDIER_ANIM_FRAMES+1,Y
  4951 952D 85 FC		        STA pFC
  4952 952F AD 0A 04		        LDA GAME_TICK
  4953 9532 29 0C		        AND #$0C
  4954 9534 4A			        LSR 
  4955 9535 4A			        LSR 
  4956 9536 A8			        TAY
  4957 9537 B1 FB		        LDA (pFB),Y
  4958 9539 9D 55 D8		        STA SPRITES_PTR05,X
  4959 953C 4C 44 95		        JMP @+1
  4960
  4961 953F A9 E4		@	    LDA #$E4
  4962 9541 9D 55 D8		        STA SPRITES_PTR05,X
  4963 9544 20 C5 8B		@	    JSR UPDATE_ENEMY_PATH
  4964 9547 20 FA 8B		        JSR s28D8
  4965 954A 20 30 8C		        JSR UPDATE_ENEMY_BKG_PRI
  4966 954D 20 BB 96		        JSR j33D0
  4967 9550 BD AA D8		        LDA SPRITES_TMP_C05,X
  4968 9553 29 1F		        AND #$1F     ;#%00011111
  4969 9555 F0 0B		        BEQ j3255
  4970 9557 AD 0A 04		        LDA GAME_TICK
  4971 955A 29 1F		        AND #$1F     ;#%00011111
  4972 955C D0 03		        BNE @+
  4973 955E 20 37 94		        JSR s3128
  4974 9561 60			@	    RTS
  4975
  4976 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  4977 9562 20 94 98		j3255   JSR GET_RANDOM
  4978 9565 29 01		        AND #$01     ;#%00000001
  4979 9567 D0 44		        BNE _j32_04
  4980 9569 BD 05 D8		        LDA SPRITES_X_HI05,X
  4981 956C CD 00 D8		        CMP SPRITES_X_HI00
  4982 956F F0 10		        BEQ _j32_01
  4983 9571 90 07		        BCC _j32_00
  4984 9573 A9 0C		        LDA #$0C     ;#%00001100
  4985 9575 85 FB		        STA pFB
  4986 9577 4C 92 95		        JMP _j32_02
  4987
  4988 957A A9 04		_j32_00    LDA #$04     ;#%00000100
  4989 957C 85 FB		        STA pFB
  4990 957E 4C 92 95		        JMP _j32_02
  4991
  4992 9581 A9 04		_j32_01    LDA #$04     ;#%00000100
  4993 9583 85 FB		        STA pFB
  4994 9585 AD 10 D8		        LDA SPRITES_X_LO00
  4995 9588 38			        SEC
  4996 9589 FD 15 D8		        SBC SPRITES_X_LO05,X
  4997 958C 10 04		        BPL _j32_02
  4998 958E A9 0C		        LDA #$0C     ;#%00001100
  4999 9590 85 FB		        STA pFB
  5000 9592 AD 20 D8		_j32_02    LDA SPRITES_Y00
  5001 9595 38			        SEC
  5002 9596 FD 25 D8		        SBC SPRITES_Y05,X
  5003 9599 10 07		        BPL _j32_03
  5004 959B 46 FB		        LSR pFB
  5005 959D A5 FB		        LDA pFB
  5006 959F 4C BF 95		        JMP _j32_06
  5007
  5008 95A2 A5 FB		_j32_03    LDA pFB
  5009 95A4 18			        CLC
  5010 95A5 69 08		        ADC #$08     ;#%00001000
  5011 95A7 4A			        LSR 
  5012 95A8 85 FB		        STA pFB
  5013 95AA 4C BF 95		        JMP _j32_06
  5014
  5015 95AD 20 94 98		_j32_04    JSR GET_RANDOM
  5016 95B0 29 03		        AND #$03     ;#%00000011
  5017 95B2 38			        SEC
  5018 95B3 E9 02		        SBC #$02     ;#%00000010
  5019 95B5 C9 FE		        CMP #$FE     ;#%11111110
  5020 95B7 D0 02		        BNE _j32_05
  5021 95B9 A9 00		        LDA #$00     ;#%00000000
  5022 95BB 18			_j32_05    CLC
  5023 95BC 7D 94 D8		        ADC SPRITES_TMP_A05,X
  5024 95BF 29 0F		_j32_06    AND #$0F     ;#%00001111
  5025 95C1 9D 94 D8		        STA SPRITES_TMP_A05,X
  5026 95C4 A8			        TAY
  5027 95C5 B9 D2 95		        LDA DELTA_X_TBL,Y
  5028 95C8 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5029 95CB B9 E2 95		        LDA DELTA_Y_TBL,Y
  5030 95CE 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  5031 95D1 60			        RTS
  5032
  5033 95D2			DELTA_X_TBL
  5034 95D2 00 01 01 01 01 01 +     .BYTE $00,$01,$01,$01,$01,$01,$01,$01
  5035 95DA 00 FF FF FF FF FF +     .BYTE $00,$FF,$FF,$FF,$FF,$FF,$FF,$FF
  5036 95E2			DELTA_Y_TBL
  5037 95E2 FF FF FF 00 00 00 +     .BYTE $FF,$FF,$FF,$00,$00,$00,$01,$01
  5038 95EA 01 01 01 00 00 00 +     .BYTE $01,$01,$01,$00,$00,$00,$FF,$FF
  5039
  5040 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5041 				; Soldier tries to throw a grenade. If there are no empty seats, grenade
  5042 				; is not thrown.
  5043 95F2			THROW_GRENADE   ;$32ED
  5044 				        ; Same X part?
  5045 95F2 BD 05 D8		        LDA SPRITES_X_HI05,X
  5046 95F5 CD 00 D8		        CMP SPRITES_X_HI00
  5047 95F8 D0 0C		        BNE _THG01
  5048
  5049 				        ; Find empty seat
  5050 95FA A0 00		        LDY #$00
  5051 95FC B9 85 D8		_THG00    LDA SPRITES_TYPE05,Y
  5052 95FF F0 08		        BEQ _THG02
  5053 9601 C8			        INY
  5054 9602 C0 0B		        CPY #(TOTAL_MAX_SPRITES-5)
  5055 9604 D0 F6		        BNE _THG00
  5056
  5057 9606 A0 FF		_THG01    LDY #$FF
  5058 9608 60			        RTS
  5059
  5060 9609 8A			_THG02    TXA
  5061 960A 48			        PHA
  5062 960B BD 15 D8		        LDA SPRITES_X_LO05,X
  5063 960E 18			        CLC
  5064 960F 69 06		        ADC #$06     ;#%00000110
  5065 9611 99 15 D8		        STA SPRITES_X_LO05,Y
  5066 9614 BD 25 D8		        LDA SPRITES_Y05,X
  5067 9617 99 25 D8		        STA SPRITES_Y05,Y
  5068 961A BD 05 D8		        LDA SPRITES_X_HI05,X
  5069 961D 99 05 D8		        STA SPRITES_X_HI05,Y
  5070 9620 A9 93		        LDA #$93    ;grenade frame #0
  5071 9622 99 55 D8		        STA SPRITES_PTR05,Y
  5072 9625 A9 0E		        LDA #$0E     ;light blue
  5073 9627 99 45 D8		        STA SPRITES_COLOR05,Y
  5074 962A A9 00		        LDA #$00
  5075 962C 99 AA D8		        STA SPRITES_TMP_C05,Y
  5076 962F 99 35 D8		        STA SPRITES_BKG_PRI05,Y
  5077 9632 A9 0B		        LDA #$0B     ;anim_type_0B: grenade
  5078 9634 99 85 D8		        STA SPRITES_TYPE05,Y
  5079 9637 AD 10 D8		        LDA SPRITES_X_LO00
  5080 963A 38			        SEC
  5081 963B F9 15 D8		        SBC SPRITES_X_LO05,Y
  5082 963E 85 FB		        STA pFB
  5083 9640 B0 3F		        BCS _THG04
  5084 9642 A5 FB		        LDA pFB
  5085 9644 49 FF		        EOR #$FF
  5086 9646 85 FB		        STA pFB
  5087 9648 E6 FB		        INC pFB
  5088 964A AD 20 D8		        LDA SPRITES_Y00
  5089 964D 38			        SEC
  5090 964E F9 25 D8		        SBC SPRITES_Y05,Y
  5091 9651 85 FC		        STA pFC
  5092 9653 B0 1E		        BCS _THG03
  5093 9655 A5 FC		        LDA pFC
  5094 9657 49 FF		        EOR #$FF
  5095 9659 85 FC		        STA pFC
  5096 965B E6 FC		        INC pFC
  5097 965D 20 3E 98		        JSR s3555
  5098 9660 A5 FC		        LDA pFC
  5099 9662 49 FF		        EOR #$FF
  5100 9664 85 FC		        STA pFC
  5101 9666 E6 FC		        INC pFC
  5102 9668 A5 FB		        LDA pFB
  5103 966A 49 FF		        EOR #$FF
  5104 966C 85 FB		        STA pFB
  5105 966E E6 FB		        INC pFB
  5106 9670 4C A5 96		        JMP _THG06
  5107
  5108 9673 20 3E 98		_THG03    JSR s3555
  5109 9676 A5 FB		        LDA pFB
  5110 9678 49 FF		        EOR #$FF
  5111 967A 85 FB		        STA pFB
  5112 967C E6 FB		        INC pFB
  5113 967E 4C A5 96		        JMP _THG06
  5114
  5115 9681 AD 20 D8		_THG04    LDA SPRITES_Y00
  5116 9684 38			        SEC
  5117 9685 F9 25 D8		        SBC SPRITES_Y05,Y
  5118 9688 85 FC		        STA pFC
  5119 968A B0 16		        BCS _THG05
  5120 968C A5 FC		        LDA pFC
  5121 968E 49 FF		        EOR #$FF
  5122 9690 85 FC		        STA pFC
  5123 9692 E6 FC		        INC pFC
  5124 9694 20 3E 98		        JSR s3555
  5125 9697 A5 FC		        LDA pFC
  5126 9699 49 FF		        EOR #$FF
  5127 969B 85 FC		        STA pFC
  5128 969D E6 FC		        INC pFC
  5129 969F 4C A5 96		        JMP _THG06
  5130
  5131 96A2 20 3E 98		_THG05    JSR s3555
  5132
  5133 96A5 A5 FB		_THG06    LDA pFB
  5134 96A7 99 65 D8		        STA SPRITES_DELTA_X05,Y
  5135 96AA A5 FC		        LDA pFC
  5136 96AC 99 75 D8		        STA SPRITES_DELTA_Y05,Y
  5137 96AF B9 75 D8		        LDA SPRITES_DELTA_Y05,Y
  5138 96B2 38			        SEC
  5139 96B3 E9 02		        SBC #$02
  5140 96B5 99 75 D8		        STA SPRITES_DELTA_Y05,Y
  5141 96B8 68			        PLA
  5142 96B9 AA			        TAX
  5143 96BA 60			        RTS
  5144
  5145 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5146 				; related to shoot
  5147 96BB BD AA D8		j33D0   LDA SPRITES_TMP_C05,X
  5148 96BE 2D 04 05		        AND SHOOT_FREQ_MASK             ;cooldown for solider shooting
  5149 96C1 D0 0C		        BNE _rets01
  5150
  5151 				        ; Find empty seat
  5152 96C3 A0 00		        LDY #$00
  5153 96C5 B9 85 D8		_rets00 LDA SPRITES_TYPE05,Y
  5154 96C8 F0 06		        BEQ _rets02
  5155 96CA C8			        INY
  5156 96CB C0 0B		        CPY #(TOTAL_MAX_SPRITES-5)
  5157 96CD D0 F6		        BNE _rets00
  5158 96CF 60			_rets01 RTS
  5159
  5160 96D0 BD 05 D8		_rets02 LDA SPRITES_X_HI05,X
  5161 96D3 CD 00 D8		        CMP SPRITES_X_HI00
  5162 96D6 F0 05		        BEQ _rets03
  5163 96D8 B0 61		        BCS _rets09
  5164 96DA 4C 07 97		        JMP _rets05
  5165
  5166 96DD BD 15 D8		_rets03 LDA SPRITES_X_LO05,X
  5167 96E0 18			        CLC
  5168 96E1 69 1E		        ADC #$1E     ;#%00011110
  5169 96E3 CD 10 D8		        CMP SPRITES_X_LO00
  5170 96E6 90 1F		        BCC _rets05
  5171 96E8 38			        SEC
  5172 96E9 E9 3C		        SBC #$3C     ;#%00111100
  5173 96EB CD 10 D8		        CMP SPRITES_X_LO00
  5174 96EE B0 4B		        BCS _rets09
  5175 96F0 BD 25 D8		        LDA SPRITES_Y05,X
  5176 96F3 18			        CLC
  5177 96F4 69 14		        ADC #$14     ;#%00010100
  5178 96F6 CD 20 D8		        CMP SPRITES_Y00
  5179 96F9 90 09		        BCC _rets04
  5180 96FB 38			        SEC
  5181 96FC E9 28		        SBC #$28     ;#%00101000
  5182 96FE CD 20 D8		        CMP SPRITES_Y00
  5183 9701 B0 69		        BCS _rets12
  5184 9703 60			        RTS
  5185
  5186 9704 4C 9B 97		_rets04 JMP _rets15
  5187
  5188 9707 BD 25 D8		_rets05 LDA SPRITES_Y05,X
  5189 970A 18			        CLC
  5190 970B 69 14		        ADC #$14     ;#%00010100
  5191 970D CD 20 D8		        CMP SPRITES_Y00
  5192 9710 90 12		        BCC _rets06
  5193 9712 38			        SEC
  5194 9713 E9 28		        SBC #$28     ;#%00101000
  5195 9715 CD 20 D8		        CMP SPRITES_Y00
  5196 9718 B0 14		        BCS _rets07
  5197 971A BD 9F D8		        LDA SPRITES_TMP_B05,X
  5198 971D 29 FE		        AND #$FE     ;#%11111110
  5199 971F C9 04		        CMP #$04     ;#%00000100
  5200 9721 F0 15		        BEQ _rets08
  5201 9723 60			        RTS
  5202
  5203 9724 BD 9F D8		_rets06 LDA SPRITES_TMP_B05,X
  5204 9727 29 FE		        AND #$FE     ;#%11111110
  5205 9729 C9 06		        CMP #$06     ;#%00000110
  5206 972B F0 0B		        BEQ _rets08
  5207 972D 60			        RTS
  5208
  5209 972E BD 9F D8		_rets07 LDA SPRITES_TMP_B05,X
  5210 9731 29 FE		        AND #$FE     ;#%11111110
  5211 9733 C9 02		        CMP #$02     ;#%00000010
  5212 9735 F0 01		        BEQ _rets08
  5213 9737 60			        RTS
  5214
  5215 9738 4C CC 97		_rets08 JMP _rets18
  5216
  5217 973B BD 25 D8		_rets09 LDA SPRITES_Y05,X
  5218 973E 18			        CLC
  5219 973F 69 14		        ADC #$14     ;#%00010100
  5220 9741 CD 20 D8		        CMP SPRITES_Y00
  5221 9744 90 12		        BCC _rets10
  5222 9746 38			        SEC
  5223 9747 E9 28		        SBC #$28     ;#%00101000
  5224 9749 CD 20 D8		        CMP SPRITES_Y00
  5225 974C B0 14		        BCS _rets11
  5226 974E BD 9F D8		        LDA SPRITES_TMP_B05,X
  5227 9751 29 FE		        AND #$FE     ;#%11111110
  5228 9753 C9 0C		        CMP #$0C     ;#%00001100
  5229 9755 F0 E1		        BEQ _rets08
  5230 9757 60			        RTS
  5231
  5232 9758 BD 9F D8		_rets10 LDA SPRITES_TMP_B05,X
  5233 975B 29 FE		        AND #$FE     ;#%11111110
  5234 975D C9 0A		        CMP #$0A     ;#%00001010
  5235 975F F0 D7		        BEQ _rets08
  5236 9761 60			        RTS
  5237
  5238 9762 BD 9F D8		_rets11 LDA SPRITES_TMP_B05,X
  5239 9765 29 FE		        AND #$FE     ;#%11111110
  5240 9767 C9 0E		        CMP #$0E     ;#%00001110
  5241 9769 F0 CD		        BEQ _rets08
  5242 976B 60			        RTS
  5243
  5244 976C BD 15 D8		_rets12 LDA SPRITES_X_LO05,X
  5245 976F 18			        CLC
  5246 9770 69 1E		        ADC #$1E     ;#%00011110
  5247 9772 CD 10 D8		        CMP SPRITES_X_LO00
  5248 9775 90 10		        BCC _rets13
  5249 9777 38			        SEC
  5250 9778 E9 3C		        SBC #$3C     ;#%00111100
  5251 977A CD 10 D8		        CMP SPRITES_X_LO00
  5252 977D B0 12		        BCS _rets14
  5253 977F BD 9F D8		        LDA SPRITES_TMP_B05,X
  5254 9782 29 FE		        AND #$FE     ;#%11111110
  5255 9784 F0 46		        BEQ _rets18
  5256 9786 60			        RTS
  5257
  5258 9787 BD 9F D8		_rets13 LDA SPRITES_TMP_B05,X
  5259 978A 29 FE		        AND #$FE     ;#%11111110
  5260 978C C9 02		        CMP #$02     ;#%00000010
  5261 978E F0 3C		        BEQ _rets18
  5262 9790 60			        RTS
  5263
  5264 9791 BD 9F D8		_rets14 LDA SPRITES_TMP_B05,X
  5265 9794 29 FE		        AND #$FE     ;#%11111110
  5266 9796 C9 0E		        CMP #$0E     ;#%00001110
  5267 9798 F0 32		        BEQ _rets18
  5268 979A 60			        RTS
  5269
  5270 979B BD 15 D8		_rets15 LDA SPRITES_X_LO05,X
  5271 979E 18			        CLC
  5272 979F 69 1E		        ADC #$1E     ;#%00011110
  5273 97A1 CD 10 D8		        CMP SPRITES_X_LO00
  5274 97A4 90 12		        BCC _rets16
  5275 97A6 38			        SEC
  5276 97A7 E9 3C		        SBC #$3C     ;#%00111100
  5277 97A9 CD 10 D8		        CMP SPRITES_X_LO00
  5278 97AC B0 14		        BCS _rets17
  5279 97AE BD 9F D8		        LDA SPRITES_TMP_B05,X
  5280 97B1 29 FE		        AND #$FE     ;#%11111110
  5281 97B3 C9 08		        CMP #$08     ;#%00001000
  5282 97B5 F0 15		        BEQ _rets18
  5283 97B7 60			        RTS
  5284
  5285 97B8 BD 9F D8		_rets16 LDA SPRITES_TMP_B05,X
  5286 97BB 29 FE		        AND #$FE     ;#%11111110
  5287 97BD C9 06		        CMP #$06     ;#%00000110
  5288 97BF F0 0B		        BEQ _rets18
  5289 97C1 60			        RTS
  5290
  5291 97C2 BD 9F D8		_rets17 LDA SPRITES_TMP_B05,X
  5292 97C5 29 FE		        AND #$FE     ;#%11111110
  5293 97C7 C9 0A		        CMP #$0A     ;#%00001010
  5294 97C9 F0 01		        BEQ _rets18
  5295 97CB 60			        RTS
  5296
  5297 97CC 86 FB		_rets18 STX pFB
  5298 97CE 9D 9F D8		        STA SPRITES_TMP_B05,X
  5299 97D1 AA			        TAX
  5300 97D2 BD 1E 98		        LDA _DELTA_X_TBL,X
  5301 97D5 99 65 D8		        STA SPRITES_DELTA_X05,Y
  5302 97D8 BD 2E 98		        LDA _DELTA_Y_TBL,X
  5303 97DB 99 75 D8		        STA SPRITES_DELTA_Y05,Y
  5304 97DE BD 65 3A		        LDA f3617,X
  5305 97E1 99 15 D8		        STA SPRITES_X_LO05,Y
  5306 97E4 BD 75 3A		        LDA f3627,X
  5307 97E7 99 25 D8		        STA SPRITES_Y05,Y
  5308 97EA A6 FB		        LDX pFB
  5309 97EC BD 15 D8		        LDA SPRITES_X_LO05,X
  5310 97EF 18			        CLC
  5311 97F0 79 15 D8		        ADC SPRITES_X_LO05,Y
  5312 97F3 99 15 D8		        STA SPRITES_X_LO05,Y
  5313 97F6 BD 25 D8		        LDA SPRITES_Y05,X
  5314 97F9 18			        CLC
  5315 97FA 79 25 D8		        ADC SPRITES_Y05,Y
  5316 97FD 99 25 D8		        STA SPRITES_Y05,Y
  5317 9800 BD 05 D8		        LDA SPRITES_X_HI05,X
  5318 9803 99 05 D8		        STA SPRITES_X_HI05,Y
  5319 9806 A9 90		        LDA #$90     ;bullet frame
  5320 9808 99 55 D8		        STA SPRITES_PTR05,Y
  5321 980B A9 01		        LDA #$01     ;white
  5322 980D 99 45 D8		        STA SPRITES_COLOR05,Y
  5323 9810 A9 00		        LDA #$00     ;#%00000000
  5324 9812 99 AA D8		        STA SPRITES_TMP_C05,Y
  5325 9815 99 35 D8		        STA SPRITES_BKG_PRI05,Y
  5326 9818 A9 08		        LDA #$08            ;anim_type_08: soldier bullet
  5327 981A 99 85 D8		        STA SPRITES_TYPE05,Y
  5328 981D 60			        RTS
  5329
  5330 				        ; Sprite delta X tbl
  5331 981E			_DELTA_X_TBL    ;$3535
  5332 981E 00 01 01 02 02 02 +         .BYTE $00,$01,$01,$02,$02,$02,$01,$01
  5333 9826 00 FF FF FE FE FE +         .BYTE $00,$FF,$FF,$FE,$FE,$FE,$FF,$FF
  5334
  5335 				        ; Sprite delta Y tbl
  5336 982E			_DELTA_Y_TBL    ;$3545
  5337 982E FE FE FF FF 00 01 +         .BYTE $FE,$FE,$FF,$FF,$00,$01,$01,$02
  5338 9836 02 02 01 01 00 FF +         .BYTE $02,$02,$01,$01,$00,$FF,$FF,$FE
  5339
  5340 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5341 983E A2 05		s3555   LDX #$05
  5342 9840 46 FB		@	    LSR pFB
  5343 9842 46 FC		        LSR pFC
  5344 9844 CA			        DEX
  5345 9845 10 F9		        BPL @-
  5346 9847 60			        RTS
  5347
  5348 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5349 				; ref: anim_type_06
  5350 				; Animation when regular soldier dies
  5351 9848			TYPE_ANIM_SOLDIER_DIE  ;$3561
  5352 9848 FE AA D8		        INC SPRITES_TMP_C05,X
  5353 984B BD AA D8		        LDA SPRITES_TMP_C05,X
  5354 984E C9 18		        CMP #$18     ;#%00011000
  5355 9850 F0 08		        BEQ @+
  5356 9852 A8			        TAY
  5357 9853 B9 5D 98		        LDA _FRAME_TBL,Y
  5358 9856 9D 55 D8		        STA SPRITES_PTR05,X
  5359 9859 60			        RTS
  5360
  5361 985A 4C 75 98		@	    JMP CLEANUP_SPRITE
  5362
  5363 				        ; Sprite frames
  5364 985D			_FRAME_TBL      ;f3576
  5365 985D BE FF BE FF BE FF +         .BYTE $BE,$FF,$BE,$FF,$BE,$FF,$BF,$FF
  5366 9865 BF FF BF FF BE FF +         .BYTE $BF,$FF,$BF,$FF,$BE,$FF,$BE,$FF
  5367 986D BE FF BF FF BF	        .BYTE $BE,$FF,$BF,$FF,$BF
  5368 9872 FF BF FF		        .BYTE $FF,$BF,$FF	
  5369
  5370 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5371 				; Cleanup current sprite: init sprites and leaves the seat available
  5372 				; X=sprite to cleanup
  5373 9875			CLEANUP_SPRITE      ;$358E
  5374 9875 A9 00		        LDA #$00
  5375 9877 9D 85 D8		        STA SPRITES_TYPE05,X
  5376 987A 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5377 987D 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  5378 9880 BD 53 2C		        LDA ORIG_SPRITE_Y05,X
  5379 9883 9D 25 D8		        STA SPRITES_Y05,X
  5380 9886 A9 64		        LDA #$64
  5381 9888 9D 15 D8		        STA SPRITES_X_LO05,X
  5382 988B A9 FF		        LDA #$FF
  5383 988D 9D 05 D8		        STA SPRITES_X_HI05,X
  5384 9890 9D 55 D8		        STA SPRITES_PTR05,X             ;set empty sprite frame
  5385 9893 60			        RTS
  5386
  5387 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5388 				; Not really a random number generator, but used as one.
  5389 				; This function kind of duplicates the value in $0400/$0401
  5390 				; This function is used mostly to place certain enemies in a pseudo-random
  5391 				; position.
  5392 9894			GET_RANDOM      ;$4006
  5393 9894 AD 00 04		        LDA a0400
  5394 9897 0A			        ASL 
  5395 9898 2E 01 04		        ROL a0401
  5396 989B 2E 00 04		        ROL a0400
  5397 989E AD 01 04		        LDA a0401
  5398 98A1 4D 00 04		        EOR a0400
  5399 98A4 6D 01 04		        ADC a0401
  5400 98A7 8D 00 04		        STA a0400
  5401 98AA 60			        RTS
  5402 						
  5403 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5404 				; Sets the random "seed". Any value different than 0 is valid, since
  5405 				; a 0 will generate 0 all the time.
  5406 98AB			INIT_RANDOM     ;$401D
  5407 98AB AD 0A D2		        LDA random    ;Raster Position
  5408 98AE 8D 00 04		        STA a0400
  5409 98B1 AD 0A D2		        lda random
  5410 98B4 8D 01 04		        STA a0401
  5411 98B7 F0 F2		        BEQ INIT_RANDOM
  5412 98B9 60			        RTS		
  5413 						
  5414 				//////////////////////////////
  5415
  5416 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5417 				; Execute actions according to the scroll Y position
  5418 				; An action can to create a new enemy (obj), or things like open the door
  5419 				; that don't require any kind of object creation.
  5420 				;
  5421 				; For the case of new objects, one seat must be available for the sprite
  5422 				; creation but it might be possible that the new object uses an extra
  5423 				; sprite (like the bike that requires two) in case an extra seat is
  5424 				; available.
  5425 				;
  5426 				; It is possible that two different actions creates the same sprite
  5427 				; type. This happens when it wants to create the same sprite type, but
  5428 				; the sprite type must be init in a different way. E.g: one for placing
  5429 				; the sprite type at the left, and the other at the right of the screen.
  5430 				;
  5431 				; TODO: How many actions per row are possible? 8?
  5432 98BA			RUN_ACTIONS   ;$1BA9
  5433 98BA AC E8 04		        LDY TRIGGER_ROW_IDX
  5434 98BD B1 24		        LDA (p24),Y
  5435 98BF CD 03 04		        CMP V_SCROLL_ROW_IDX
  5436 98C2 F0 01		        BEQ @+
  5437 98C4 60			        RTS
  5438
  5439 98C5 EE E8 04		@	    INC TRIGGER_ROW_IDX
  5440
  5441 				/*        ; Find empty seat
  5442 				        LDX #(TOTAL_MAX_SPRITES-5-1)
  5443 				@	    LDA SPRITES_TYPE05,X
  5444 				        BEQ @+2
  5445 				        DEX
  5446 				        BPL @- */
  5446
  5447
  5448 				        ; FIXME: Loop tried twice, probably a bug. Remove
  5449
  5450 98C8 A2 0A		        LDX #(TOTAL_MAX_SPRITES-5-1)
  5451 98CA BD 85 D8		@	    LDA SPRITES_TYPE05,X
  5452 98CD F0 28		        BEQ @+1
  5453 98CF CA			        DEX
  5454 98D0 10 F8		        BPL @-
  5455
  5456 				        ; If an empty seat (type == 0) cannot be found, try reusing one with
  5457 				        ; lower priority
  5458
  5459 				        ; Lower priority ones:
  5460 				        ; $08, $09, $13, $0C, $06, $0B, $05
  5461 98D2 A2 0A		        LDX #(TOTAL_MAX_SPRITES-1-5)				;USUWA OBIEKT o NISKIM PRIORYTECIE JESLI BRAKUJE DUSZKOW
  5462 98D4 BD 85 D8		@	    LDA SPRITES_TYPE05,X
  5463 98D7 C9 08		        CMP #$08        ;anim_type_08: soldier bullet
  5464 98D9 F0 1C		        BEQ @+
  5465 98DB C9 09		        CMP #$09        ;anim_type_09: soldier bullet end
  5466 98DD F0 18		        BEQ @+
  5467 98DF C9 13		        CMP #$13        ;anim_type_13: delayed cleanup
  5468 98E1 F0 14		        BEQ @+
  5469 98E3 C9 0C		        CMP #$0C        ;anim_type_0C: explosion
  5470 98E5 F0 10		        BEQ @+
  5471 98E7 C9 06		        CMP #$06        ;anim_type_06: soldier die
  5472 98E9 F0 0C		        BEQ @+
  5473 98EB C9 0B		        CMP #$0B        ;anim_type_0B: grenade
  5474 98ED F0 08		        BEQ @+
  5475 98EF C9 05		        CMP #$05        ;anim_type_05: regular solider
  5476 98F1 F0 04		        BEQ @+
  5477 98F3 CA			        DEX
  5478 98F4 10 DE		        BPL @-
  5479
  5480 				        ; It might be possible that a new sprite cannot be alloced
  5481 98F6 60			        RTS
  5482
  5483 				        ; Create the action
  5484
  5485 98F7 84 FD		@	    STY pFD
  5486 98F9 B1 28		        LDA (p28),Y
  5487 98FB 0A			        ASL 
  5488 98FC A8			        TAY
  5489 98FD B9 0A 99		        LDA ACTION_TBL,Y
  5490 9900 85 FB		        STA pFB
  5491 9902 B9 0B 99		        LDA ACTION_TBL+1,Y
  5492 9905 85 FC		        STA pFC
  5493 9907 6C FB 00		        JMP (pFB)
  5494
  5495 990A			ACTION_TBL                              ;$1C06
  5496 990A 5F 9D		        dta a(ACTION_NEW_SOLDIER_BEHIND_TRENCH)  ;$00
  5497 990C D0 9D		        dta a(ACTION_NEW_JUMPING_SOLDIER_R)      ;$01
  5498 990E 14 9E		        dta a(ACTION_NEW_JUMPING_SOLDIER_L)      ;$02
  5499 9910 2B 9D		        dta a(ACTION_NEW_MORTAR_ENEMY)           ;$03
  5500 9912 B0 9C		        dta a(ACTION_NEW_BIKE_LVL0)              ;$04
  5501 9914 80 9C		        dta a(ACTION_NEW_POW_GUARD)              ;$05
  5502 9916 50 9C		        dta a(ACTION_NEW_POW)                    ;$06
  5503 9918 21 9C		        dta a(ACTION_NEW_GRENADE_BOX)            ;$07
  5504 991A 58 9E		        dta a(ACTION_NEW_SOLDIER_FROM_SIDE_L)    ;$08
  5505 991C 6F 9E		        dta a(ACTION_NEW_SOLDIER_FROM_SIDE_R)    ;$09
  5506 991E E8 9B		        dta a(ACTION_NEW_SOLDIER_FROM_SIDE_R_B)  ;$0A
  5507 9920 57 99		        dta a(ACTION_OPEN_DOOR)                  ;$0B
  5508 9922 B5 9E		        dta a(ACTION_0C)                         ;$0C
  5509 9924 A3 9B		        dta a(ACTION_NEW_BOSS_LVL0)              ;$0D
  5510 9926 96 9D		        dta a(ACTION_NEW_SOLDIER_IN_TRENCH)      ;$0E
  5511 9928 45 9B		        dta a(ACTION_NEW_TURRET_CANNON_L)        ;$0F
  5512 992A 74 9B		        dta a(ACTION_NEW_TURRET_CANNON_R)        ;$10
  5513 992C F3 9A		        dta a(ACTION_NEW_BAZOOKA_ENEMY_R)        ;$11
  5514 992E 0F 9B		        dta a(ACTION_NEW_BAZOOKA_ENEMY_L)        ;$12
  5515 9930 81 9A		        dta a(ACTION_NEW_BIKE_LVL1)              ;$13
  5516 9932 DF 99		        dta a(ACTION_NEW_TRUCK)                  ;$14
  5517 9934 A4 99		        dta a(ACTION_NEW_CART_UP_LVL1)           ;$15
  5518 9936 51 9A		        dta a(ACTION_NEW_PINK_CAR)               ;$16
  5519 9938 69 99		        dta a(ACTION_17)                        ;$17
  5520 993A 5C 99		        dta a(ACTION_18)                         ;$18
  5521 993C 4E 99		        dta a(ACTION_NEW_SOLDIER_IN_TOWER)       ;$19
  5522 993E 45 99		        dta a(ACTION_1A)                         ;$1A
  5523 9940 44 99		        dta a(ACTION_VOID)                       ;$1B
  5524 9942 81 9A				dta a(ACTION_NEW_BIKE_LVL1)			;$1C obecnie nic
  5525
  5526
  5527
  5528 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5529 				; ref: action_1B
  5530 9944			ACTION_VOID        ;$1E4E
  5531 9944 60			        RTS
  5532
  5533 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5534 				; ref: action_1A
  5535 				; Create sprite type: $28
  5536 				; Unused. Only referenced from LVL2.
  5537 				; FIXME: remove me
  5538 9945			ACTION_1A       ;$1E4F
  5539 9945 20 2B 9D		        JSR ACTION_NEW_MORTAR_ENEMY
  5540 9948 A9 28		        LDA #$28        ;anim_type_28:
  5541 994A 9D 85 D8		        STA SPRITES_TYPE05,X
  5542 994D 60			        RTS
  5543
  5544 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5545 				; ref: action_19
  5546 994E			ACTION_NEW_SOLDIER_IN_TOWER       ;$1E58
  5547 994E 20 5F 9D		        JSR ACTION_NEW_SOLDIER_BEHIND_TRENCH
  5548 9951 A9 27		        LDA #$27        ;anim_type_27: tower in lvl3 shoot
  5549 9953 9D 85 D8		        STA SPRITES_TYPE05,X
  5550 9956 60			        RTS
  5551
  5552 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5553 				; ref: action_0B
  5554 				; Open door
  5555 9957			ACTION_OPEN_DOOR    ;$1E61
  5556 9957 A9 02		        LDA #$02     ;Draw open door
  5557 9959 4C 9C 9F		        JMP LEVEL_PATCH_DOOR
  5558
  5559 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5560 				; ref: action_18
  5561 				; Unused action. Only used in LVL2, which is not present in the game.
  5562 				; Uses anim_type_26
  5563 				; FIXME: remove me
  5564 995C			ACTION_18       ;$1E66
  5565 995C A9 06		        LDA #$06     ;#%00000110
  5566 995E 9D 9F D8		        STA SPRITES_TMP_B05,X
  5567 				        ;LDA #$F5     ;Frame: Door right open?
  5568 9961 A9 FF				lda #$ff
  5569 9963 9D 55 D8		        STA SPRITES_PTR05,X
  5570 9966 4C 73 99		        JMP j1E7D
  5571
  5572 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5573 				; ref: action_17
  5574 				; Unused action. Only used in LVL2, which is not present in the game.
  5575 				; FIXME: remove me
  5576 9969			ACTION_17       ;$1E73
  5577 9969 A9 0A		        LDA #$0A     ;#%00001010
  5578 996B 9D 9F D8		        STA SPRITES_TMP_B05,X
  5579 996E A9 FF				lda #$ff
  5580 				        ;LDA #$F4     ;Frame: Door left open?
  5581 9970 9D 55 D8		        STA SPRITES_PTR05,X
  5582
  5583 				        ; fall-through
  5584
  5585 9973 A4 FD		j1E7D   LDY pFD
  5586 9975 B1 22		        LDA (p22),Y
  5587 9977 9D 15 D8		        STA SPRITES_X_LO05,X
  5588 997A A9 28		        LDA #$28
  5589 997C 9D 25 D8		        STA SPRITES_Y05,X
  5590 997F A9 0B		        LDA #$0B     ;dark grey
  5591 9981 9D 45 D8		        STA SPRITES_COLOR05,X
  5592 9984 B1 26		        LDA (p26),Y
  5593 9986 9D 05 D8		        STA SPRITES_X_HI05,X
  5594 9989 A9 00		        LDA #$00
  5595 998B 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5596 998E 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  5597 9991 20 94 98		        JSR GET_RANDOM
  5598 9994 9D AA D8		        STA SPRITES_TMP_C05,X
  5599 9997 A9 FF		        LDA #$FF
  5600 9999 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  5601 999C A9 26		        LDA #$26            ;anim_type_26:
  5602 999E 9D 85 D8		        STA SPRITES_TYPE05,X
  5603 99A1 60			        RTS
  5604
  5605 99A2 78 D2		f1EAD   .BYTE $78,$D2
  5606
  5607 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5608 				; ref: action_15
  5609 99A4			ACTION_NEW_CART_UP_LVL1     ;$1EAF
  5610 99A4 20 94 98		        JSR GET_RANDOM
  5611 99A7 29 01		        AND #$01
  5612 99A9 A8			        TAY
  5613 99AA B9 A2 99		        LDA f1EAD,Y
  5614 99AD 9D 15 D8		        STA SPRITES_X_LO05,X
  5615 99B0 A9 B8		        LDA #$B8
  5616 99B2 9D 25 D8		        STA SPRITES_Y05,X
  5617 99B5 A9 FE		        LDA #$FE            ;go up
  5618 99B7 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  5619 99BA A9 F3		        LDA #$F3            ;cart going up frame
  5620 99BC 9D 55 D8		        STA SPRITES_PTR05,X
  5621 99BF A9 06		        LDA #$06     ;blue
  5622 99C1 9D 45 D8		        STA SPRITES_COLOR05,X
  5623 99C4 A9 00		        LDA #$00
  5624 99C6 9D 05 D8		        STA SPRITES_X_HI05,X
  5625 99C9 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  5626 99CC 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5627 99CF 9D AA D8		        STA SPRITES_TMP_C05,X
  5628 99D2 A9 08		        LDA #$08
  5629 99D4 9D 9F D8		        STA SPRITES_TMP_B05,X
  5630 99D7 A9 25		        LDA #$25            ;anim_type_25: cart in lvl2 going up
  5631 99D9 9D 85 D8		        STA SPRITES_TYPE05,X
  5632 99DC A9 05		        LDA #$05
  5633 				        //JSR SFX_PLAY
  5634 99DE 60			        RTS
  5635
  5636 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5637 				; ref: action_14
  5638 				; Create truck that carries soldiers in LVL3.
  5639 				; Moves horizontally from R to L.
  5640 99DF			ACTION_NEW_TRUCK       ;$1EED
  5641 99DF A9 3E		        LDA #$3E
  5642 99E1 9D 15 D8		        STA SPRITES_X_LO05,X
  5643 99E4 A9 64		        LDA #$64
  5644 99E6 9D 25 D8		        STA SPRITES_Y05,X
  5645 99E9 A9 F1		        LDA #$F1
  5646 99EB 9D 55 D8		        STA SPRITES_PTR05,X
  5647 99EE A9 08		        LDA #$08     ;orange
  5648 99F0 9D 45 D8		        STA SPRITES_COLOR05,X
  5649 99F3 A9 FF		        LDA #$FF
  5650 99F5 9D 05 D8		        STA SPRITES_X_HI05,X
  5651 99F8 A9 FF		        LDA #$FF
  5652 99FA 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5653 99FD A9 00		        LDA #$00
  5654 99FF 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  5655 9A02 9D AA D8		        STA SPRITES_TMP_C05,X
  5656 9A05 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  5657 9A08 A9 23		        LDA #$23            ;anim_type_23: void
  5658 9A0A 9D 85 D8		        STA SPRITES_TYPE05,X
  5659
  5660 				        ; Find empty seat
  5661 9A0D A0 00		        LDY #$00
  5662 9A0F B9 85 D8		@	    LDA SPRITES_TYPE05,Y
  5663 9A12 F0 06		        BEQ @+
  5664 9A14 C8			        INY
  5665 9A15 C0 0B		        CPY #(TOTAL_MAX_SPRITES-5)
  5666 9A17 D0 F6		        BNE @-
  5667 9A19 60			        RTS
  5668
  5669 9A1A 98			@	    TYA
  5670 9A1B 9D 94 D8		        STA SPRITES_TMP_A05,X                     ;links Y with X
  5671 9A1E A9 56		        LDA #$56
  5672 9A20 99 15 D8		        STA SPRITES_X_LO05,Y
  5673 9A23 A9 64		        LDA #$64
  5674 9A25 99 25 D8		        STA SPRITES_Y05,Y
  5675 9A28 A9 F2		        LDA #$F2
  5676 9A2A 99 55 D8		        STA SPRITES_PTR05,Y
  5677 9A2D A9 08		        LDA #$08     ;orange  green
  5678 9A2F 99 45 D8		        STA SPRITES_COLOR05,Y
  5679 9A32 A9 FF		        LDA #$FF
  5680 9A34 99 05 D8		        STA SPRITES_X_HI05,Y
  5681 9A37 A9 FF		        LDA #$FF
  5682 9A39 99 65 D8		        STA SPRITES_DELTA_X05,Y
  5683 9A3C A9 00		        LDA #$00
  5684 9A3E 99 75 D8		        STA SPRITES_DELTA_Y05,Y
  5685 9A41 99 AA D8		        STA SPRITES_TMP_C05,Y
  5686 9A44 99 35 D8		        STA SPRITES_BKG_PRI05,Y
  5687 9A47 A9 24		        LDA #$24            ;anim_type_24:solider jump (from truck)
  5688 9A49 99 85 D8		        STA SPRITES_TYPE05,Y
  5689 9A4C 8A			        TXA
  5690 9A4D 99 94 D8		        STA SPRITES_TMP_A05,Y                     ;links X with Y
  5691 9A50 60			        RTS
  5692
  5693 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5694 				; ref: action_16
  5695 				; Create the pink car that moves horizontally, from left to right at the
  5696 				; beginning of LVL1.
  5697 				; Uses anim_type_22.
  5698 				; Requires an extra empty seat
  5699 9A51			ACTION_NEW_PINK_CAR     ;$1F5F
  5700 				        ; FIXME: Might override existing seat. ACTION_NEW_BIKE_LVL1 might fail
  5701 				        ; if no extra seat is found. The fix should be:
  5702 				        ; If Y == #$0B, ret
  5703 9A51 20 81 9A		        JSR ACTION_NEW_BIKE_LVL1
  5704
  5705 9A54 A9 1E		        LDA #$1E
  5706 9A56 9D 15 D8		        STA SPRITES_X_LO05,X
  5707 9A59 A9 36		        LDA #$36
  5708 9A5B 99 15 D8		        STA SPRITES_X_LO05,Y
  5709 9A5E A9 00		        LDA #$00
  5710 9A60 9D 05 D8		        STA SPRITES_X_HI05,X
  5711 9A63 99 05 D8		        STA SPRITES_X_HI05,Y
  5712 9A66 A9 B6		        LDA #$B6            ;car back frame
  5713 9A68 9D 55 D8		        STA SPRITES_PTR05,X
  5714 9A6B A9 B7		        LDA #$B7            ;car front frame
  5715 9A6D 99 55 D8		        STA SPRITES_PTR05,Y
  5716 9A70 A9 04		        LDA #$04            ;purple
  5717 9A72 9D 45 D8		        STA SPRITES_COLOR05,X
  5718 9A75 99 45 D8		        STA SPRITES_COLOR05,Y
  5719 9A78 A9 02		        LDA #$02            ;Move right
  5720 9A7A 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5721 9A7D 99 65 D8		        STA SPRITES_DELTA_X05,Y
  5722 9A80 60			        RTS
  5723
  5724 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5725 				; ref: action_13
  5726 				; Create bike that moves horizontally from R to L at LVL1.
  5727 				; Requires an extra empty seat
  5728 9A81			ACTION_NEW_BIKE_LVL1       ;$1F8F
  5729 9A81 A0 00		        LDY #$00
  5730 				        ; Find empty seat
  5731 9A83 B9 85 D8		@	    LDA SPRITES_TYPE05,Y
  5732 9A86 F0 06		        BEQ @+
  5733 9A88 C8			        INY
  5734 9A89 C0 0B		        CPY #(TOTAL_MAX_SPRITES-5)
  5735 9A8B D0 F6		        BNE @-
  5736 9A8D 60			        RTS
  5737
  5738 9A8E 98			@	    TYA
  5739 9A8F 9D 94 D8		        STA SPRITES_TMP_A05,X             ;links Y with X
  5740 9A92 A9 3E		        LDA #$3E
  5741 9A94 9D 15 D8		        STA SPRITES_X_LO05,X
  5742 9A97 A9 82		        LDA #$82
  5743 9A99 9D 25 D8		        STA SPRITES_Y05,X
  5744 9A9C A9 B0		        LDA #$B0                ;bike front frame
  5745 9A9E 9D 55 D8		        STA SPRITES_PTR05,X
  5746 9AA1 A9 0B		        LDA #$0B                ;dark grey
  5747 9AA3 9D 45 D8		        STA SPRITES_COLOR05,X
  5748 9AA6 A9 FF		        LDA #$FF
  5749 9AA8 9D 05 D8		        STA SPRITES_X_HI05,X
  5750 9AAB A9 FE		        LDA #$FE
  5751 9AAD 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5752 9AB0 A9 00		        LDA #$00
  5753 9AB2 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  5754 9AB5 9D AA D8		        STA SPRITES_TMP_C05,X
  5755 9AB8 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  5756 9ABB A9 22		        LDA #$22                ;anim_type_22
  5757 9ABD 9D 85 D8		        STA SPRITES_TYPE05,X
  5758
  5759 9AC0 8A			        TXA
  5760 9AC1 99 94 D8		        STA SPRITES_TMP_A05,Y             ;links X with Y
  5761 9AC4 A9 56		        LDA #$56
  5762 9AC6 99 15 D8		        STA SPRITES_X_LO05,Y
  5763 9AC9 A9 82		        LDA #$82
  5764 9ACB 99 25 D8		        STA SPRITES_Y05,Y
  5765 9ACE A9 B1		        LDA #$B1                ;bike back frame
  5766 9AD0 99 55 D8		        STA SPRITES_PTR05,Y
  5767 9AD3 A9 0B		        LDA #$0B                ;dark grey
  5768 9AD5 99 45 D8		        STA SPRITES_COLOR05,Y
  5769 9AD8 A9 FF		        LDA #$FF
  5770 9ADA 99 05 D8		        STA SPRITES_X_HI05,Y
  5771 9ADD A9 FE		        LDA #$FE                ;move left
  5772 9ADF 99 65 D8		        STA SPRITES_DELTA_X05,Y
  5773 9AE2 A9 00		        LDA #$00
  5774 9AE4 99 75 D8		        STA SPRITES_DELTA_Y05,Y
  5775 9AE7 99 AA D8		        STA SPRITES_TMP_C05,Y
  5776 9AEA 99 35 D8		        STA SPRITES_BKG_PRI05,Y
  5777 9AED A9 10		        LDA #$10                ;anim_type_10: void. No amin for back part
  5778 9AEF 99 85 D8		        STA SPRITES_TYPE05,Y
  5779 9AF2 60			        RTS
  5780
  5781 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5782 				; ref: action_11
  5783 9AF3			ACTION_NEW_BAZOOKA_ENEMY_R  ;$2001
  5784 9AF3 A9 46		        LDA #$46
  5785 9AF5 9D 15 D8		        STA SPRITES_X_LO05,X
  5786 9AF8 A9 FF		        LDA #$FF
  5787 9AFA 9D 05 D8		        STA SPRITES_X_HI05,X
  5788 9AFD A9 1E		        LDA #$1E
  5789 9AFF 9D 25 D8		        STA SPRITES_Y05,X
  5790 9B02 A9 FF		        LDA #$FF
  5791 9B04 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5792 9B07 A9 0C		        LDA #$0C     ;#%00001100
  5793 9B09 9D 9F D8		        STA SPRITES_TMP_B05,X
  5794 9B0C 4C 28 9B		        JMP INIT_NEW_BAZOOKA_ENEMY
  5795
  5796 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5797 				; ref: action_12
  5798 9B0F			ACTION_NEW_BAZOOKA_ENEMY_L  ;$201D
  5799 9B0F A9 32		        LDA #$32
  5800 9B11 9D 15 D8		        STA SPRITES_X_LO05,X
  5801 9B14 A9 00		        LDA #$00
  5802 9B16 9D 05 D8		        STA SPRITES_X_HI05,X
  5803 9B19 A9 1E		        LDA #$1E
  5804 9B1B 9D 25 D8		        STA SPRITES_Y05,X
  5805 9B1E A9 04		        LDA #$04
  5806 9B20 9D 9F D8		        STA SPRITES_TMP_B05,X
  5807 9B23 A9 01		        LDA #$01
  5808 9B25 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5809
  5810 				        ; Fall-through
  5811
  5812 9B28			INIT_NEW_BAZOOKA_ENEMY
  5813 9B28 A9 00		        LDA #$00     ;#%00000000
  5814 9B2A 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  5815 9B2D A9 E6		        LDA #$E6     ;#%11100110
  5816 9B2F 9D 55 D8		        STA SPRITES_PTR05,X
  5817 9B32 A9 06		        LDA #$06     ;blue
  5818 9B34 9D 45 D8		        STA SPRITES_COLOR05,X
  5819 9B37 A9 00		        LDA #$00     ;#%00000000
  5820 9B39 9D AA D8		        STA SPRITES_TMP_C05,X
  5821 9B3C 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  5822 9B3F A9 20		        LDA #$20     ;anim_type_20: bazooka enemy
  5823 9B41 9D 85 D8		        STA SPRITES_TYPE05,X
  5824 9B44 60			        RTS
  5825
  5826 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5827 				; ref: action_0F
  5828 				; creates the left cannon (inside the turret). Appears in lvl1
  5829 9B45			ACTION_NEW_TURRET_CANNON_L      ;$2053
  5830 9B45 A9 2C		        LDA #$2C
  5831 9B47 9D 15 D8		        STA SPRITES_X_LO05,X
  5832 9B4A A9 24		        LDA #$24
  5833 9B4C 9D 25 D8		        STA SPRITES_Y05,X
  5834 9B4F A9 00		        LDA #$00
  5835 9B51 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5836 9B54 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  5837 9B57 A9 FC		        LDA #$FC
  5838 9B59 9D 55 D8		        STA SPRITES_PTR05,X
  5839 9B5C A9 08		        LDA #$08     ;orange
  5840 9B5E 9D 45 D8		        STA SPRITES_COLOR05,X
  5841 9B61 A9 00		        LDA #$00
  5842 9B63 9D 05 D8		        STA SPRITES_X_HI05,X
  5843 9B66 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  5844 9B69 A9 06		        LDA #$06
  5845 9B6B 9D 9F D8		        STA SPRITES_TMP_B05,X
  5846 9B6E A9 1E		        LDA #$1E        ;anim_type_1E: turret fire
  5847 9B70 9D 85 D8		        STA SPRITES_TYPE05,X
  5848 9B73 60			        RTS
  5849
  5850 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5851 				; ref: action_10
  5852 				; creates the right cannon (inside the turret). Appears in lvl1
  5853 9B74			ACTION_NEW_TURRET_CANNON_R     ;$2082
  5854 9B74 A9 30		        LDA #$30
  5855 9B76 9D 15 D8		        STA SPRITES_X_LO05,X
  5856 9B79 A9 1E		        LDA #$1E
  5857 9B7B 9D 25 D8		        STA SPRITES_Y05,X
  5858 9B7E A9 00		        LDA #$00
  5859 9B80 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5860 9B83 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  5861 9B86 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  5862 9B89 A9 FD		        LDA #$FD     ;Cannon in turret
  5863 9B8B 9D 55 D8		        STA SPRITES_PTR05,X
  5864 9B8E A9 08		        LDA #$08     ;orange
  5865 9B90 9D 45 D8		        STA SPRITES_COLOR05,X
  5866 9B93 A9 FF		        LDA #$FF
  5867 9B95 9D 05 D8		        STA SPRITES_X_HI05,X
  5868 9B98 A9 0A		        LDA #$0A
  5869 9B9A 9D 9F D8		        STA SPRITES_TMP_B05,X
  5870 9B9D A9 1E		        LDA #$1E    ;anim_type_1E: turret fire
  5871 9B9F 9D 85 D8		        STA SPRITES_TYPE05,X
  5872 9BA2 60			        RTS
  5873
  5874 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5875 				; ref: action_0D
  5876 				; Creates the boss from lvl0
  5877 9BA3			ACTION_NEW_BOSS_LVL0  ;$20B1
  5878 9BA3 A9 A0		        LDA #$A0
  5879 9BA5 9D 15 D8		        STA SPRITES_X_LO05,X
  5880 9BA8 A9 50		        LDA #$50
  5881 9BAA 9D 25 D8		        STA SPRITES_Y05,X
  5882 9BAD A9 01		        LDA #$01
  5883 9BAF 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  5884 9BB2 A9 08		        LDA #$08
  5885 9BB4 9D 94 D8		        STA SPRITES_TMP_A05,X
  5886 9BB7 9D 9F D8		        STA SPRITES_TMP_B05,X
  5887 9BBA A9 B9		        LDA #$B9    ;boss l1 frame
  5888 9BBC 9D 55 D8		        STA SPRITES_PTR05,X
  5889 9BBF A9 05		        LDA #$05     ;green
  5890 9BC1 9D 45 D8		        STA SPRITES_COLOR05,X
  5891 9BC4 A9 00		        LDA #$00
  5892 9BC6 9D 05 D8		        STA SPRITES_X_HI05,X
  5893 9BC9 20 94 98		        JSR GET_RANDOM
  5894 9BCC 29 1F		        AND #$1F     ;#%00011111
  5895 9BCE 9D AA D8		        STA SPRITES_TMP_C05,X
  5896 9BD1 A9 00		        LDA #$00
  5897 9BD3 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  5898 9BD6 A9 1A		        LDA #$1A    ;anim_type_1A: boss l1
  5899 9BD8 9D 85 D8		        STA SPRITES_TYPE05,X
  5900 9BDB 20 94 98		        JSR GET_RANDOM
  5901 9BDE 29 01		        AND #$01
  5902 9BE0 0A			        ASL 
  5903 9BE1 38			        SEC
  5904 9BE2 E9 01		        SBC #$01
  5905 9BE4 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5906 9BE7 60			        RTS
  5907
  5908 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5909 				; ref: action_0A
  5910 				; Create sprite "soldier from side b" which seems to be more or less similar
  5911 				; to the regular "sprite from side".
  5912 				; TODO: investigate the differences
  5913 9BE8			ACTION_NEW_SOLDIER_FROM_SIDE_R_B ;$20F6
  5914 9BE8 A9 1E		        LDA #$1E
  5915 9BEA 9D 25 D8		        STA SPRITES_Y05,X
  5916 9BED A9 5A		        LDA #$5A
  5917 9BEF 9D 15 D8		        STA SPRITES_X_LO05,X
  5918 9BF2 A9 FF		        LDA #$FF
  5919 9BF4 9D 05 D8		        STA SPRITES_X_HI05,X
  5920 9BF7 A9 FF		        LDA #$FF
  5921 9BF9 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5922 9BFC A9 00		        LDA #$00
  5923 9BFE 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  5924 9C01 A9 D5		        LDA #$D5    ;soldier from side r frame
  5925 9C03 9D 55 D8		        STA SPRITES_PTR05,X
  5926 9C06 A9 0B		        LDA #$0B     ;dark grey
  5927 9C08 9D 45 D8		        STA SPRITES_COLOR05,X
  5928 9C0B A9 00		        LDA #$00
  5929 9C0D 9D AA D8		        STA SPRITES_TMP_C05,X
  5930 9C10 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  5931 9C13 A9 18		        LDA #$18        ;anim_type_18: soldier from side B
  5932 9C15 9D 85 D8		        STA SPRITES_TYPE05,X
  5933 9C18 A9 0C		        LDA #$0C     ;#%00001100
  5934 9C1A 9D 94 D8		        STA SPRITES_TMP_A05,X
  5935 9C1D 9D 9F D8		        STA SPRITES_TMP_B05,X
  5936 9C20 60			        RTS
  5937
  5938 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5939 				; ref: action_07
  5940 				; Create sprite type $16
  5941 9C21			ACTION_NEW_GRENADE_BOX  ;$212F
  5942 9C21 A4 FD		        LDY pFD
  5943 9C23 B1 22		        LDA (p22),Y
  5944 9C25 9D 15 D8		        STA SPRITES_X_LO05,X
  5945 9C28 A9 26		        LDA #$26
  5946 9C2A 9D 25 D8		        STA SPRITES_Y05,X
  5947 9C2D A9 BB		        LDA #$BB        ;grenade box frame
  5948 9C2F 9D 55 D8		        STA SPRITES_PTR05,X
  5949 9C32 A9 0B		        LDA #$0B     ;dark grey
  5950 9C34 9D 45 D8		        STA SPRITES_COLOR05,X
  5951 9C37 B1 26		        LDA (p26),Y
  5952 9C39 9D 05 D8		        STA SPRITES_X_HI05,X
  5953 9C3C A9 00		        LDA #$00
  5954 9C3E 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5955 9C41 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  5956 9C44 9D AA D8		        STA SPRITES_TMP_C05,X
  5957 9C47 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  5958 9C4A A9 16		        LDA #$16        ;anim_type_16: grenade box
  5959 9C4C 9D 85 D8		        STA SPRITES_TYPE05,X
  5960 9C4F 60			        RTS
  5961
  5962 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5963 				; ref: action_06
  5964 				; Create sprite type $12
  5965 9C50			ACTION_NEW_POW      ;$215F
  5966 9C50 A4 FD		        LDY pFD
  5967 9C52 B1 22		        LDA (p22),Y
  5968 9C54 9D 15 D8		        STA SPRITES_X_LO05,X
  5969 9C57 A9 21		        LDA #$21
  5970 9C59 9D 25 D8		        STA SPRITES_Y05,X
  5971 9C5C A9 C2		        LDA #$C2    ;POW frame
  5972 9C5E 9D 55 D8		        STA SPRITES_PTR05,X
  5973 9C61 A9 06		        LDA #$06     ;blue
  5974 9C63 9D 45 D8		        STA SPRITES_COLOR05,X
  5975 9C66 A9 00		        LDA #$00
  5976 9C68 9D 05 D8		        STA SPRITES_X_HI05,X
  5977 9C6B 9D 65 D8		        STA SPRITES_DELTA_X05,X
  5978 9C6E 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  5979 9C71 9D AA D8		        STA SPRITES_TMP_C05,X
  5980 9C74 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  5981 9C77 A9 12		        LDA #$12        ;anim_type_12: POW
  5982 9C79 9D 85 D8		        STA SPRITES_TYPE05,X
  5983 9C7C 8E ED 04		        STX POW_SPRITE_IDX
  5984 9C7F 60			        RTS
  5985
  5986 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  5987 				; ref: action_05
  5988 				; Create sprite type $11
  5989 9C80			ACTION_NEW_POW_GUARD    ;$2190
  5990 9C80 A4 FD		        LDY pFD
  5991 9C82 B1 22		        LDA (p22),Y
  5992 9C84 9D 15 D8		        STA SPRITES_X_LO05,X
  5993 9C87 A9 21		        LDA #$21
  5994 9C89 9D 25 D8		        STA SPRITES_Y05,X
  5995 9C8C A9 C0		        LDA #$C0     ;POW guard frame
  5996 9C8E 9D 55 D8		        STA SPRITES_PTR05,X
  5997 9C91 A9 0B		        LDA #$0B     ;dark grey
  5998 9C93 9D 45 D8		        STA SPRITES_COLOR05,X
  5999 9C96 A9 00		        LDA #$00
  6000 9C98 9D 05 D8		        STA SPRITES_X_HI05,X
  6001 9C9B 9D 65 D8		        STA SPRITES_DELTA_X05,X
  6002 9C9E 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  6003 9CA1 9D AA D8		        STA SPRITES_TMP_C05,X
  6004 9CA4 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  6005 9CA7 8D EC 04		        STA POW_GUARDS_KILLED
  6006 9CAA A9 11		        LDA #$11     ;anim_type_11: POW guard
  6007 9CAC 9D 85 D8		        STA SPRITES_TYPE05,X
  6008 9CAF 60			        RTS
  6009
  6010 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6011 				; ref: action_04
  6012 				; Create bike (sprite types $0f and $10) that crosses bridge in LVL0.
  6013 				; This object requires two different sprite types: front and back bike.
  6014 				; Creates the back one only if there is space for it.
  6015 9CB0			ACTION_NEW_BIKE_LVL0         ;$21C1
  6016 9CB0 A9 20		        LDA #$20     ;#%00100000
  6017 9CB2 9D 15 D8		        STA SPRITES_X_LO05,X
  6018 9CB5 A9 21		        LDA #$21     ;#%00100001
  6019 9CB7 9D 25 D8		        STA SPRITES_Y05,X
  6020 9CBA A9 B0		        LDA #$B0     ;Bike Front. Anim #0
  6021 9CBC 9D 55 D8		        STA SPRITES_PTR05,X
  6022 9CBF A9 09		        LDA #$09     ;brown
  6023 9CC1 9D 45 D8		        STA SPRITES_COLOR05,X
  6024 9CC4 A9 FF		        LDA #$FF     ;#%11111111
  6025 9CC6 9D 05 D8		        STA SPRITES_X_HI05,X
  6026 9CC9 A9 FE		        LDA #$FE     ;#%11111110
  6027 9CCB 9D 65 D8		        STA SPRITES_DELTA_X05,X
  6028 9CCE A9 00		        LDA #$00     ;#%00000000
  6029 9CD0 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  6030 9CD3 9D AA D8		        STA SPRITES_TMP_C05,X
  6031 9CD6 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  6032 9CD9 A9 0F		        LDA #$0F            ;anim_type_0F: bike in bridge (lvl 1)
  6033 9CDB 9D 85 D8		        STA SPRITES_TYPE05,X
  6034
  6035 				        ; If there is additional room, create the back bike sprite type
  6036 				        ; as well.
  6037 9CDE A0 00		        LDY #$00     ;#%00000000
  6038 9CE0 B9 85 D8		@	    LDA SPRITES_TYPE05,Y
  6039 9CE3 F0 06		        BEQ @+
  6040 9CE5 C8			        INY
  6041 9CE6 C0 0B		        CPY #TOTAL_MAX_SPRITES-5
  6042 9CE8 D0 F6		        BNE @-
  6043 9CEA 60			        RTS
  6044
  6045 9CEB 98			@	    TYA
  6046 9CEC 9D 94 D8		        STA SPRITES_TMP_A05,X     ;links front with back
  6047 9CEF A9 38		        LDA #$38     ;#%00111000
  6048 9CF1 99 15 D8		        STA SPRITES_X_LO05,Y
  6049 9CF4 A9 21		        LDA #$21     ;#%00100001
  6050 9CF6 99 25 D8		        STA SPRITES_Y05,Y
  6051 9CF9 A9 B1		        LDA #$B1     ;Bike Back. Anim #0
  6052 9CFB 99 55 D8		        STA SPRITES_PTR05,Y
  6053 9CFE A9 09		        LDA #$09     ;brown
  6054 9D00 99 45 D8		        STA SPRITES_COLOR05,Y
  6055 9D03 A9 FF		        LDA #$FF     ;#%11111111
  6056 9D05 99 05 D8		        STA SPRITES_X_HI05,Y
  6057 9D08 A9 FE		        LDA #$FE     ;#%11111110
  6058 9D0A 99 65 D8		        STA SPRITES_DELTA_X05,Y
  6059 9D0D A9 00		        LDA #$00     ;#%00000000
  6060 9D0F 99 75 D8		        STA SPRITES_DELTA_Y05,Y
  6061 9D12 99 AA D8		        STA SPRITES_TMP_C05,Y
  6062 9D15 99 35 D8		        STA SPRITES_BKG_PRI05,Y
  6063 9D18 A9 10		        LDA #$10            ;anim_type_10: void
  6064 9D1A 99 85 D8		        STA SPRITES_TYPE05,Y
  6065 9D1D 60			        RTS
  6066
  6067 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6068 				; Tries to create a new mortar enemy in case a seat is available.
  6069 				; Seems to be unused (?)
  6070 9D1E A0 00		        LDY #$00
  6071 9D20 B9 85 D8		b2231   LDA SPRITES_TYPE05,Y
  6072 9D23 F0 06		        BEQ ACTION_NEW_MORTAR_ENEMY
  6073 9D25 C8			        INY
  6074 9D26 C0 0B		        CPY #TOTAL_MAX_SPRITES-5
  6075 9D28 D0 F6		        BNE b2231
  6076 9D2A 60			        RTS
  6077
  6078 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6079 				; ref: action_03
  6080 				; Create the red mortar guy (sprite type: $0D)
  6081 9D2B			ACTION_NEW_MORTAR_ENEMY    ;$223C
  6082 9D2B A4 FD		        LDY pFD
  6083 9D2D B1 22		        LDA (p22),Y
  6084 9D2F 9D 15 D8		        STA SPRITES_X_LO05,X
  6085 9D32 A9 21		        LDA #$21     ;#%00100001
  6086 9D34 9D 25 D8		        STA SPRITES_Y05,X
  6087 9D37 A9 CD		        LDA #$CD     ;#%11001101
  6088 9D39 9D 55 D8		        STA SPRITES_PTR05,X
  6089 9D3C A9 02		        LDA #$02     ;red
  6090 9D3E 9D 45 D8		        STA SPRITES_COLOR05,X
  6091 9D41 B1 26		        LDA (p26),Y
  6092 9D43 9D 05 D8		        STA SPRITES_X_HI05,X
  6093 9D46 A9 00		        LDA #$00     ;#%00000000
  6094 9D48 9D 65 D8		        STA SPRITES_DELTA_X05,X
  6095 9D4B 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  6096 9D4E 9D AA D8		        STA SPRITES_TMP_C05,X
  6097 9D51 8D EA 04		        STA a04EA
  6098 9D54 A9 FF		        LDA #$FF     ;#%11111111
  6099 9D56 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  6100 9D59 A9 0D		        LDA #$0D            ;anim_type_0D: mortar enemy
  6101 9D5B 9D 85 D8		        STA SPRITES_TYPE05,X
  6102 9D5E 60			        RTS
  6103
  6104 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6105 				; ref: action_00
  6106 				; Create soldier behind trench (sprite type: $07)
  6107 9D5F			ACTION_NEW_SOLDIER_BEHIND_TRENCH       ;$2271
  6108 9D5F A4 FD		        LDY pFD
  6109 9D61 B1 22		        LDA (p22),Y
  6110 9D63 9D 15 D8		        STA SPRITES_X_LO05,X
  6111 9D66 A9 26		        LDA #$26
  6112 9D68 9D 25 D8		        STA SPRITES_Y05,X
  6113 9D6B A9 C8		        LDA #$C8     ;Soldier in trench
  6114 9D6D 9D 55 D8		        STA SPRITES_PTR05,X
  6115 9D70 A9 0B		        LDA #$0B     ;dark grey
  6116 9D72 9D 45 D8		        STA SPRITES_COLOR05,X
  6117 9D75 B1 26		        LDA (p26),Y
  6118 9D77 9D 05 D8		        STA SPRITES_X_HI05,X
  6119 9D7A A9 00		        LDA #$00
  6120 9D7C 9D 65 D8		        STA SPRITES_DELTA_X05,X
  6121 9D7F 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  6122 9D82 9D AA D8		        STA SPRITES_TMP_C05,X
  6123 9D85 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  6124 9D88 A9 08		        LDA #$08
  6125 9D8A 9D 94 D8		        STA SPRITES_TMP_A05,X
  6126 9D8D 9D 9F D8		        STA SPRITES_TMP_B05,X
  6127 9D90 A9 07		        LDA #$07            ;anim_type_07: soldier behind trench
  6128 9D92 9D 85 D8		        STA SPRITES_TYPE05,X
  6129 9D95 60			        RTS
  6130
  6131 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6132 				; ref: action_0E
  6133 9D96			ACTION_NEW_SOLDIER_IN_TRENCH    ;$22A9
  6134 9D96 A4 FD		        LDY pFD
  6135 9D98 B1 22		        LDA (p22),Y
  6136 9D9A 9D 15 D8		        STA SPRITES_X_LO05,X
  6137 9D9D A9 2A		        LDA #$2A
  6138 9D9F 9D 25 D8		        STA SPRITES_Y05,X
  6139 9DA2 A9 ED		        LDA #$ED
  6140 9DA4 9D 55 D8		        STA SPRITES_PTR05,X
  6141 9DA7 A9 0B		        LDA #$0B     ;dark grey
  6142 9DA9 9D 45 D8		        STA SPRITES_COLOR05,X
  6143 9DAC B1 26		        LDA (p26),Y
  6144 9DAE 9D 05 D8		        STA SPRITES_X_HI05,X
  6145 9DB1 A9 00		        LDA #$00
  6146 9DB3 9D 65 D8		        STA SPRITES_DELTA_X05,X
  6147 9DB6 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  6148 9DB9 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  6149 9DBC 20 94 98		        JSR GET_RANDOM
  6150 9DBF 9D AA D8		        STA SPRITES_TMP_C05,X
  6151 9DC2 A9 08		        LDA #$08
  6152 9DC4 9D 94 D8		        STA SPRITES_TMP_A05,X
  6153 9DC7 9D 9F D8		        STA SPRITES_TMP_B05,X
  6154 9DCA A9 1C		        LDA #$1C            ;anim_type_1C: soldier in trench
  6155 9DCC 9D 85 D8		        STA SPRITES_TYPE05,X
  6156 9DCF 60			        RTS
  6157
  6158 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6159 				; ref: action_01
  6160 				; Create jumping sprite from right margin (sprite type: $0A)
  6161 9DD0			ACTION_NEW_JUMPING_SOLDIER_R       ;$22E4
  6162 9DD0 A4 FD		        LDY pFD
  6163 9DD2 A9 9F		        LDA #$9F     ;#%10011111
  6164 9DD4 38			        SEC
  6165 9DD5 F1 24		        SBC (p24),Y
  6166 9DD7 0A			        ASL 
  6167 9DD8 0A			        ASL 
  6168 9DD9 0A			        ASL 
  6169 9DDA 18			        CLC
  6170 9DDB 69 1E		        ADC #$1E
  6171 9DDD 9D 25 D8		        STA SPRITES_Y05,X
  6172 9DE0 A9 5A		        LDA #$5A
  6173 9DE2 9D 15 D8		        STA SPRITES_X_LO05,X
  6174 9DE5 A9 FF		        LDA #$FF
  6175 9DE7 9D 05 D8		        STA SPRITES_X_HI05,X
  6176 9DEA A9 FE		        LDA #$FE
  6177 9DEC 9D 65 D8		        STA SPRITES_DELTA_X05,X
  6178 9DEF A9 00		        LDA #$00
  6179 9DF1 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  6180 9DF4 A9 D5		        LDA #$D5
  6181 9DF6 9D 55 D8		        STA SPRITES_PTR05,X
  6182 9DF9 A9 0B		        LDA #$0B     ;dark grey
  6183 9DFB 9D 45 D8		        STA SPRITES_COLOR05,X
  6184 9DFE A9 00		        LDA #$00
  6185 9E00 9D AA D8		        STA SPRITES_TMP_C05,X
  6186 9E03 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  6187 9E06 A9 0A		        LDA #$0A            ;anim_type_0A: jumping soldier
  6188 9E08 9D 85 D8		        STA SPRITES_TYPE05,X
  6189 9E0B A9 0C		        LDA #$0C
  6190 9E0D 9D 94 D8		        STA SPRITES_TMP_A05,X
  6191 9E10 9D 9F D8		        STA SPRITES_TMP_B05,X
  6192 9E13 60			        RTS
  6193
  6194 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6195 				; ref: action_02
  6196 				; Create jumping sprite from left margin (sprite type: $0A)
  6197 9E14			ACTION_NEW_JUMPING_SOLDIER_L       ;$2329
  6198 9E14 A4 FD		        LDY pFD
  6199 9E16 A9 86		        LDA #$86     ;#%10000110
  6200 9E18 38			        SEC
  6201 9E19 F1 24		        SBC (p24),Y
  6202 9E1B 0A			        ASL 
  6203 9E1C 0A			        ASL 
  6204 9E1D 0A			        ASL 
  6205 9E1E 18			        CLC
  6206 9E1F 69 1E		        ADC #$1E
  6207 9E21 9D 25 D8		        STA SPRITES_Y05,X
  6208 9E24 A9 01		        LDA #$01
  6209 9E26 9D 15 D8		        STA SPRITES_X_LO05,X
  6210 9E29 A9 00		        LDA #$00
  6211 9E2B 9D 05 D8		        STA SPRITES_X_HI05,X
  6212 9E2E A9 02		        LDA #$02
  6213 9E30 9D 65 D8		        STA SPRITES_DELTA_X05,X
  6214 9E33 A9 00		        LDA #$00
  6215 9E35 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  6216 9E38 A9 D9		        LDA #$D9
  6217 9E3A 9D 55 D8		        STA SPRITES_PTR05,X
  6218 9E3D A9 0B		        LDA #$0B     ;dark grey
  6219 9E3F 9D 45 D8		        STA SPRITES_COLOR05,X
  6220 9E42 A9 00		        LDA #$00
  6221 9E44 9D AA D8		        STA SPRITES_TMP_C05,X
  6222 9E47 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  6223 9E4A A9 0A		        LDA #$0A            ;anim_type_0A: jumping soldier
  6224 9E4C 9D 85 D8		        STA SPRITES_TYPE05,X
  6225 9E4F A9 04		        LDA #$04
  6226 9E51 9D 94 D8		        STA SPRITES_TMP_A05,X
  6227 9E54 9D 9F D8		        STA SPRITES_TMP_B05,X
  6228 9E57 60			        RTS
  6229
  6230 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6231 				; ref: action_08
  6232 				; Sprite is placed at the left of screen
  6233 9E58			ACTION_NEW_SOLDIER_FROM_SIDE_L  ;$236E
  6234 9E58 A9 01		        LDA #$01
  6235 9E5A 9D 15 D8		        STA SPRITES_X_LO05,X
  6236 9E5D A9 00		        LDA #$00
  6237 9E5F 9D 05 D8		        STA SPRITES_X_HI05,X
  6238 9E62 A9 02		        LDA #$02
  6239 9E64 9D 65 D8		        STA SPRITES_DELTA_X05,X
  6240 9E67 A9 04		        LDA #$04
  6241 9E69 9D 9F D8		        STA SPRITES_TMP_B05,X
  6242 9E6C 4C 83 9E		        JMP NEW_SOLDIER_FROM_SIDE
  6243
  6244 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6245 				; ref: action_09
  6246 				; Sprite is placed at right of screen
  6247 9E6F			ACTION_NEW_SOLDIER_FROM_SIDE_R  ;$2385
  6248 9E6F A9 5A		        LDA #$5A
  6249 9E71 9D 15 D8		        STA SPRITES_X_LO05,X
  6250 9E74 A9 FF		        LDA #$FF
  6251 9E76 9D 05 D8		        STA SPRITES_X_HI05,X
  6252 9E79 A9 FE		        LDA #$FE
  6253 9E7B 9D 65 D8		        STA SPRITES_DELTA_X05,X
  6254 9E7E A9 0C		        LDA #$0C
  6255 9E80 9D 9F D8		        STA SPRITES_TMP_B05,X
  6256
  6257 				        ; fall-through
  6258
  6259 9E83			NEW_SOLDIER_FROM_SIDE
  6260 9E83 A9 00		        LDA #$00
  6261 9E85 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  6262 9E88 A9 D5		        LDA #$D5    ;soldier from side heading west
  6263 9E8A 9D 55 D8		        STA SPRITES_PTR05,X
  6264 9E8D A9 0B		        LDA #$0B    ;dark grey
  6265 9E8F 9D 45 D8		        STA SPRITES_COLOR05,X
  6266 9E92 A9 00		        LDA #$00
  6267 9E94 9D AA D8		        STA SPRITES_TMP_C05,X
  6268 9E97 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  6269 9E9A A9 17		        LDA #$17            ;anim_type_17: soldier from side type
  6270 9E9C 9D 85 D8		        STA SPRITES_TYPE05,X
  6271 9E9F A4 FD		        LDY pFD
  6272 9EA1 B1 26		        LDA (p26),Y
  6273 9EA3 38			        SEC
  6274 9EA4 F1 24		        SBC (p24),Y
  6275 9EA6 0A			        ASL 
  6276 9EA7 0A			        ASL 
  6277 9EA8 0A			        ASL 
  6278 9EA9 18			        CLC
  6279 9EAA 69 1E		        ADC #$1E
  6280 9EAC 9D 25 D8		        STA SPRITES_Y05,X
  6281 9EAF B1 22		        LDA (p22),Y
  6282 9EB1 9D 94 D8		        STA SPRITES_TMP_A05,X
  6283 9EB4 60			        RTS
  6284
  6285 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6286 				; ref: action_0C
  6287 				; Creates a soldier from side that throws grenades
  6288 9EB5			ACTION_0C       ;$23CC
  6289 9EB5 A9 1E		        LDA #$1E
  6290 9EB7 9D 25 D8		        STA SPRITES_Y05,X
  6291 9EBA A9 5A		        LDA #$5A
  6292 9EBC 9D 15 D8		        STA SPRITES_X_LO05,X
  6293 9EBF A9 FF		        LDA #$FF
  6294 9EC1 9D 05 D8		        STA SPRITES_X_HI05,X
  6295 9EC4 A9 FF		        LDA #$FF
  6296 9EC6 9D 65 D8		        STA SPRITES_DELTA_X05,X
  6297 9EC9 A9 00		        LDA #$00
  6298 9ECB 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  6299 9ECE A9 D5		        LDA #$D5     ;soldier from side B
  6300 9ED0 9D 55 D8		        STA SPRITES_PTR05,X
  6301 9ED3 A9 0B		        LDA #$0B     ;dark grey
  6302 9ED5 9D 45 D8		        STA SPRITES_COLOR05,X
  6303 9ED8 A9 00		        LDA #$00
  6304 9EDA 9D AA D8		        STA SPRITES_TMP_C05,X
  6305 9EDD 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  6306 9EE0 A9 19		        LDA #$19            ;anim_type_19
  6307 9EE2 9D 85 D8		        STA SPRITES_TYPE05,X
  6308 9EE5 A9 0C		        LDA #$0C     ;#%00001100
  6309 9EE7 9D 94 D8		        STA SPRITES_TMP_A05,X
  6310 9EEA 9D 9F D8		        STA SPRITES_TMP_B05,X
  6311 9EED 60			        RTS
  6312
  6313 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6314 				; Add score based on killed enemy, and convert enemy sprite type into
  6315 				; "enemy dying" type.
  6316 9EEE			DIE_ANIM_AND_SCORE  ;$2405
  6317 9EEE 98			        TYA
  6318 9EEF 48			        PHA
  6319 9EF0 B9 85 D8		        LDA SPRITES_TYPE05,Y
  6320 9EF3 A8			        TAY
  6321 9EF4 B9 8F 88		        LDA POINTS_TBL,Y
  6322 9EF7 20 DC 35		        JSR SCORE_ADD
  6323 9EFA 68			        PLA
  6324 9EFB A8			        TAY
  6325 9EFC B9 85 D8		        LDA SPRITES_TYPE05,Y
  6326 9EFF C9 07		        CMP #$07            ;anim_type_07: soldier behind trench
  6327 9F01 F0 04		        BEQ @+
  6328 9F03 C9 1C		        CMP #$1C            ;anim_type_1C: soldier in trench
  6329 9F05 D0 0D		        BNE @+1
  6330 9F07 A9 1D		@	    LDA #$1D            ;anim_type_1D: soldier in trench die
  6331 9F09 99 85 D8		        STA SPRITES_TYPE05,Y
  6332 9F0C A9 CB		        LDA #$CB            ;#%11001011
  6333 9F0E 99 55 D8		        STA SPRITES_PTR05,Y
  6334 9F11 4C 90 9F		        JMP das
  6335
  6336 9F14 B9 85 D8		@	    LDA SPRITES_TYPE05,Y
  6337 9F17 C9 1A		        CMP #$1A            ;anim_type_1A: boss lvl0
  6338 9F19 D0 12		        BNE @+
  6339 9F1B A9 BC		        LDA #$BC            ;"2000" points sprite frame
  6340 9F1D 99 55 D8		        STA SPRITES_PTR05,Y
  6341 9F20 A9 01		        LDA #$01            ;white
  6342 9F22 99 45 D8		        STA SPRITES_COLOR05,Y
  6343 9F25 A9 13		        LDA #$13            ;anim_type_13: delayed cleanup
  6344 9F27 99 85 D8		        STA SPRITES_TYPE05,Y
  6345 9F2A 4C 90 9F		        JMP das
  6346
  6347 9F2D B9 85 D8		@	    LDA SPRITES_TYPE05,Y
  6348 9F30 C9 11		        CMP #$11            ;anim_type_11: POW guard
  6349 9F32 D0 3A		        BNE @+
  6350 9F34 BD 81 D8		        LDA SPRITES_TYPE01,X
  6351 9F37 C9 04		        CMP #$04            ;anim_type_04: hero grenade
  6352 9F39 F0 33		        BEQ @+
  6353
  6354 9F3B A9 BD		        LDA #$BD            ;"1000" points sprite frame
  6355 9F3D 99 55 D8		        STA SPRITES_PTR05,Y
  6356 9F40 A9 0E		        LDA #$0E            ;light blue
  6357 9F42 99 45 D8		        STA SPRITES_COLOR05,Y
  6358 9F45 A9 13		        LDA #$13            ;anim_type_13: delayed cleanup
  6359 9F47 99 85 D8		        STA SPRITES_TYPE05,Y
  6360 9F4A EE EC 04		        INC POW_GUARDS_KILLED
  6361 9F4D AD EC 04		        LDA POW_GUARDS_KILLED
  6362 9F50 C9 02		        CMP #$02            ;how many guard killed? 2?
  6363 9F52 D0 3C		        BNE das
  6364
  6365 9F54 8A			        TXA
  6366 9F55 48			        PHA
  6367 9F56 AE ED 04		        LDX POW_SPRITE_IDX
  6368 9F59 A9 14		        LDA #$14            ;anim_type_14: POW is freed
  6369 9F5B 9D 85 D8		        STA SPRITES_TYPE05,X
  6370 9F5E A9 00		        LDA #$00
  6371 9F60 9D 65 D8		        STA SPRITES_DELTA_X05,X
  6372 9F63 9D 75 D8		        STA SPRITES_DELTA_Y05,X
  6373 9F66 9D AA D8		        STA SPRITES_TMP_C05,X
  6374 9F69 68			        PLA
  6375 9F6A AA			        TAX
  6376 9F6B 4C 90 9F		        JMP das
  6377
  6378 9F6E B9 85 D8		@	    LDA SPRITES_TYPE05,Y
  6379 9F71 C9 23		        CMP #$23            ;anim_type_23: void
  6380 9F73 F0 04		        BEQ @+
  6381 9F75 C9 24		        CMP #$24            ;anim_type_24: solider jumping (from truck)
  6382 9F77 D0 12		        BNE @+1
  6383 9F79 8A			@	    TXA
  6384 9F7A 48			        PHA
  6385 9F7B BE 94 D8		        LDX SPRITES_TMP_A05,Y
  6386 9F7E 20 FE 91		        JSR CONVERT_TO_TYPE_ANIM_EXPLOSION
  6387 9F81 98			        TYA
  6388 9F82 AA			        TAX
  6389 9F83 20 FE 91		        JSR CONVERT_TO_TYPE_ANIM_EXPLOSION
  6390 9F86 68			        PLA
  6391 9F87 AA			        TAX
  6392 9F88 4C 90 9F		        JMP das
  6393
  6394 9F8B A9 06		@	    LDA #$06            ;anim_type_06: soldier die
  6395 9F8D 99 85 D8		        STA SPRITES_TYPE05,Y
  6396
  6397 9F90 A9 00		das	    LDA #$00
  6398 9F92 99 AA D8		        STA SPRITES_TMP_C05,Y
  6399 9F95 99 65 D8		        STA SPRITES_DELTA_X05,Y
  6400 9F98 99 75 D8		        STA SPRITES_DELTA_Y05,Y
  6401 9F9B 60			        RTS
  6402
  6403
  6404 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6405 				; Patches the level data with the door in open/closed state.
  6406 				; A = 0: Closed door
  6407 				;   = 2: Open door
  6408 				; $0405: Destination MSB
  6409 				;        Destination LSB is always $0D
  6410 9F9C			LEVEL_PATCH_DOOR         ;$15DA
  6411 9F9C AA			        TAX
  6412 9F9D BD FD 9F		        LDA f161D,X
  6413 9FA0 8D D4 9F		        STA _lpd_src+1
  6414 9FA3 BD FE 9F		        LDA f161E,X
  6415 9FA6 8D D5 9F		        STA _lpd_src+2
  6416 						
  6417 9FA9 A0 5E				ldy #$5e
  6418 9FAB A9 69 91 71 C8			mva #$60+8+1 (fx_ptr),y+			;$6000+CPU+*K
  6419 9FB0 AD F3 04				lda level_nr
  6420 9FB3 0A					asl
  6421 9FB4 69 D0				adc #$50+$80
  6422 9FB6 91 71				sta (fx_ptr),y		
  6423
  6424 				        ; Only lvl 0 and 1 has doors. Skip in lvl 3
  6425 9FB8 AD F3 04		        LDA LEVEL_NR
  6426 9FBB 29 03		        AND #$03
  6427 9FBD C9 03		        CMP #$03
  6428 9FBF F0 32		        BEQ @+2
  6429
  6430 9FC1 A9 0D		        LDA #$0D     ;#%00001101
  6431 9FC3 85 FB		        STA pFB
  6432 9FC5 85 73				sta pom
  6433 9FC7 A9 40		        LDA #$40
  6434 9FC9 85 FC		        STA pFC
  6435 9FCB A9 60				lda #$60
  6436 9FCD 85 74				sta pom+1
  6437 9FCF A2 00		        LDX #$00     ;#%00000000
  6438 9FD1 A0 00		@	    LDY #$00     ;#%00000000
  6439 9FD3			_lpd_src
  6440 9FD3 BD B8 88		@	    LDA f2596,X         ;Self-modfying
  6441 9FD6 91 FB		        STA (pFB),Y
  6442 9FD8 91 73				sta (pom),y
  6443 9FDA E8			        INX
  6444 9FDB C8			        INY
  6445 9FDC C0 0F		        CPY #$0F     ;#%00001111
  6446 9FDE D0 F3		        BNE @-
  6447
  6448 9FE0 A5 FB		        LDA pFB
  6449 9FE2 18			        CLC
  6450 9FE3 69 28		        ADC #$28     ;#%00101000
  6451 9FE5 85 FB		        STA pFB
  6452 9FE7 85 73				sta pom
  6453 9FE9 90 04		        BCC *+6
  6454 9FEB E6 FC		        INC pFC
  6455 9FED E6 74				inc pom+1
  6456 9FEF E0 86				CPX #$86     ;#%10000110
  6457 9FF1 90 DE		        BCC @-1
  6458 9FF3			@	    
  6459 9FF3 A0 5D				ldy #$5d
  6460 9FF5 A9 00 91 71 C8			mva #0 (fx_ptr),y+
  6461 9FFA 91 71				sta (fx_ptr),y				;wylacz MEM-A
  6462 9FFC 60					RTS
  6463 						
  6464
  6465 = 9FFE			f161E   =*+1
  6466 9FFD 01 A0 88 A0		f161D   dta a(f1621,f16A8)
  6467
  6468 				        ; Patch for closed door
  6469 A001 CC CC D8 D8 D8 D8 + f1621   .he CC,CC,D8,D8,D8,D8,D8,D9,D8,D8,D8,D8,D8,CC,CC
  6470 A010 CF CE 4F 4F 4F 4F +         .he CF,CE,4F,4F,4F,4F,4F,CD,4F,4F,4F,4F,4F,CE,CF
  6471 A01F CE CF 4F 4F 4F 4F +         .he CE,CF,4F,4F,4F,4F,4F,CD,4F,4F,4F,4F,4F,CF,CE
  6472 A02E D1 D2 4F 4F 4F 4F +         .he D1,D2,4F,4F,4F,4F,4F,CD,4F,4F,4F,4F,4F,D2,D1
  6473 A03D D2 D1 4F 4F 4F 4F +         .he D2,D1,4F,4F,4F,4F,4F,CD,4F,4F,4F,4F,4F,D1,D2
  6474 A04C D6 D5 4F 4F 4F 4F +         .he D6,D5,4F,4F,4F,4F,4F,CD,4F,4F,4F,4F,4F,D5,D6
  6475 A05B DC DB D8 D8 D8 D8 +         .he DC,DB,D8,D8,D8,D8,D8,D9,D8,D8,D8,D8,D8,DB,DC
  6476 A06A 00 00 00 00 00 00 +         .he 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00	
  6477 A079 00 00 00 00 00 00 + 		.he 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
  6478 						
  6479 				        ; Patch for open door
  6480 A088 CC 45 00 00 00 00 + f16A8   .he CC,45,00,00,00,00,00,00,00,00,00,00,00,8C,CC
  6481 A097 47 46 00 00 00 00 +         .he 47,46,00,00,00,00,00,00,00,00,00,00,00,8D,8E
  6482 A0A6 45 4F 00 00 00 00 +         .he 45,4F,00,00,00,00,00,00,00,00,00,00,00,4F,8C
  6483 A0B5 48 4F 00 00 00 00 +         .he 48,4F,00,00,00,00,00,00,00,00,00,00,00,4F,8F
  6484 A0C4 48 4F 00 00 00 00 +         .he 48,4F,00,00,00,00,00,00,00,00,00,00,00,4F,8F
  6485 A0D3 48 4F 00 00 00 00 +         .he 48,4F,00,00,00,00,00,00,00,00,00,00,00,4F,8F
  6486 A0E2 48 D3 00 00 00 00 +         .he 48,D3,00,00,00,00,00,00,00,00,00,00,00,E6,8F
  6487 A0F1 48 D4 00 00 00 00 +         .he 48,D4,00,00,00,00,00,00,00,00,00,00,00,E7,8F
  6488 A100 49 30 00 00 00 00 +         .he 49,30,00,00,00,00,00,00,00,00,00,00,00,30,90 		
  6489
  6490
  6491 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6492 				; Re-execute actions based on the row index. Called when the level is restarted.
  6493 				; E.g: after losing a life.
  6494 A10F			RERUN_ACTIONS             ;$109B
  6495 A10F A0 00		        LDY #$00
  6496 A111 B1 24		@	    LDA (p24),Y         ;End of trigger-rows?
  6497 A113 C9 FF		        CMP #$FF
  6498 A115 F0 50		        BEQ @+3
  6499 A117 CD 03 04		        CMP V_SCROLL_ROW_IDX
  6500 A11A 90 4B		        BCC @+3
  6501 A11C 38			        SEC
  6502 A11D E9 16		        SBC #$16     ;#%00010110
  6503 A11F CD 03 04		        CMP V_SCROLL_ROW_IDX
  6504 A122 B0 3F		        BCS @+2
  6505 A124 84 FD		        STY pFD
  6506 A126 B1 28		        LDA (p28),Y         ;Object to init
  6507 A128 0A			        ASL
  6508 A129 A8			        TAY
  6509
  6510 				        ; $FB/$FC -> action table
  6511 A12A B9 0A 99		        LDA ACTION_TBL,Y    ;Prepare jump table for actions
  6512 A12D 85 FB		        STA pFB
  6513 A12F B9 0B 99		        LDA ACTION_TBL+1,Y
  6514 A132 85 FC		        STA pFC
  6515
  6516 				        ; Find empty seat
  6517 A134 A2 00		        LDX #$00
  6518 A136 BD 85 D8		@	    LDA SPRITES_TYPE05,X
  6519 A139 F0 08		        BEQ @+
  6520 A13B E8			        INX
  6521 A13C E0 0B		        CPX #(TOTAL_MAX_SPRITES-5)
  6522 A13E D0 F6		        BNE @-
  6523 A140 4C 63 A1		        JMP @+1
  6524
  6525 A143 8A			@	    TXA
  6526 A144 48			        PHA
  6527 A145 20 3A 88		        JSR JMP_FB
  6528 A148 68			        PLA
  6529 A149 AA			        TAX
  6530
  6531 A14A A4 FD		        LDY pFD
  6532 A14C B1 24		        LDA (p24),Y         ;Trigger row
  6533 A14E 38			        SEC
  6534 A14F ED 03 04		        SBC V_SCROLL_ROW_IDX
  6535 A152 0A			        ASL 
  6536 A153 0A			        ASL 
  6537 A154 0A			        ASL 
  6538 A155 18			        CLC
  6539 A156 69 2B		        ADC #$2B     ;#%00101011
  6540 A158 9D 25 D8		        STA SPRITES_Y05,X
  6541 A15B BC 94 D8		        LDY SPRITES_TMP_A05,X
  6542 A15E 99 25 D8		        STA SPRITES_Y05,Y
  6543 A161 A4 FD		        LDY pFD
  6544 A163 C8			@	    INY
  6545 A164 4C 11 A1		        JMP @-3
  6546
  6547 A167 8C E8 04		@	    STY TRIGGER_ROW_IDX
  6548 A16A 60			        RTS		
  6549 						
  6550 A16B			SCREEN_ENTER_HI_SCORE   ;$0C88
  6551 A16B A9 01		        LDA #$01     ;Song to play (high scores)
  6552 				        //JSR MUSIC_INIT
  6553 A16D 20 21 A4		        JSR CLEAR_SCREEN
  6554
  6555 A170 20 A8 35		        JSR CLEANUP_SPRITES
  6556 A173 20 A4 27				jsr print_sprites
  6557 A176 20 52 2E				jsr wait_vbl1
  6558 A179 A0 40				ldy #$40
  6559 A17B A9 01 91 71				mva #1 (fx_ptr),y
  6560 A17F 20 5C 20				jsr clear_screen_vbxe		
  6561 A182 A9 00		        LDA #$00     ;#%00000000
  6562 A184 8D 04 04		        STA V_SCROLL_DELTA
  6563 A187 8D 02 04		        STA V_SCROLL_BIT_IDX
  6564 A18A 8D 05 D4				sta vscrol
  6565 A18D 8D E2 04		        STA BKG_COLOR0
  6566 A190 A9 02		        LDA #$02     ;#%00000010
  6567 A192 8D F3 04		        STA LEVEL_NR
  6568
  6569 				        ; $FB/$FC -> Screen RAM
  6570 				        ; $FD/$FE -> Color RAM
  6571 				        ; Row 3, Column 10
  6572 A195 A9 82		        LDA #<$fa82
  6573 A197 85 FB		        STA pFB
  6574 A199 A9 FA		        LDA #>$fa82
  6575 A19B 85 FC		        STA pFC
  6576 				        ;LDA #<pD882
  6577 				        ;STA pFD
  6578 				        ;LDA #>pD882
  6579 				        ;STA pFE
  6580
  6581 A19D A2 00		        LDX #$00
  6582 A19F A0 00		_scee   LDY #$00
  6583 A1A1 BD F4 A1		@	    LDA f0D09,X
  6584 A1A4 C9 FF		        CMP #$FF     ;End of line?
  6585 A1A6 F0 0B		        BEQ @+
  6586 A1A8 C9 FE		        CMP #$FE     ;Finish printing?
  6587 A1AA F0 16		        BEQ @+2
  6588 A1AC 91 FB		        STA (pFB),Y
  6589 				        ;LDA #$01     ;white
  6590 				        ;STA (pFD),Y
  6591 A1AE E8			        INX
  6592 A1AF C8			        INY
  6593 A1B0 4C A1 A1		        JMP @-
  6594
  6595 A1B3 E8			@	    INX
  6596 A1B4 A5 FB		        LDA pFB
  6597 A1B6 18			        CLC
  6598 A1B7 69 28		        ADC #$28     ;Put "cursor" in next line
  6599 A1B9 85 FB		        STA pFB
  6600 				        ;STA pFD
  6601 A1BB 90 02		        BCC @+
  6602 A1BD E6 FC		        INC pFC
  6603 				        ;INC pFE
  6604 A1BF 4C 9F A1		@	    JMP _scee
  6605
  6606 A1C2 20 3C A4		@	    JSR HISCORE_SETUP_SPRITES
  6607
  6608 A1C5 20 59 2E		@	    JSR WAIT_RASTER_AT_BOTTOM
  6609 A1C8 20 A4 27				jsr print_sprites
  6610 A1CB AD 0B D4				lda vcount
  6611 A1CE C9 40				cmp #$40
  6612 A1D0 D0 F9				bne *-5
  6613 A1D2 20 5C 20				jsr clear_screen_vbxe
  6614 A1D5 20 1E 28				jsr print_sprites1
  6615
  6616 A1D8 20 B0 A4		        JSR HISCORE_READ_JOY_MOV
  6617 A1DB 20 44 A2		        JSR HISCORE_READ_JOY_FIRE
  6618 A1DE 20 2E A5		        JSR HISCORE_ANIM_CHAR
  6619 A1E1 20 5E 2C		        JSR APPLY_DELTA_MOV
  6620 A1E4 20 C6 2C		        JSR SORT_SPRITES_BY_Y
  6621 A1E7 20 15 A5		        JSR s0C6F
  6622 A1EA AD 10 05		        LDA HISCORE_SELECTED_CHAR
  6623 A1ED C9 78		        CMP #$78     ;#%01111000
  6624 A1EF D0 D4		        BNE @-
  6625 						
  6626 A1F1 4C 5C 20				jmp clear_screen_vbxe
  6627
  6628 				        ;Alphabet for hiscore
  6629 A1F4 20 20 20 20 20 75 + f0D09   .BYTE $20,$20,$20,$20,$20,$75,$75,$75
  6630 A1FC 75 75 75 75 75 78 +         .BYTE $75,$75,$75,$75,$75,$78,$FF,$FF
  6631 A204 FF 5B 20 5C 20 5D +         .BYTE $FF,$5B,$20,$5C,$20,$5D,$20,$5E
  6632 A20C 20 5F 20 60 20 61 +         .BYTE $20,$5F,$20,$60,$20,$61,$20,$62
  6633 A214 20 63 20 64 FF FF +         .BYTE $20,$63,$20,$64,$FF,$FF,$65,$20
  6634 A21C 66 20 67 20 68 20 +         .BYTE $66,$20,$67,$20,$68,$20,$69,$20
  6635 A224 6A 20 6B 20 6C 20 +         .BYTE $6A,$20,$6B,$20,$6C,$20,$6D,$20
  6636 A22C 6E FF FF 6F 20 70 +         .BYTE $6E,$FF,$FF,$6F,$20,$70,$20,$71
  6637 A234 20 72 20 73 20 74 +         .BYTE $20,$72,$20,$73,$20,$74,$20,$75
  6638 A23C 20 76 20 77 20 78 +         .BYTE $20,$76,$20,$77,$20,$78,$FF,$FE
  6639
  6640 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6641 				; Reads joystick fire, only if bullet is not being animated
  6642 A244			HISCORE_READ_JOY_FIRE       ;$0D59
  6643 A244 AD 05 05		        LDA HISCORE_IS_BULLET_ANIM
  6644 A247 F0 23		        BEQ @+2
  6645
  6646 				        ; Bullet reached destination?
  6647 A249 AD 21 D8		        LDA SPRITES_Y01
  6648 A24C CD 90 D8		        CMP SPRITES_TMP_A01
  6649 A24F 90 01		        BCC @+
  6650 A251 60			        RTS
  6651
  6652 A252			@
  6653 				        ; Cleanup bullet sprite
  6654 A252 A9 00		        LDA #$00
  6655 A254 8D 81 D8		        STA SPRITES_TYPE01
  6656 A257 8D 05 05		        STA HISCORE_IS_BULLET_ANIM
  6657 A25A A9 FF		        LDA #$FF                ;Empty sprite
  6658 A25C 8D 51 D8		        STA SPRITES_PTR01
  6659 A25F AD 10 05		        LDA HISCORE_SELECTED_CHAR
  6660 A262 C9 77		        CMP #$77                ;"backspace" char
  6661 A264 F0 05		        BEQ @+
  6662 A266 A9 01		        LDA #$01
  6663 A268 8D 11 05		        STA HISCORE_IS_CHAR_ANIM
  6664 A26B 60			@	    RTS
  6665
  6666 A26C AD 10 D0		@	    lda trig0               ;Fire pressed?
  6667 				        ;AND #$10                ;#%00010000
  6668 A26F F0 01		        BEQ @+
  6669 A271 60			        RTS
  6670
  6671 A272			@
  6672 				        ; Create bullet sprite type
  6673 A272 A9 00		        LDA #$00
  6674 A274 8D 61 D8		        STA SPRITES_DELTA_X01
  6675 A277 A9 FA		        LDA #$FA
  6676 A279 8D 71 D8		        STA SPRITES_DELTA_Y01
  6677 A27C AD 10 D8		        LDA SPRITES_X_LO00
  6678 A27F 8D 11 D8		        STA SPRITES_X_LO01
  6679 A282 AD 20 D8		        LDA SPRITES_Y00
  6680 A285 8D 21 D8		        STA SPRITES_Y01
  6681 A288 AD 00 D8		        LDA SPRITES_X_HI00
  6682 A28B 8D 01 D8		        STA SPRITES_X_HI01
  6683 A28E A9 01		        LDA #$01
  6684 A290 8D 81 D8		        STA SPRITES_TYPE01
  6685 A293 A9 90		        LDA #$90                ;Bullet frame
  6686 A295 8D 51 D8		        STA SPRITES_PTR01
  6687 A298 8D 31 D8		        STA SPRITES_BKG_PRI01
  6688 A29B A9 01		        LDA #$01                ;white
  6689 A29D 8D 41 D8		        STA SPRITES_COLOR01
  6690 A2A0 8D 05 05		        STA HISCORE_IS_BULLET_ANIM
  6691 A2A3 AD 25 D8		        LDA SPRITES_Y05
  6692 A2A6 8D 90 D8		        STA SPRITES_TMP_A01
  6693
  6694 A2A9 AD 10 05		        LDA HISCORE_SELECTED_CHAR
  6695 A2AC A0 00		        LDY #$00
  6696 A2AE 91 F7		        STA (pF7),Y
  6697 A2B0 20 6A A5		        JSR HISCORE_GET_SELECTED_CHAR
  6698 A2B3 A9 0B		        LDA #$0B                ;"Fire" SFX
  6699 				        //JSR SFX_PLAY
  6700
  6701 A2B5 AD 10 05		        LDA HISCORE_SELECTED_CHAR
  6702 A2B8 C9 78		        CMP #$78                ;"end" char
  6703 A2BA F0 38		        BEQ @+1
  6704 A2BC C9 77		        CMP #$77                ;"backspace" char
  6705 A2BE D0 1E		        BNE @+
  6706
  6707 				        ; Delete char
  6708 A2C0 AD 0F 05		        LDA HISCORE_NAME_IDX
  6709 A2C3 F0 2F		        BEQ @+1
  6710 A2C5 CE 0F 05		        DEC HISCORE_NAME_IDX
  6711 A2C8 AE 0F 05		        LDX HISCORE_NAME_IDX
  6712 A2CB A9 75		        LDA #$75                ;"stop/dot" char
  6713 A2CD 9D 06 05		        STA HISCORE_NAME,X
  6714 A2D0 9D 87 FA		        STA $fa87,X             ;update it in Screen RAM as well
  6715 A2D3 A9 00		        LDA #$00
  6716 A2D5 8D 11 05		        STA HISCORE_IS_CHAR_ANIM
  6717 A2D8 8D 12 05		        STA HISCORE_ANIM_CHAR_COUNTER
  6718 A2DB 4C F4 A2		        JMP @+1
  6719
  6720 A2DE AD 0F 05		@	    LDA HISCORE_NAME_IDX
  6721 A2E1 C9 08		        CMP #$08                ;strlen(name) == 8 ?
  6722 A2E3 F0 0F		        BEQ @+
  6723
  6724 A2E5 AD 10 05		        LDA HISCORE_SELECTED_CHAR
  6725 A2E8 AE 0F 05		        LDX HISCORE_NAME_IDX
  6726 A2EB 9D 06 05		        STA HISCORE_NAME,X
  6727 A2EE 9D 87 FA		        STA $fa87,X             ;update name in Screen RAM
  6728 A2F1 EE 0F 05		        INC HISCORE_NAME_IDX
  6729 A2F4 60			@	    RTS
  6730
  6731 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6732 A2F5			DISPLAY_HI_SCORES       ;$0E0F
  6733 A2F5 20 21 A4		        JSR CLEAR_SCREEN
  6734
  6735 				        ;  $FB/$FC -> Screen RAM: 3rd row, column 10
  6736 A2F8 A9 81		        LDA #<$fa81
  6737 A2FA 85 FB		        STA pFB
  6738 A2FC A9 FA		        LDA #>$fa81
  6739 A2FE 85 FC		        STA pFC
  6740
  6741 A300 A2 00		        LDX #$00
  6742 A302 20 41 A3		@	    JSR HISCORE_PRINT_PREFIX
  6743 A305 A5 FB		        LDA pFB
  6744 A307 18			        CLC
  6745 A308 69 05		        ADC #$05
  6746 A30A 85 FB		        STA pFB
  6747 A30C 20 56 A3		        JSR HISCORE_PRINT_NAME
  6748 A30F A5 FB		        LDA pFB
  6749 A311 18			        CLC
  6750 A312 69 0A		        ADC #$0A
  6751 A314 85 FB		        STA pFB
  6752 A316 20 6C A3		        JSR HISCORE_PRINT_SCORE
  6753 A319 A5 FB		        LDA pFB
  6754 A31B 18			        CLC
  6755 A31C 69 04		        ADC #$04     ;#%00000100
  6756 A31E 85 FB		        STA pFB
  6757 A320 A0 00		        LDY #$00     ;#%00000000
  6758 A322 A9 21		        LDA #$21     ;#%00100001
  6759 A324 91 FB		        STA (pFB),Y
  6760 A326 C8			        INY
  6761 A327 A9 21		        LDA #$21     ;#%00100001
  6762 A329 91 FB		        STA (pFB),Y
  6763 A32B A5 FB		        LDA pFB
  6764 A32D 18			        CLC
  6765 A32E 69 3D		        ADC #$3D     ;#%00111101
  6766 A330 85 FB		        STA pFB
  6767 A332 90 02		        BCC @+
  6768 A334 E6 FC		        INC pFC
  6769 A336 E8			@	    INX
  6770 A337 E0 08		        CPX #$08     ;#%00001000
  6771 A339 D0 C7		        BNE @-1
  6772
  6773 				        ; Wait for fire button
  6774
  6775 A33B AD 10 D0		@	    lda trig0
  6776 				        ;CMP #$6F     ;#%01101111
  6777 A33E D0 FB		        BNE @-
  6778 A340 60			        RTS
  6779
  6780 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6781 				; Prints the hiscore prefix. E.g: "1st", "2nd",...
  6782 				; X=prefix to print
  6783 A341			HISCORE_PRINT_PREFIX    ;$0E68
  6784 A341 8A			        TXA
  6785 A342 48			        PHA
  6786 A343 0A			        ASL
  6787 A344 0A			        ASL
  6788 A345 AA			        TAX
  6789 A346 A0 00		        LDY #$00     ;#%00000000
  6790 A348 BD A7 A3		@	    LDA HISCORE_PREFIX_TBL,X
  6791 A34B 91 FB		        STA (pFB),Y
  6792 A34D E8			        INX
  6793 A34E C8			        INY
  6794 A34F C0 04		        CPY #$04     ;#%00000100
  6795 A351 D0 F5		        BNE @-
  6796 A353 68			        PLA
  6797 A354 AA			        TAX
  6798 A355 60			        RTS
  6799
  6800 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6801 				; Print hiscore name. E.g: "john"
  6802 				; X=name to print
  6803 A356			HISCORE_PRINT_NAME      ;$0E7D
  6804 A356 8A			        TXA
  6805 A357 48			        PHA
  6806 A358 0A			        ASL
  6807 A359 0A			        ASL
  6808 A35A 0A			        ASL
  6809 A35B AA			        TAX
  6810 A35C A0 00		        LDY #$00     ;#%00000000
  6811 A35E BD C7 A3		@	    LDA HISCORE_NAME00,X
  6812 A361 91 FB		        STA (pFB),Y
  6813 A363 E8			        INX
  6814 A364 C8			        INY
  6815 A365 C0 08		        CPY #$08     ;#%00001000
  6816 A367 D0 F5		        BNE @-
  6817 A369 68			        PLA
  6818 A36A AA			        TAX
  6819 A36B 60			        RTS
  6820
  6821 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6822 				; Prints the score
  6823 				; X=score to print
  6824 A36C			HISCORE_PRINT_SCORE     ;$0E93
  6825 A36C 8A			        TXA
  6826 A36D 48			        PHA
  6827 A36E 0A			        ASL
  6828 A36F AA			        TAX
  6829 A370 A0 00		        LDY #$00     ;#%00000000
  6830 A372 BD 0F A4		        LDA HISCORE_LSB00,X
  6831 A375 29 F0		        AND #$F0     ;#%11110000
  6832 A377 4A			        LSR
  6833 A378 4A			        LSR
  6834 A379 4A			        LSR
  6835 A37A 4A			        LSR
  6836 A37B 69 21		        ADC #$21     ;#%00100001
  6837 A37D 91 FB		        STA (pFB),Y
  6838 A37F C8			        INY
  6839 A380 BD 0F A4		        LDA HISCORE_LSB00,X
  6840 A383 29 0F		        AND #$0F     ;#%00001111
  6841 A385 18			        CLC
  6842 A386 69 21		        ADC #$21     ;#%00100001
  6843 A388 91 FB		        STA (pFB),Y
  6844 A38A C8			        INY
  6845 A38B BD 10 A4		        LDA HISCORE_MSB00,X
  6846 A38E 29 F0		        AND #$F0     ;#%11110000
  6847 A390 4A			        LSR
  6848 A391 4A			        LSR
  6849 A392 4A			        LSR
  6850 A393 4A			        LSR
  6851 A394 18			        CLC
  6852 A395 69 21		        ADC #$21     ;#%00100001
  6853 A397 91 FB		        STA (pFB),Y
  6854 A399 C8			        INY
  6855 A39A BD 10 A4		        LDA HISCORE_MSB00,X
  6856 A39D 29 0F		        AND #$0F     ;#%00001111
  6857 A39F 18			        CLC
  6858 A3A0 69 21		        ADC #$21     ;#%00100001
  6859 A3A2 91 FB		        STA (pFB),Y
  6860 A3A4 68			        PLA
  6861 A3A5 AA			        TAX
  6862 A3A6 60			        RTS
  6863
  6864 A3A7			HISCORE_PREFIX_TBL      ;$0ECE
  6865 A3A7 22 6D 6E 20		        .BYTE $22,$6D,$6E,$20           ;"1st "
  6866 A3AB 23 68 5E 20		        .BYTE $23,$68,$5E,$20           ;"2nd "
  6867 A3AF 24 6C 5E 20		        .BYTE $24,$6C,$5E,$20           ;"3rd "
  6868 A3B3 25 6E 62 20		        .BYTE $25,$6E,$62,$20           ;"4th "
  6869 A3B7 26 6E 62 20		        .BYTE $26,$6E,$62,$20           ;"5th "
  6870 A3BB 27 6E 62 20		        .BYTE $27,$6E,$62,$20           ;"6th "
  6871 A3BF 28 6E 62 20		        .BYTE $28,$6E,$62,$20           ;"7th "
  6872 A3C3 29 6E 62 20		        .BYTE $29,$6E,$62,$20           ;"8th "
  6873
  6874 A3C7			HISCORE_NAME00
  6875 A3C7 5D 62 6C 63 6D 20 +         .BYTE $5D,$62,$6C,$63,$6D,$20,$20,$20   ;name for 1st
  6876 A3CF			HISCORE_NAME01
  6877 A3CF 6C 69 6C 73 20 20 +         .BYTE $6C,$69,$6C,$73,$20,$20,$20,$20   ;...2nd
  6878 A3D7 6E 62 5F 20 5E 6F +         .BYTE $6E,$62,$5F,$20,$5E,$6F,$5E,$5F
  6879 A3DF 6D 5B 6C 5B 62 20 +         .BYTE $6D,$5B,$6C,$5B,$62,$20,$76,$20
  6880 A3E7 68 63 61 5F 66 20 +         .BYTE $68,$63,$61,$5F,$66,$20,$20,$20
  6881 A3EF 65 5F 63 6E 62 20 +         .BYTE $65,$5F,$63,$6E,$62,$20,$20,$20
  6882 A3F7 5B 5E 69 66 60 20 +         .BYTE $5B,$5E,$69,$66,$60,$20,$20,$20
  6883 A3FF 5E 63 66 65 20 20 +         .BYTE $5E,$63,$66,$65,$20,$20,$20,$20   ;...8th
  6884 A407 20 20 20 20 20 20 +         .BYTE $20,$20,$20,$20,$20,$20,$20,$20
  6885
  6886 				        ; High Scores
  6887 = A410			HISCORE_MSB00 =*+1
  6888 A40F			HISCORE_LSB00
  6889 A40F 00 90		        .WORD $9000
  6890 = A412			HISCORE_MSB01 =*+1
  6891 A411			HISCORE_LSB01
  6892 A411 00 80 00 70 00 60 +         .WORD $8000,$7000,$6000,$5000
  6893 A419 00 40 00 30 00 20 +         .WORD $4000,$3000,$2000,$0000		
  6894
  6895 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6896 A421			CLEAR_SCREEN    ;$1334
  6897 				        ; $FB/$FC -> Screen RAM
  6898 				        ; $FD/$FE -> Color RAM
  6899 A421 A9 00		        LDA #$00
  6900 A423 85 FB		        STA pFB
  6901 				        ;STA pFD
  6902 A425 A9 FA		        LDA #$fa
  6903 A427 85 FC		        STA pFC
  6904 				        ;LDA #$D8
  6905 				        ;STA pFE
  6906
  6907 A429 A0 00		        LDY #$00
  6908 A42B A9 20		@	    LDA #$20     ;space
  6909 A42D 91 FB		@        STA (pFB),Y
  6910 				        ;LDA #$01     ;white
  6911 				        ;STA (pFD),Y
  6912 A42F E6 FB		        INC pFB
  6913 				        ;INC pFD
  6914 A431 D0 FA		        BNE @-
  6915 A433 E6 FC		        INC pFC
  6916 				        ;INC pFE
  6917 A435 A5 FC		        LDA pFC
  6918 A437 C9 FE		        CMP #$fe
  6919 A439 D0 F0		        BNE @-1
  6920 A43B 60			        RTS
  6921
  6922 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6923 				; Sets up the hero and sight sprite, and cleans up name and other vars
  6924 A43C			HISCORE_SETUP_SPRITES   ;$0B94
  6925 				        ; Sight sprite
  6926 A43C A9 64		        LDA #$64     ;#%01100100
  6927 A43E 29 F0		        AND #$F0     ;#%11110000
  6928 A440 8D 15 D8		        STA SPRITES_X_LO05
  6929 A443 A9 64		        LDA #$64     ;#%01100100
  6930 A445 29 F0		        AND #$F0     ;#%11110000
  6931 A447 8D 25 D8		        STA SPRITES_Y05
  6932 A44A A9 00		        LDA #$00
  6933 A44C 8D 05 D8		        STA SPRITES_X_HI05
  6934 A44F A9 FE		        LDA #$fe     ;sight sprite
  6935 A451 8D 55 D8		        STA SPRITES_PTR05
  6936 A454 A9 02		        LDA #$02     ;red
  6937 A456 8D 45 D8		        STA SPRITES_COLOR05
  6938 A459 A9 FF		        LDA #$FF
  6939 A45B 8D 35 D8		        STA SPRITES_BKG_PRI05
  6940 A45E A9 01		        LDA #$01            ;anim_type_01: bullet
  6941 A460 8D 85 D8		        STA SPRITES_TYPE05
  6942 A463 AD 15 D8		        LDA SPRITES_X_LO05
  6943
  6944 				        ; Hero sprite
  6945 A466 8D 10 D8		        STA SPRITES_X_LO00
  6946 A469 A9 B4		        LDA #$B4
  6947 A46B 8D 20 D8		        STA SPRITES_Y00
  6948 A46E A9 00		        LDA #$00
  6949 A470 8D 00 D8		        STA SPRITES_X_HI00
  6950 A473 A9 98		        LDA #$98     ;Hero going up
  6951 A475 8D 50 D8		        STA SPRITES_PTR00
  6952 A478 A9 06		        LDA #$06     ;blue
  6953 A47A 8D 40 D8		        STA SPRITES_COLOR00
  6954 A47D A9 00		        LDA #$00
  6955 A47F 8D 30 D8		        STA SPRITES_BKG_PRI00
  6956 A482 A9 01		        LDA #$01
  6957 A484 8D 80 D8		        STA SPRITES_TYPE00
  6958
  6959 A487 A2 07		        LDX #$07
  6960 A489 A9 00		        LDA #$00
  6961 A48B 9D 06 05		@	    STA HISCORE_NAME,X
  6962 A48E CA			        DEX
  6963 A48F 10 FA		        BPL @-
  6964
  6965 A491 A9 00		        LDA #$00
  6966 A493 8D 05 05		        STA HISCORE_IS_BULLET_ANIM
  6967 A496 8D 0F 05		        STA HISCORE_NAME_IDX
  6968 A499 8D 11 05		        STA HISCORE_IS_CHAR_ANIM
  6969
  6970 				        ; $F7/$F8 -> Screen RAM
  6971 A49C A9 81		        LDA #<$fa81
  6972 A49E 85 F7		        STA pF7
  6973 A4A0 A9 FA		        LDA #>$fa81
  6974 A4A2 85 F8		        STA pF8
  6975
  6976 A4A4 A9 20		        LDA #$20
  6977 A4A6 8D 10 05		        STA HISCORE_SELECTED_CHAR
  6978 A4A9 20 5E 2C		        JSR APPLY_DELTA_MOV
  6979 A4AC 20 C6 2C		        JSR SORT_SPRITES_BY_Y
  6980 A4AF 60			        RTS
  6981
  6982 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  6983 A4B0			HISCORE_READ_JOY_MOV
  6984 				        ;LDA $DC00
  6985 A4B0 AD 00 D3				lda porta
  6986 A4B3 29 01		        AND #$01     ;#%00000001        up?
  6987 A4B5 D0 0C		        BNE @+
  6988 A4B7 AD 25 D8		        LDA SPRITES_Y05
  6989 A4BA C9 64		        CMP #$64     ;reached top?
  6990 A4BC 90 05		        BCC @+
  6991 A4BE A9 FE		        LDA #$FE     ;2 pixels up
  6992 A4C0 8D 75 D8		        STA SPRITES_DELTA_Y05
  6993
  6994 A4C3			@	    ;LDA $DC00
  6995 A4C3 AD 00 D3				lda porta
  6996 A4C6 29 02		        AND #$02     ;#%00000010        down?
  6997 A4C8 D0 0C		        BNE @+
  6998 A4CA AD 25 D8		        LDA SPRITES_Y05
  6999 A4CD C9 78		        CMP #$78     ;reached bottom?
  7000 A4CF B0 05		        BCS @+
  7001 A4D1 A9 02		        LDA #$02     ;2 pixels down
  7002 A4D3 8D 75 D8		        STA SPRITES_DELTA_Y05
  7003
  7004 A4D6			@	    ;LDA $DC00    ;CIA1: Data Port Register A (enter high score)
  7005 A4D6 AD 00 D3				lda porta
  7006 A4D9 29 04		        AND #$04     ;#%00000100        left?
  7007 A4DB D0 0C		        BNE @+
  7008 A4DD AD 15 D8		        LDA SPRITES_X_LO05
  7009 A4E0 C9 64		        CMP #$64     ;reached margin left?
  7010 A4E2 90 05		        BCC @+
  7011 A4E4 A9 FE		        LDA #$FE     ;2 pixels to left
  7012 A4E6 8D 65 D8		        STA SPRITES_DELTA_X05
  7013
  7014 A4E9			@	    ;LDA $DC00
  7015 A4E9 AD 00 D3				lda porta
  7016 A4EC 29 08		        AND #$08     ;#%00001000        right?
  7017 A4EE D0 0C		        BNE @+
  7018 A4F0 AD 15 D8		        LDA SPRITES_X_LO05
  7019 A4F3 C9 F0		        CMP #$F0     ;reached margin right?
  7020 A4F5 B0 05		        BCS @+
  7021 A4F7 A9 02		        LDA #$02     ;2 pixels to right
  7022 A4F9 8D 65 D8		        STA SPRITES_DELTA_X05
  7023
  7024 A4FC AD 15 D8		@	    LDA SPRITES_X_LO05
  7025 A4FF 8D 10 D8		        STA SPRITES_X_LO00
  7026 A502 29 1F		        AND #$1F     ;#%00011111
  7027 A504 4A			        LSR 
  7028 A505 4A			        LSR 
  7029 A506 4A			        LSR 
  7030 A507 A8			        TAY
  7031 A508 B9 F5 38		        LDA HERO_FRAMES_UP,Y
  7032 A50B 8D 50 D8		        STA SPRITES_PTR00
  7033 A50E AD 05 D8		        LDA SPRITES_X_HI05
  7034 A511 8D 00 D8		        STA SPRITES_X_HI00
  7035 A514 60			        RTS
  7036
  7037 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  7038 A515 AD 15 D8		s0C6F   LDA SPRITES_X_LO05
  7039 A518 29 0F		        AND #$0F     ;#%00001111
  7040 A51A D0 05		        BNE @+
  7041 A51C A9 00		        LDA #$00     ;#%00000000
  7042 A51E 8D 65 D8		        STA SPRITES_DELTA_X05
  7043 A521 AD 25 D8		@	    LDA SPRITES_Y05
  7044 A524 29 0F		        AND #$0F     ;#%00001111
  7045 A526 D0 05		        BNE @+
  7046 A528 A9 00		        LDA #$00     ;#%00000000
  7047 A52A 8D 75 D8		        STA SPRITES_DELTA_Y05
  7048 A52D 60			@	    RTS
  7049
  7050
  7051 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  7052 				; Animates the selected char in hiscore
  7053 A52E			HISCORE_ANIM_CHAR       ;$0ABE
  7054 A52E AD 11 05		        LDA HISCORE_IS_CHAR_ANIM
  7055 A531 F0 36		        BEQ _SKIP9
  7056
  7057 A533 A0 00		        LDY #$00     ;#%00000000
  7058 A535 EE 12 05		        INC HISCORE_ANIM_CHAR_COUNTER
  7059 A538 AD 12 05		        LDA HISCORE_ANIM_CHAR_COUNTER
  7060 A53B C9 32		        CMP #$32     ;#%00110010
  7061 A53D F0 20		        BEQ @+2
  7062 A53F 29 0F		        AND #$0F     ;#%00001111
  7063 A541 4A			        LSR 
  7064 A542 4A			        LSR 
  7065 A543 29 03		        AND #$03
  7066 A545 F0 0D		        BEQ @+
  7067 A547 29 01		        AND #$01
  7068 A549 D0 0F		        BNE @+1
  7069 A54B AD 10 05		        LDA HISCORE_SELECTED_CHAR
  7070 A54E 18			        CLC
  7071 A54F 69 20		        ADC #$20     ;Select the flipped char
  7072 A551 91 F7		        STA (pF7),Y
  7073 A553 60			        RTS
  7074
  7075 A554 AD 10 05		@	    LDA HISCORE_SELECTED_CHAR
  7076 A557 91 F7		        STA (pF7),Y
  7077 A559 60			        RTS
  7078
  7079 A55A A9 79		@	    LDA #$79     ;Select the regular char
  7080 A55C 91 F7		        STA (pF7),Y
  7081 A55E 60			        RTS
  7082
  7083 A55F A9 00		@	    LDA #$00     ;#%00000000
  7084 A561 8D 11 05		        STA HISCORE_IS_CHAR_ANIM
  7085 A564 AD 10 05		        LDA HISCORE_SELECTED_CHAR
  7086 A567 91 F7		        STA (pF7),Y
  7087 A569 60			_SKIP9  RTS
  7088
  7089 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  7090 				; Get the selected char with the sight in the hiscore scene
  7091 A56A			HISCORE_GET_SELECTED_CHAR       ;$0AFA
  7092 A56A AD 15 D8		        LDA SPRITES_X_LO05
  7093 A56D 29 F0		        AND #$F0     ;#%11110000
  7094 A56F 38			        SEC
  7095 A570 E9 10		        SBC #$10     ;#%00010000
  7096 A572 08			        PHP
  7097 A573 4A			        LSR 
  7098 A574 4A			        LSR 
  7099 A575 4A			        LSR 
  7100 A576 28			        PLP
  7101 A577 90 08		        BCC @+
  7102 A579 AC 05 D8		        LDY SPRITES_X_HI05
  7103 A57C F0 03		        BEQ @+
  7104 A57E 18			        CLC
  7105 A57F 69 20		        ADC #$20     ;#%00100000
  7106 A581 85 FB		@	    STA pFB
  7107 A583 A9 00		        LDA #$00     ;#%00000000
  7108 A585 85 FC		        STA pFC
  7109 A587 85 FD		        STA pFD
  7110 A589 85 FE		        STA pFE
  7111 A58B AD 25 D8		        LDA SPRITES_Y05
  7112 A58E 29 F0		        AND #$F0     ;#%11110000
  7113 A590 38			        SEC
  7114 A591 E9 2E		        SBC #$2E     ;#%00101110
  7115 A593 4A			        LSR 
  7116 A594 4A			        LSR 
  7117 A595 4A			        LSR 
  7118 A596 48			        PHA
  7119 A597 4A			        LSR 
  7120 A598 66 FC		        ROR pFC
  7121 A59A 4A			        LSR 
  7122 A59B 66 FC		        ROR pFC
  7123 A59D 4A			        LSR 
  7124 A59E 66 FC		        ROR pFC
  7125 A5A0 85 FD		        STA pFD
  7126 A5A2 68			        PLA
  7127 A5A3 0A			        ASL 
  7128 A5A4 26 FE		        ROL pFE
  7129 A5A6 0A			        ASL 
  7130 A5A7 26 FE		        ROL pFE
  7131 A5A9 0A			        ASL 
  7132 A5AA 26 FE		        ROL pFE
  7133 A5AC 18			        CLC
  7134 A5AD 65 FC		        ADC pFC
  7135 A5AF 85 FC		        STA pFC
  7136 A5B1 A5 FD		        LDA pFD
  7137 A5B3 65 FE		        ADC pFE
  7138 A5B5 85 FD		        STA pFD
  7139 A5B7 A5 FC		        LDA pFC
  7140 A5B9 18			        CLC
  7141 A5BA 65 FB		        ADC pFB
  7142 A5BC 85 FC		        STA pFC
  7143 A5BE A5 FD		        LDA pFD
  7144 A5C0 69 00		        ADC #$00     ;#%00000000
  7145 A5C2 85 FD		        STA pFD
  7146 A5C4 A5 FD		        LDA pFD
  7147 A5C6 18			        CLC
  7148 A5C7 69 FA		        ADC #$fa     ;#%11100000
  7149 A5C9 85 FD		        STA pFD
  7150 A5CB A5 FC		        LDA pFC
  7151 A5CD 85 F7		        STA pF7
  7152 A5CF A5 FD		        LDA pFD
  7153 A5D1 85 F8		        STA pF8
  7154 				        ;SEI
  7155 A5D3 A5 01		        LDA a01
  7156 A5D5 29 FD		        AND #$FD     ;Enable I/O to read from Screen RAM
  7157 A5D7 85 01		        STA a01
  7158
  7159 A5D9 A0 00		        LDY #$00     ;#%00000000
  7160 A5DB B1 FC		        LDA (pFC),Y
  7161 A5DD 8D 10 05		        STA HISCORE_SELECTED_CHAR
  7162 A5E0 A5 01		        LDA a01
  7163 A5E2 09 02		        ORA #$02
  7164 A5E4 85 01		        STA a01
  7165
  7166 				        ;CLI
  7167 A5E6 60			        RTS
  7168 						
  7169 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  7170 				; Set fort on fire animation (lvl3, when you beat the game)
  7171 A5E7			SET_FORT_ON_FIRE      ;$3CD0
  7172 A5E7 20 A8 35		        JSR CLEANUP_SPRITES
  7173
  7174 A5EA A2 00		        LDX #$00
  7175 A5EC BD 49 A6		@	    LDA f3D27,X
  7176 A5EF 9D 15 D8		        STA SPRITES_X_LO05,X
  7177 A5F2 BD 5F A6		        LDA f3D3D,X
  7178 A5F5 9D 25 D8		        STA SPRITES_Y05,X
  7179 A5F8 BD 54 A6		        LDA f3D32,X
  7180 A5FB 9D 05 D8		        STA SPRITES_X_HI05,X
  7181 A5FE A9 EE		        LDA #$EE            ;Fire frame
  7182 A600 9D 55 D8		        STA SPRITES_PTR05,X
  7183 A603 A9 02		        LDA #$02            ;red
  7184 A605 9D 45 D8		        STA SPRITES_COLOR05,X
  7185 A608 A9 00		        LDA #$00
  7186 A60A 9D 35 D8		        STA SPRITES_BKG_PRI05,X
  7187 A60D A9 01				lda #1
  7188 A60F 9D 85 D8				sta SPRITES_TYPE05,x
  7189 A612 E8			        INX
  7190 A613 E0 0B		        CPX #11
  7191 A615 D0 D5		        BNE @-
  7192
  7193 A617 20 5E 2C		        JSR APPLY_DELTA_MOV
  7194 A61A 20 C6 2C		        JSR SORT_SPRITES_BY_Y
  7195 A61D A9 FF		        LDA #$FF
  7196 A61F 8D E6 04		        STA COUNTER1
  7197 A622 A2 00		@	    LDX #$00
  7198 A624 A9 EE		@	    LDA #$EE            ;Fire frame
  7199 A626 9D 55 D8		        STA SPRITES_PTR05,X
  7200 A629 20 94 98		        JSR GET_RANDOM
  7201 A62C 29 03		        AND #$03            ;#%00000011
  7202 A62E D0 05		        BNE @+
  7203 A630 A9 FF		        LDA #$FF            ;Empty frame
  7204 A632 9D 55 D8		        STA SPRITES_PTR05,X
  7205 A635 E8			@	    INX
  7206 A636 E0 0B		        CPX #11
  7207 A638 D0 EA		        BNE @-1
  7208 						
  7209 A63A 20 A4 27				jsr print_sprites		
  7210 A63D 20 59 2E		        JSR WAIT_RASTER_AT_BOTTOM
  7211 A640 20 50 28				jsr draw_ekran
  7212
  7213 A643 CE E6 04		        DEC COUNTER1
  7214 A646 D0 DA		        BNE @-2
  7215
  7216 A648 60			        RTS
  7217
  7218 				        ; Fire position
  7219 				        ; sprite X LSB
  7220 A649 6E 82 96 AA BE DC + f3D27   .BYTE $6E,$82,$96,$AA,$BE,$DC,$E6,$40
  7221 A651 4A 19 23		        .BYTE $4a,$19,$23
  7222 				        ; sprite X MSB
  7223 A654 00 00 00 00 00 00 + f3D32   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  7224 A65C 00 FF FF		        .BYTE $00,$FF,$FF
  7225 				        ; sprite Y
  7226 A65F 32 32 32 32 32 32 + f3D3D   .BYTE $32,$32,$32,$32,$32,$32,$32,$6E
  7227 A667 6E 6E 6E		        .BYTE $6E,$6E,$6E	
  7228
  7229
  7230 A66A			pr_prefix
  7231 A66A A0 00				ldy #0
  7232 A66C BD A7 A3		@		lda HISCORE_PREFIX_TBL,x
  7233 A66F 91 73				sta (pom),y
  7234 A671 E8					inx
  7235 A672 C8					iny
  7236 A673 C0 03				cpy #3
  7237 A675 D0 F5				bne @-
  7238 A677 60					rts
  7239
  7240 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  7241 				; Prints the "broke area... now rush... " msg
  7242 A678			PRINT_LVL_COMPLETE      ;$1240
  7243 A678 AD F3 04		        LDA LEVEL_NR
  7244 A67B 48			        PHA
  7245 A67C 29 07		        AND #$07
  7246 A67E 0A			        ASL 
  7247 A67F 0A			        ASL 
  7248 A680 A8			        TAY
  7249 						
  7250 A681 A9 2B 85 73 A9 A7 + 		mwa #f12e0 pom
  7251 A689 AD F3 04				lda level_nr
  7252 A68C 0A					asl
  7253 A68D 0A					asl
  7254 A68E AA					tax
  7255 A68F 20 6A A6				jsr pr_prefix
  7256 A692 A9 40 85 73 A9 A7 + 		mwa #f12f5 pom
  7257 A69A AD F3 04				lda level_nr
  7258 A69D 18					clc
  7259 A69E 69 01				adc #1
  7260 A6A0 0A					asl
  7261 A6A1 0A					asl
  7262 A6A2 AA					tax
  7263 A6A3 20 6A A6				jsr pr_prefix
  7264 				/*
  7265 				        LDX #$00
  7266 				@	    LDA _TXT_1ST,Y
  7267 				        STA f12E0,X
  7268 				        LDA _TXT_2ND,Y
  7269 				        STA f12F5,X
  7270 				        INY
  7271 				        INX
  7272 				        CPX #$03
  7273 				        BNE @-  */
  7273
  7274
  7275 A6A6 A9 21		        LDA #<p12D6
  7276 A6A8 8D F6 A6		        STA _Llc02
  7277 A6AB A9 A7		        LDA #>p12D6
  7278 A6AD 8D F7 A6		        STA _Llc03
  7279 A6B0 A9 33		        LDA #<p12E8
  7280 A6B2 8D 08 A7		        STA _Llc05
  7281 A6B5 A9 A7		        LDA #>p12E8
  7282 A6B7 8D 09 A7		        STA _Llc06
  7283
  7284 A6BA AD F3 04		        LDA LEVEL_NR
  7285 A6BD 29 07		        AND #$07     ;#%00000011
  7286 A6BF C9 07		        CMP #$07     ;#%00000011
  7287 A6C1 D0 14		        BNE @+
  7288
  7289 A6C3 A9 48		        LDA #<p12FD
  7290 A6C5 8D F6 A6		        STA _Llc02
  7291 A6C8 A9 A7		        LDA #>p12FD
  7292 A6CA 8D F7 A6		        STA _Llc03
  7293 A6CD A9 5A		        LDA #<p130F
  7294 A6CF 8D 08 A7		        STA _Llc05
  7295 A6D2 A9 A7		        LDA #>p130F
  7296 A6D4 8D 09 A7		        STA _Llc06  
  7297
  7298 A6D7 A9 02		@	    LDA #$02     ;#%00000010
  7299 A6D9 8D F3 04		        STA LEVEL_NR
  7300 						//jsr clear_sprites
  7301 A6DC 20 A8 35		        JSR CLEANUP_SPRITES
  7302 A6DF 20 21 A4		        JSR CLEAR_SCREEN
  7303 A6E2 20 52 2E				jsr wait_vbl1
  7304 A6E5 A0 40				ldy #$40
  7305 A6E7 A9 01 91 71				mva #$1 (fx_ptr),y
  7306 A6EB 20 5C 20				jsr clear_screen_vbxe
  7307 A6EE A9 00		        LDA #$00     ;#%00000000
  7308 A6F0 8D E2 04		        STA BKG_COLOR0
  7309 						
  7310
  7311 				        ; Print "Broke the NNN area" msg
  7312 A6F3 A2 00		        LDX #$00
  7313 = A6F6			_Llc02    =*+$01
  7314 = A6F7			_Llc03    =*+$02
  7315 A6F5 BD B8 88		@	    LDA f2596,X                 ;Self-modifying
  7316 A6F8 9D 9A FB		        STA $fa00 + 40*10 + 10,X    ;Screen RAM
  7317 				        ;LDA #$01                    ;white
  7318 				        ;STA $D800 + 40*10 + 10,X    ;Color RAM
  7319 A6FB A0 05		        LDY #$05
  7320 A6FD 20 D5 35		        JSR DELAY
  7321 A700 E8			        INX
  7322 A701 E0 12		        CPX #$12        ;msg len
  7323 A703 D0 F0		        BNE @-
  7324 						
  7325 						
  7326
  7327 				        ; Print "Now rush the NNN area" msg
  7328 A705 A2 00		        LDX #$00
  7329 = A708			_Llc05    =*+$01
  7330 = A709			_Llc06    =*+$02
  7331 A707 BD B8 88		@	    LDA f2596,X                 ;Self-modifying
  7332 A70A 9D E9 FB		        STA $fa00 + 40*12 + 9,X     ;Screen RAM
  7333 				        ;LDA #$01                    ;white
  7334 				        ;STA $D800 + 40*12 + 9,X     ;Color RAM
  7335 A70D A0 05		        LDY #$05
  7336 A70F 20 D5 35		        JSR DELAY
  7337 A712 E8			        INX
  7338 A713 E0 15		        CPX #$15        ;msg len
  7339 A715 D0 F0		        BNE @-
  7340
  7341 A717 A0 78		        LDY #$78
  7342 A719 20 D5 35		        JSR DELAY
  7343 A71C 68			        PLA
  7344 A71D 8D F3 04		        STA LEVEL_NR
  7345 A720 60			        RTS
  7346
  7347 A721 5C 6C 69 65 5F 20 + p12D6   .BYTE $5C,$6C,$69,$65,$5F,$20,$6E,$62		;1st
  7348 A729 5F 20		        .BYTE $5F,$20
  7349 A72B 72 72 72 20 5B 6C + f12E0   .BYTE $72,$72,$72,$20,$5B,$6C,$5F,$5B
  7350 A733 68 69 71 20 6C 6F + p12E8   .BYTE $68,$69,$71,$20,$6C,$6F,$6D,$62		;2nd
  7351 A73B 20 6E 62 5F 20	        .BYTE $20,$6E,$62,$5F,$20
  7352 A740 72 72 72 20 5B 6C + f12F5   .BYTE $72,$72,$72,$20,$5B,$6C,$5F,$5B
  7353 A748 20 20 5D 69 68 61 + p12FD   .BYTE $20,$20,$5D,$69,$68,$61,$6C,$5B		;2nd
  7354 A750 6E 6F 66 5B 6E 63 +         .BYTE $6E,$6F,$66,$5B,$6E,$63,$69,$68
  7355 A758 6D 20		        .BYTE $6D,$20
  7356 A75A 20 20 20 67 63 6D + p130F   .BYTE $20,$20,$20,$67,$63,$6D,$6D,$63		;3rd
  7357 A762 69 68 20 5D 69 67 +         .BYTE $69,$68,$20,$5D,$69,$67,$6A,$66
  7358 A76A 5F 6E 5F 20 20	        .BYTE $5F,$6E,$5F,$20,$20
  7359
  7360 A76F			_TXT_1ST
  7361 A76F 22 6D 6E 20		        .BYTE $22,$6D,$6E,$20       ;1st
  7362 A773			_TXT_2ND
  7363 A773 23 68 5E 20		        .BYTE $23,$68,$5E,$20       ;2nd
  7364 A777 24 6C 5E 20		        .BYTE $24,$6C,$5E,$20       ;3rd
  7365 A77B 25 6E 62 20		        .BYTE $25,$6E,$62,$20       ;4th
  7366
  7367 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  7368 				; Patches the level data with the turret destroyed/restored
  7369 				; A = 0 left turret Ok
  7370 				;   = 2 right turret Ok
  7371 				;   = 4 left turret destroyed
  7372 				;   = 6 right turret destroyed
  7373 				; FB = ptr to destination
  7374 = A780			f14CC   =*+1
  7375 A77F D1 A7 07 A8 3D A8 + f14CB   dta a(f1502,f1538,f156E,f15A4)
  7376
  7377 A787			LEVEL_PATCH_TURRET         ;$14D3
  7378 A787 AA			        TAX
  7379 A788 BD 7F A7		        LDA f14CB,X
  7380 A78B 8D A8 A7		        STA _lpt_src+1
  7381 A78E BD 80 A7		        LDA f14CC,X
  7382 A791 8D A9 A7		        STA _lpt_src+2
  7383
  7384 A794 A0 5E				ldy #$5e
  7385 A796 A9 69 91 71 C8			mva #$60+8+1 (fx_ptr),y+			;$6000+CPU+*K
  7386 A79B AD F3 04				lda level_nr
  7387 A79E 0A					asl
  7388 A79F 69 D0				adc #$50+$80
  7389 A7A1 91 71				sta (fx_ptr),y			
  7390 						
  7391 A7A3 A2 00		        LDX #$00
  7392 A7A5 A0 00		@	    LDY #$00
  7393 A7A7			_lpt_src
  7394 A7A7 BD B8 88		@    	LDA f2596,X                 ;Self-modifying
  7395 A7AA 91 FB		        STA (pFB),Y
  7396 A7AC 91 73				sta (pom),y
  7397 A7AE E8			        INX
  7398 A7AF C8			        INY
  7399 A7B0 C0 06		        CPY #$06     ;#%00000110
  7400 A7B2 D0 F3		        BNE @-
  7401
  7402 A7B4 A5 FB		        LDA pFB
  7403 A7B6 18			        CLC
  7404 A7B7 69 28		        ADC #$28     ;#%00101000        Next row
  7405 A7B9 85 FB		        STA pFB
  7406 A7BB 85 73				sta pom
  7407 A7BD 90 04		        BCC *+6
  7408 A7BF E6 FC		        INC pFC
  7409 A7C1 E6 74				inc pom+1
  7410 A7C3 E0 36				CPX #$36     ;#%00110110
  7411 A7C5 90 DE		        BCC @-1
  7412 						
  7413 A7C7 A0 5E				ldy #$5e
  7414 A7C9 A9 00 91 71 C8			mva #0 (fx_ptr),y+
  7415 A7CE 91 71				sta (fx_ptr),y
  7416 						
  7417 A7D0 60			        RTS
  7418
  7419
  7420 				; Turrets to draw: left turret / right turret, destroyed, restored
  7421 = A7D1			f1502=*
  7422 A7D1 30 30 30 7A 71 30 + 		ins './orig/turret.bin'
  7423
  7424 = A807			f1538=f1502+54
  7425 = A83D			f156e=f1538+54
  7426 = A873			f15A4=f156e+54
  7427
  7428
  7429 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  7430 				; ref: anim_type_01, hero_type_anim_01
  7431 				; Hero Anim bullet
  7432 A8A9			TYPE_ANIM_BULLET  ;$3935
  7433 A8A9 FE 90 D8		        INC SPRITES_TMP_A01,X
  7434 A8AC BD 90 D8		        LDA SPRITES_TMP_A01,X
  7435 A8AF C9 0F		        CMP #$0F
  7436 A8B1 D0 03		        BNE @+
  7437 A8B3 4C 3B A9		        JMP @+4
  7438
  7439 A8B6 A0 00		@	    LDY #$00
  7440 A8B8 B9 85 D8		@	    LDA SPRITES_TYPE05,Y
  7441 A8BB 84 FB		        STY pFB
  7442 A8BD A8			        TAY
  7443 A8BE B9 BC A9		        LDA f2544,Y
  7444 A8C1 A4 FB		        LDY pFB
  7445 A8C3 29 01		        AND #$01                ;bullet mask
  7446 A8C5 F0 3A		        BEQ @+
  7447
  7448 				        ; Is there collision between enemy and bullet?
  7449 A8C7 BD 01 D8		        LDA SPRITES_X_HI01,X
  7450 A8CA D9 05 D8		        CMP SPRITES_X_HI05,Y
  7451 A8CD D0 32		        BNE @+
  7452 A8CF BD 11 D8		        LDA SPRITES_X_LO01,X
  7453 A8D2 18			        CLC
  7454 A8D3 69 0A		        ADC #$0A
  7455 A8D5 D9 15 D8		        CMP SPRITES_X_LO05,Y
  7456 A8D8 90 27		        BCC @+
  7457 A8DA BD 11 D8		        LDA SPRITES_X_LO01,X
  7458 A8DD 38			        SEC
  7459 A8DE E9 0A		        SBC #$0A
  7460 A8E0 D9 15 D8		        CMP SPRITES_X_LO05,Y
  7461 A8E3 B0 1C		        BCS @+
  7462 A8E5 BD 21 D8		        LDA SPRITES_Y01,X
  7463 A8E8 18			        CLC
  7464 A8E9 69 0C		        ADC #$0C
  7465 A8EB D9 25 D8		        CMP SPRITES_Y05,Y
  7466 A8EE 90 11		        BCC @+
  7467 A8F0 BD 21 D8		        LDA SPRITES_Y01,X
  7468 A8F3 38			        SEC
  7469 A8F4 E9 0C		        SBC #$0C
  7470 A8F6 D9 25 D8		        CMP SPRITES_Y05,Y
  7471 A8F9 B0 06		        BCS @+
  7472 A8FB 20 EE 9E		        JSR DIE_ANIM_AND_SCORE
  7473 A8FE 20 69 3B		        JSR CLEANUP_HERO_SPRITE
  7474
  7475 A901 C8			@	    INY
  7476 A902 C0 0B		        CPY #TOTAL_MAX_SPRITES-5
  7477 A904 D0 B2		        BNE @-1
  7478
  7479 A906 BD 11 D8		        LDA SPRITES_X_LO01,X
  7480 A909 8D F0 04		        STA TMP_SPRITE_X_LO
  7481 A90C BD 21 D8		        LDA SPRITES_Y01,X
  7482 A90F 38			        SEC
  7483 A910 E9 06		        SBC #$06     ;#%00000110
  7484 A912 8D F1 04		        STA TMP_SPRITE_Y
  7485 A915 BD 01 D8		        LDA SPRITES_X_HI01,X
  7486 A918 8D F2 04		        STA TMP_SPRITE_X_HI
  7487 A91B 20 4E 39		        JSR j172F
  7488 						
  7489 				        ; Get charset mask info
  7490 A91E A0 00		        LDY #$00
  7491 A920 B1 FC		        LDA (pFC),Y			;znak pod bohaterem
  7492 A922 A8			        TAY
  7493 				        ; Get charset mask info
  7494 A923 B1 2A		        LDA (p2A),Y
  7495 A925 29 01		        AND #$01     ;#%00000001
  7496 A927 D0 12		        BNE @+1
  7497
  7498 A929 B1 2A		        LDA (p2A),Y
  7499 A92B 29 02		        AND #$02     ;#%00000010
  7500 A92D F0 06		        BEQ @+
  7501
  7502 A92F A9 FF		        LDA #$FF     ;#%11111111
  7503 A931 9D 31 D8		        STA SPRITES_BKG_PRI01,X
  7504 A934 60			        RTS
  7505
  7506 A935 A9 00		@	    LDA #$00     ;#%00000000
  7507 A937 9D 31 D8		        STA SPRITES_BKG_PRI01,X
  7508 A93A 60			        RTS
  7509
  7510 A93B A9 03		@	    LDA #$03     ;#%00000011
  7511 A93D 9D 81 D8		        STA SPRITES_TYPE01,X
  7512 A940 A9 00		        LDA #$00     ;#%00000000
  7513 A942 9D 90 D8		        STA SPRITES_TMP_A01,X
  7514 A945 9D 61 D8		        STA SPRITES_DELTA_X01,X
  7515 A948 9D 71 D8		        STA SPRITES_DELTA_Y01,X
  7516 A94B A8			        TAY
  7517 A94C B9 60 3B		        LDA FRAME_BULLET_END,Y
  7518 A94F 9D 51 D8		        STA SPRITES_PTR01,X
  7519 A952 60			        RTS
  7520
  7521 				;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-;
  7522 				; Animation for hero in "normal" state
  7523 				; X=Sprite to update
  7524 				; ref: hero_type_anim_00
  7525 A953			TYPE_ANIM_HERO_MAIN
  7526 A953 AD 03 05		        LDA IS_HERO_DEAD
  7527 A956 D0 5E		        BNE @+2
  7528 A958 AD EF 04		        LDA ENEMIES_IN_FORT
  7529 A95B D0 05		        BNE @+
  7530 A95D AD F4 04		        LDA ANY_ENEMY_IN_MAP
  7531 A960 F0 54		        BEQ @+2
  7532
  7533 A962			@	    ;LDA $DC00    ;CIA1: Data Port Register A (in-game fire)
  7534 A962 AD 10 D0				lda trig0
  7535 				        ;AND #$10     ;#%00010000
  7536 A965 D0 4F		        BNE @+1
  7537
  7538 A967 AD DF 04		        LDA FIRE_COOLDOWN
  7539 A96A C9 08		        CMP #$08     ;#%00001000
  7540 A96C F0 47		        BEQ @+
  7541 A96E EE DF 04		        INC FIRE_COOLDOWN
  7542 A971 AD DF 04		        LDA FIRE_COOLDOWN
  7543 A974 29 07		        AND #$07     ;#%00000111
  7544 A976 D0 3D		        BNE @+
  7545
  7546 				        ; Fire routine executed when FIRE_COOLDOWN is 0
  7547
  7548 A978 AC E1 04		        LDY a04E1
  7549 A97B B9 45 3A		        LDA f35F7,Y
  7550 A97E 9D 61 D8		        STA SPRITES_DELTA_X01,X
  7551 A981 B9 55 3A		        LDA f3607,Y
  7552 A984 9D 71 D8		        STA SPRITES_DELTA_Y01,X
  7553 A987 AD 10 D8		        LDA SPRITES_X_LO00
  7554 A98A 18			        CLC
  7555 A98B 79 65 3A		        ADC f3617,Y
  7556 A98E 9D 11 D8		        STA SPRITES_X_LO01,X
  7557
  7558 A991 AD 20 D8		        LDA SPRITES_Y00
  7559 A994 18			        CLC
  7560 A995 79 75 3A		        ADC f3627,Y
  7561 A998 9D 21 D8		        STA SPRITES_Y01,X
  7562
  7563 A99B AD 00 D8		        LDA SPRITES_X_HI00
  7564 A99E 9D 01 D8		        STA SPRITES_X_HI01,X
  7565
  7566 A9A1 A9 01		        LDA #$01
  7567 A9A3 9D 81 D8		        STA SPRITES_TYPE01,X
  7568 A9A6 A9 90		        LDA #$90     ;Bullet frame
  7569 A9A8 9D 51 D8		        STA SPRITES_PTR01,X
  7570 A9AB A9 00		        LDA #$00
  7571 A9AD 9D 90 D8		        STA SPRITES_TMP_A01,X
  7572 A9B0 A9 01		        LDA #$01     ;white
  7573 A9B2 9D 41 D8		        STA SPRITES_COLOR01,X
  7574 A9B5 60			@	    RTS
  7575
  7576 A9B6 A9 FF		@	    LDA #$FF     ;#%11111111
  7577 A9B8 8D DF 04		        STA FIRE_COOLDOWN
  7578 A9BB 60			        RTS
  7579 						
  7580 				        ; Flags: bit0: bullet can kill it
  7581 				        ;        bit1: grenade can kill it
  7582 A9BC 00 00 00 00 00 03 + f2544   .BYTE $00,$00,$00,$00,$00,$03,$00,$02
  7583 A9C4 00 00 03 00 00 02 +         .BYTE $00,$00,$03,$00,$00,$02,$00,$00
  7584 A9CC 00 01 00 00 00 03 +         .BYTE $00,$01,$00,$00,$00,$03,$00,$03
  7585 A9D4 03 03 03 03 02 00 +         .BYTE $03,$03,$03,$03,$02,$00,$02,$00
  7586 A9DC 03 00 00 02 02 00 +         .BYTE $03,$00,$00,$02,$02,$00,$00,$02
  7587 A9E4 02			        .BYTE $02				
  7588
  7589 = A9E5			end_code1	equ *	
  7590
  7591 A9E5						org $b000
  7592 B000-B556> 52 4D 54 34 + 			ins 'music.rmt'
  7593 							
  7594 B557						icl 'rmtplayr.asm'  
Source: rmtplayr.asm
     1 				;*
     2 				;* Raster Music Tracker, RMT Atari routine version 1.20090108
     3 				;* (c) Radek Sterba, Raster/C.P.U., 2002 - 2009
     4 				;* http://raster.atari.org
     5 				;*
     6 				;* Warnings:
     7 				;*
     8 				;* 1. RMT player routine needs 19 itself reserved bytes in zero page (no accessed
     9 				;*    from any other routines) as well as cca 1KB of memory before the "PLAYER"
    10 				;*    address for frequency tables and functionary variables. It's:
    11 				;*	  a) from PLAYER-$03c0 to PLAYER for stereo RMTplayer
    12 				;*    b) from PLAYER-$0320 to PLAYER for mono RMTplayer
    13 				;*
    14 				;* 2. RMT player routine MUST (!!!) be compiled from the begin of the memory page.
    15 				;*    i.e. "PLAYER" address can be $..00 only!
    16 				;*
    17 				;* 3. Because of RMTplayer provides a lot of effects, it spent a lot of CPU time.
    18 				;*
    19 				;* STEREOMODE	equ 0..3			;0 => compile RMTplayer for 4 tracks mono
    20 				;*									;1 => compile RMTplayer for 8 tracks stereo
    21 				;*									;2 => compile RMTplayer for 4 tracks stereo L1 R2 R3 L4
    22 				;*									;3 => compile RMTplayer for 4 tracks stereo L1 L2 R3 R4
    23 				;*
    24 = 0000			STEREOMODE=0
    25 					IFT STEREOMODE==1
    26 				TRACKS		equ 8
    27 					ELS
    28 = 0004			TRACKS		equ 4
    29 					EIF
    30 				;*
    31 = BA00			PLAYER		equ $ba00
    32 				;*
    33 				;* RMT FEATures definitions file
    34 				;* For optimizations of RMT player routine to concrete RMT modul only!
    35 B557				icl "rmt_feat.asm"
Source: rmt_feat.asm
     1 				;* --------BEGIN--------
     2 				;* C:\b\commando\music.rmt
     3 = 0000			FEAT_SFX		equ 0
     4 = 0000			FEAT_GLOBALVOLUMEFADE	equ 0		;RMTGLOBALVOLUMEFADE variable
     5 = 0000			FEAT_NOSTARTINGSONGLINE	equ 0
     6 = 0001			FEAT_INSTRSPEED		equ 1
     7 = 0000			FEAT_CONSTANTSPEED		equ 0		;(6 times)
     8 = 0001			FEAT_COMMAND1		equ 1		;(16 times)
     9 = 0000			FEAT_COMMAND2		equ 0		;(0 times)
    10 = 0000			FEAT_COMMAND3		equ 0		;(0 times)
    11 = 0000			FEAT_COMMAND4		equ 0		;(0 times)
    12 = 0000			FEAT_COMMAND5		equ 0		;(0 times)
    13 = 0000			FEAT_COMMAND6		equ 0		;(0 times)
    14 = 0000			FEAT_COMMAND7SETNOTE		equ 0		;(0 times)
    15 = 0000			FEAT_COMMAND7VOLUMEONLY		equ 0		;(0 times)
    16 = 0000			FEAT_PORTAMENTO		equ 0		;(0 times)
    17 = 0000			FEAT_FILTER		equ 0		;(0 times)
    18 = 0000			FEAT_FILTERG0L		equ 0		;(0 times)
    19 = 0000			FEAT_FILTERG1L		equ 0		;(0 times)
    20 = 0000			FEAT_FILTERG0R		equ 0		;(0 times)
    21 = 0000			FEAT_FILTERG1R		equ 0		;(0 times)
    22 = 0001			FEAT_BASS16		equ 1		;(1 times)
    23 = 0001			FEAT_BASS16G1L		equ 1		;(1 times)
    24 = 0000			FEAT_BASS16G3L		equ 0		;(0 times)
    25 = 0000			FEAT_BASS16G1R		equ 0		;(0 times)
    26 = 0000			FEAT_BASS16G3R		equ 0		;(0 times)
    27 = 0000			FEAT_VOLUMEONLYG0L		equ 0		;(0 times)
    28 = 0000			FEAT_VOLUMEONLYG2L		equ 0		;(0 times)
    29 = 0000			FEAT_VOLUMEONLYG3L		equ 0		;(0 times)
    30 = 0000			FEAT_VOLUMEONLYG0R		equ 0		;(0 times)
    31 = 0000			FEAT_VOLUMEONLYG2R		equ 0		;(0 times)
    32 = 0000			FEAT_VOLUMEONLYG3R		equ 0		;(0 times)
    33 = 0000			FEAT_TABLETYPE		equ 0		;(0 times)
    34 = 0000			FEAT_TABLEMODE		equ 0		;(0 times)
    35 = 0000			FEAT_TABLEGO		equ 0		;(0 times)
    36 = 0000			FEAT_AUDCTLMANUALSET		equ 0		;(0 times)
    37 = 0001			FEAT_VOLUMEMIN		equ 1		;(3 times)
    38 = 0001			FEAT_EFFECTVIBRATO		equ 1		;(3 times)
    39 = 0000			FEAT_EFFECTFSHIFT		equ 0		;(0 times)
    40 				;* --------END--------
    36 				;*
    37 				;* RMT ZeroPage addresses
    38 B557				org $88
    39 0088			p_tis
    40 0088			p_instrstable	org *+2
    41 008A			p_trackslbstable	org *+2
    42 008C			p_trackshbstable	org *+2
    43 008E			p_song			org *+2
    44 0090			ns				org *+2
    45 0092			nr				org *+2
    46 0094			nt				org *+2
    47 0096			reg1			org *+1
    48 0097			reg2			org *+1
    49 0098			reg3			org *+1
    50 0099			tmp				org *+1
    51 					IFT FEAT_COMMAND2
    52 				frqaddcmd2		org *+1
    53 					EIF
    54 					IFT TRACKS>4
    55 					org PLAYER-$400+$40
    56 					ELS
    57 009A				org PLAYER-$400+$e0
    58 					EIF
    59 B6E0			track_variables
    60 B6E0			trackn_db	org *+TRACKS
    61 B6E4			trackn_hb	org *+TRACKS
    62 B6E8			trackn_idx	org *+TRACKS
    63 B6EC			trackn_pause	org *+TRACKS
    64 B6F0			trackn_note	org *+TRACKS
    65 B6F4			trackn_volume	org *+TRACKS
    66 B6F8			trackn_distor 	org *+TRACKS
    67 B6FC			trackn_shiftfrq	org *+TRACKS
    68 					IFT FEAT_PORTAMENTO
    69 				trackn_portafrqc org *+TRACKS
    70 				trackn_portafrqa org *+TRACKS
    71 				trackn_portaspeed org *+TRACKS
    72 				trackn_portaspeeda org *+TRACKS
    73 				trackn_portadepth org *+TRACKS
    74 					EIF
    75 B700			trackn_instrx2	org *+TRACKS
    76 B704			trackn_instrdb	org *+TRACKS
    77 B708			trackn_instrhb	org *+TRACKS
    78 B70C			trackn_instridx	org *+TRACKS
    79 B710			trackn_instrlen	org *+TRACKS
    80 B714			trackn_instrlop	org *+TRACKS
    81 B718			trackn_instrreachend	org *+TRACKS
    82 B71C			trackn_volumeslidedepth org *+TRACKS
    83 B720			trackn_volumeslidevalue org *+TRACKS
    84 					IFT FEAT_VOLUMEMIN
    85 B724			trackn_volumemin		org *+TRACKS
    86 					EIF
    87 = 0001			FEAT_EFFECTS equ FEAT_EFFECTVIBRATO||FEAT_EFFECTFSHIFT
    88 					IFT FEAT_EFFECTS
    89 B728			trackn_effdelay			org *+TRACKS
    90 					EIF
    91 					IFT FEAT_EFFECTVIBRATO
    92 B72C			trackn_effvibratoa		org *+TRACKS
    93 					EIF
    94 					IFT FEAT_EFFECTFSHIFT
    95 				trackn_effshift		org *+TRACKS
    96 					EIF
    97 B730			trackn_tabletypespeed org *+TRACKS
    98 					IFT FEAT_TABLEMODE
    99 				trackn_tablemode	org *+TRACKS
   100 					EIF
   101 B734			trackn_tablenote	org *+TRACKS
   102 B738			trackn_tablea		org *+TRACKS
   103 B73C			trackn_tableend		org *+TRACKS
   104 					IFT FEAT_TABLEGO
   105 				trackn_tablelop		org *+TRACKS
   106 					EIF
   107 B740			trackn_tablespeeda	org *+TRACKS
   108 					IFT FEAT_FILTER||FEAT_BASS16
   109 B744			trackn_command		org *+TRACKS
   110 					EIF
   111 					IFT FEAT_BASS16
   112 B748			trackn_outnote		org *+TRACKS
   113 					EIF
   114 					IFT FEAT_FILTER
   115 				trackn_filter		org *+TRACKS
   116 					EIF
   117 B74C			trackn_audf	org *+TRACKS
   118 B750			trackn_audc	org *+TRACKS
   119 					IFT FEAT_AUDCTLMANUALSET
   120 				trackn_audctl	org *+TRACKS
   121 					EIF
   122 B754			v_aspeed		org *+1
   123 B755			track_endvariables
   124 B755					org PLAYER-$100-$140-$40+2
   125 = 000C			INSTRPAR	equ 12
   126 B782			tabbeganddistor
   127 B782-BD54> 80 00		 dta frqtabpure-frqtab,$00
   128 B784 80 20		 dta frqtabpure-frqtab,$20
   129 B786 80 40		 dta frqtabpure-frqtab,$40
   130 B788 00 C0		 dta frqtabbass1-frqtab,$c0
   131 B78A 80 80		 dta frqtabpure-frqtab,$80
   132 B78C 80 A0		 dta frqtabpure-frqtab,$a0
   133 B78E 00 C0		 dta frqtabbass1-frqtab,$c0
   134 B790 40 C0		 dta frqtabbass2-frqtab,$c0
   135 						IFT FEAT_EFFECTVIBRATO
   136 B792 00 01 05 0B		vibtabbeg dta 0,vib1-vib0,vib2-vib0,vib3-vib0
   137 B796 00			vib0	dta 0
   138 B797 01 FF FF 01		vib1	dta 1,-1,-1,1
   139 B79B 01 00 FF FF 00 01	vib2	dta 1,0,-1,-1,0,1
   140 B7A1 01 01 00 FF FF FF + vib3	dta 1,1,0,-1,-1,-1,-1,0,1,1
   141 B7AB			vibtabnext
   142 B7AB 00					dta vib0-vib0+0
   143 B7AC 02 03 04 01				dta vib1-vib0+1,vib1-vib0+2,vib1-vib0+3,vib1-vib0+0
   144 B7B0 06 07 08 09 0A 05			dta vib2-vib0+1,vib2-vib0+2,vib2-vib0+3,vib2-vib0+4,vib2-vib0+5,vib2-vib0+0
   145 B7B6 0C 0D 0E 0F 10 11 + 		dta vib3-vib0+1,vib3-vib0+2,vib3-vib0+3,vib3-vib0+4,vib3-vib0+5,vib3-vib0+6,vib3-vib0+7,vib3-vib0+8,vib3-vib0+9,vib3-vib0+0
   146 						EIF
   147 B7C0					org PLAYER-$100-$140
   148 					IFT FEAT_BASS16
   149 B7C0			frqtabbasslo
   150 B7C0 F2 33 96 E2 38 8C + 	dta $F2,$33,$96,$E2,$38,$8C,$00,$6A,$E8,$6A,$EF,$80,$08,$AE,$46,$E6
   151 B7D0 95 41 F6 B0 6E 30 + 	dta $95,$41,$F6,$B0,$6E,$30,$F6,$BB,$84,$52,$22,$F4,$C8,$A0,$7A,$55
   152 B7E0 34 14 F5 D8 BD A4 + 	dta $34,$14,$F5,$D8,$BD,$A4,$8D,$77,$60,$4E,$38,$27,$15,$06,$F7,$E8
   153 B7F0 DB CF C3 B8 AC A2 + 	dta $DB,$CF,$C3,$B8,$AC,$A2,$9A,$90,$88,$7F,$78,$70,$6A,$64,$5E,$00
   154 					EIF
   155 B800					org PLAYER-$100-$100
   156 B800			frqtab
   157 					ERT [<frqtab]!=0	;* frqtab must begin at the memory page bound! (i.e. $..00 address)
   158 B800			frqtabbass1
   159 B800 BF B6 AA A1 98 8F + 	dta $BF,$B6,$AA,$A1,$98,$8F,$89,$80,$F2,$E6,$DA,$CE,$BF,$B6,$AA,$A1
   160 B810 98 8F 89 80 7A 71 + 	dta $98,$8F,$89,$80,$7A,$71,$6B,$65,$5F,$5C,$56,$50,$4D,$47,$44,$3E
   161 B820 3C 38 35 32 2F 2D + 	dta $3C,$38,$35,$32,$2F,$2D,$2A,$28,$25,$23,$21,$1F,$1D,$1C,$1A,$18
   162 B830 17 16 14 13 12 11 + 	dta $17,$16,$14,$13,$12,$11,$10,$0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07
   163 B840			frqtabbass2
   164 B840 FF F1 E4 D8 CA C0 + 	dta $FF,$F1,$E4,$D8,$CA,$C0,$B5,$AB,$A2,$99,$8E,$87,$7F,$79,$73,$70
   165 B850 66 61 5A 55 52 4B + 	dta $66,$61,$5A,$55,$52,$4B,$48,$43,$3F,$3C,$39,$37,$33,$30,$2D,$2A
   166 B860 28 25 24 21 1F 1E + 	dta $28,$25,$24,$21,$1F,$1E,$1C,$1B,$19,$17,$16,$15,$13,$12,$11,$10
   167 B870 0F 0E 0D 0C 0B 0A + 	dta $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00
   168 B880			frqtabpure
   169 B880 F3 E6 D9 CC C1 B5 + 	dta $F3,$E6,$D9,$CC,$C1,$B5,$AD,$A2,$99,$90,$88,$80,$79,$72,$6C,$66
   170 B890 60 5B 55 51 4C 48 + 	dta $60,$5B,$55,$51,$4C,$48,$44,$40,$3C,$39,$35,$32,$2F,$2D,$2A,$28
   171 B8A0 25 23 21 1F 1D 1C + 	dta $25,$23,$21,$1F,$1D,$1C,$1A,$18,$17,$16,$14,$13,$12,$11,$10,$0F
   172 B8B0 0E 0D 0C 0B 0A 09 + 	dta $0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00,$00
   173 					IFT FEAT_BASS16
   174 B8C0			frqtabbasshi
   175 B8C0 0D 0D 0C 0B 0B 0A + 	dta $0D,$0D,$0C,$0B,$0B,$0A,$0A,$09,$08,$08,$07,$07,$07,$06,$06,$05
   176 B8D0 05 05 04 04 04 04 + 	dta $05,$05,$04,$04,$04,$04,$03,$03,$03,$03,$03,$02,$02,$02,$02,$02
   177 B8E0 02 02 01 01 01 01 + 	dta $02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
   178 B8F0 00 00 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   179 					EIF
   180 B900					org PLAYER-$0100
   181 B900			volumetab
   182 B900 00 00 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   183 B910 00 00 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
   184 B920 00 00 00 00 01 01 + 	dta $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02
   185 B930 00 00 00 01 01 01 + 	dta $00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$03,$03,$03
   186 B940 00 00 01 01 01 01 + 	dta $00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04
   187 B950 00 00 01 01 01 02 + 	dta $00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
   188 B960 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$02,$03,$03,$04,$04,$04,$05,$05,$06,$06
   189 B970 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
   190 B980 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07,$08
   191 B990 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$04,$04,$05,$05,$06,$07,$07,$08,$08,$09
   192 B9A0 00 01 01 02 03 03 + 	dta $00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$07,$07,$08,$09,$09,$0A
   193 B9B0 00 01 01 02 03 04 + 	dta $00,$01,$01,$02,$03,$04,$04,$05,$06,$07,$07,$08,$09,$0A,$0A,$0B
   194 B9C0 00 01 02 02 03 04 + 	dta $00,$01,$02,$02,$03,$04,$05,$06,$06,$07,$08,$09,$0A,$0A,$0B,$0C
   195 B9D0 00 01 02 03 03 04 + 	dta $00,$01,$02,$03,$03,$04,$05,$06,$07,$08,$09,$0A,$0A,$0B,$0C,$0D
   196 B9E0 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0A,$0B,$0C,$0D,$0E
   197 B9F0 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
   198 BA00				org PLAYER
   199 				;*
   200 				;* Set of RMT main vectors:
   201 				;*
   202 BA00			RASTERMUSICTRACKER
   203 BA00 4C 0F BA			jmp rmt_init
   204 BA03 4C C9 BB			jmp rmt_play
   205 BA06 4C E3 BB			jmp rmt_p3
   206 BA09 4C 4F BA			jmp rmt_silence
   207 BA0C 4C 1F BD			jmp SetPokey
   208 					IFT FEAT_SFX
   209 					jmp rmt_sfx			;* A=note(0,..,60),X=channel(0,..,3 or 0,..,7),Y=instrument*2(0,2,4,..,126)
   210 					EIF
   211 BA0F			rmt_init
   212 BA0F 86 90			stx ns
   213 BA11 84 91			sty ns+1
   214 					IFT FEAT_NOSTARTINGSONGLINE==0
   215 BA13 48				pha
   216 					EIF
   217 					IFT track_endvariables-track_variables>255
   218 					ldy #0
   219 					tya
   220 				ri0	sta track_variables,y
   221 					sta track_endvariables-$100,y
   222 					iny
   223 					bne ri0
   224 					ELS
   225 BA14 A0 75			ldy #track_endvariables-track_variables
   226 BA16 A9 00			lda #0
   227 BA18 99 DF B6		ri0	sta track_variables-1,y
   228 BA1B 88				dey
   229 BA1C D0 FA			bne ri0
   230 					EIF
   231 BA1E A0 04			ldy #4
   232 BA20 B1 90			lda (ns),y
   233 BA22 8D D7 BB			sta v_maxtracklen
   234 BA25 C8				iny
   235 					IFT FEAT_CONSTANTSPEED==0
   236 BA26 B1 90			lda (ns),y
   237 BA28 8D B5 BA			sta v_speed
   238 					EIF
   239 					IFT FEAT_INSTRSPEED==0
   240 					iny
   241 					lda (ns),y
   242 					sta v_instrspeed
   243 					sta v_ainstrspeed
   244 					ELI FEAT_INSTRSPEED>1
   245 					lda #FEAT_INSTRSPEED
   246 					sta v_ainstrspeed
   247 					EIF
   248 BA2B A0 08			ldy #8
   249 BA2D B1 90		ri1	lda (ns),y
   250 BA2F 99 80 00			sta p_tis-8,y
   251 BA32 C8				iny
   252 BA33 C0 10			cpy #8+8
   253 BA35 D0 F6			bne ri1
   254 					IFT FEAT_NOSTARTINGSONGLINE==0
   255 BA37 68				pla
   256 BA38 48				pha
   257 					IFT TRACKS>4
   258 					asl @
   259 					asl @
   260 					asl @
   261 					clc
   262 					adc p_song
   263 					sta p_song
   264 					pla
   265 					php
   266 					and #$e0
   267 					asl @
   268 					rol @
   269 					rol @
   270 					rol @
   271 					ELS
   272 BA39 0A				asl @
   273 BA3A 0A				asl @
   274 BA3B 18				clc
   275 BA3C 65 8E			adc p_song
   276 BA3E 85 8E			sta p_song
   277 BA40 68				pla
   278 BA41 08				php
   279 BA42 29 C0			and #$c0
   280 BA44 0A				asl @
   281 BA45 2A				rol @
   282 BA46 2A				rol @
   283 					EIF
   284 BA47 28				plp
   285 BA48 65 8F			adc p_song+1
   286 BA4A 85 8F			sta p_song+1
   287 					EIF
   288 BA4C 20 64 BA			jsr GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   289 BA4F			rmt_silence
   290 					IFT STEREOMODE>0
   291 					lda #0
   292 					sta $d208
   293 					sta $d218
   294 					ldy #3
   295 					sty $d20f
   296 					sty $d21f
   297 					ldy #8
   298 				si1	sta $d200,y
   299 					sta $d210,y
   300 					dey
   301 					bpl si1
   302 					ELS
   303 BA4F A9 00			lda #0
   304 BA51 8D 08 D2			sta $d208
   305 BA54 A0 03			ldy #3
   306 BA56 8C 0F D2			sty $d20f
   307 BA59 A0 08			ldy #8
   308 BA5B 99 00 D2		si1	sta $d200,y
   309 BA5E 88				dey
   310 BA5F 10 FA			bpl si1
   311 					EIF
   312 					IFT FEAT_INSTRSPEED==0
   313 					lda v_instrspeed
   314 					ELS
   315 BA61 A9 01			lda #FEAT_INSTRSPEED
   316 					EIF
   317 BA63 60				rts
   318 BA64			GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   319 BA64			GetSongLine
   320 BA64 A2 00			ldx #0
   321 BA66 8E D5 BB			stx v_abeat
   322 BA69			nn0
   323 BA69 8A			nn1	txa
   324 BA6A A8				tay
   325 BA6B B1 8E			lda (p_song),y
   326 BA6D C9 FE			cmp #$fe
   327 BA6F B0 2D			bcs nn2
   328 BA71 A8				tay
   329 BA72 B1 8A			lda (p_trackslbstable),y
   330 BA74 9D E0 B6			sta trackn_db,x
   331 BA77 B1 8C			lda (p_trackshbstable),y
   332 BA79 9D E4 B6		nn1a sta trackn_hb,x
   333 BA7C A9 00			lda #0
   334 BA7E 9D E8 B6			sta trackn_idx,x
   335 BA81 A9 01			lda #1
   336 BA83 9D EC B6		nn1a2 sta trackn_pause,x
   337 BA86 A9 80			lda #$80
   338 BA88 9D 00 B7			sta trackn_instrx2,x
   339 BA8B E8				inx
   340 BA8C E0 04		xtracks01	cpx #TRACKS
   341 BA8E D0 D9			bne nn1
   342 BA90 A5 8E			lda p_song
   343 BA92 18				clc
   344 BA93 69 04		xtracks02	adc #TRACKS
   345 BA95 85 8E			sta p_song
   346 BA97 90 1B			bcc GetTrackLine
   347 BA99 E6 8F			inc p_song+1
   348 BA9B			nn1b
   349 BA9B 4C B4 BA			jmp GetTrackLine
   350 BA9E			nn2
   351 BA9E F0 04			beq nn3
   352 BAA0			nn2a
   353 BAA0 A9 00			lda #0
   354 BAA2 F0 DF			beq nn1a2
   355 BAA4			nn3
   356 BAA4 A0 02			ldy #2
   357 BAA6 B1 8E			lda (p_song),y
   358 BAA8 AA				tax
   359 BAA9 C8				iny
   360 BAAA B1 8E			lda (p_song),y
   361 BAAC 85 8F			sta p_song+1
   362 BAAE 86 8E			stx p_song
   363 BAB0 A2 00			ldx #0
   364 BAB2 F0 B5			beq nn0
   365 BAB4			GetTrackLine
   366 BAB4			oo0
   367 BAB4			oo0a
   368 					IFT FEAT_CONSTANTSPEED==0
   369 BAB4 A9 FF			lda #$ff
   370 = BAB5			v_speed equ *-1
   371 BAB6 8D 0B BB			sta v_bspeed
   372 					EIF
   373 BAB9 A2 FF			ldx #-1
   374 BABB			oo1
   375 BABB E8				inx
   376 BABC DE EC B6			dec trackn_pause,x
   377 BABF D0 45			bne oo1x
   378 BAC1			oo1b
   379 BAC1 BD E0 B6			lda trackn_db,x
   380 BAC4 85 90			sta ns
   381 BAC6 BD E4 B6			lda trackn_hb,x
   382 BAC9 85 91			sta ns+1
   383 BACB			oo1i
   384 BACB BC E8 B6			ldy trackn_idx,x
   385 BACE FE E8 B6			inc trackn_idx,x
   386 BAD1 B1 90			lda (ns),y
   387 BAD3 85 96			sta reg1
   388 BAD5 29 3F			and #$3f
   389 BAD7 C9 3D			cmp #61
   390 BAD9 F0 11			beq oo1a
   391 BADB B0 38			bcs oo2
   392 BADD 9D F0 B6			sta trackn_note,x
   393 					IFT FEAT_BASS16
   394 BAE0 9D 48 B7			sta trackn_outnote,x
   395 					EIF
   396 BAE3 C8				iny
   397 BAE4 B1 90			lda (ns),y
   398 BAE6 4A				lsr @
   399 BAE7 29 7E			and #$3f*2
   400 BAE9 9D 00 B7			sta trackn_instrx2,x
   401 BAEC			oo1a
   402 BAEC A9 01			lda #1
   403 BAEE 9D EC B6			sta trackn_pause,x
   404 BAF1 BC E8 B6			ldy trackn_idx,x
   405 BAF4 FE E8 B6			inc trackn_idx,x
   406 BAF7 B1 90			lda (ns),y
   407 BAF9 4A				lsr @
   408 BAFA 66 96			ror reg1
   409 BAFC 4A				lsr @
   410 BAFD 66 96			ror reg1
   411 BAFF A5 96			lda reg1
   412 					IFT FEAT_GLOBALVOLUMEFADE
   413 					sec
   414 					sbc #$00
   415 				RMTGLOBALVOLUMEFADE equ *-1
   416 					bcs voig
   417 					lda #0
   418 				voig
   419 					EIF
   420 BB01 29 F0			and #$f0
   421 BB03 9D F4 B6			sta trackn_volume,x
   422 BB06			oo1x
   423 BB06 E0 03		xtracks03sub1	cpx #TRACKS-1
   424 BB08 D0 B1			bne oo1
   425 					IFT FEAT_CONSTANTSPEED==0
   426 BB0A A9 FF			lda #$ff
   427 = BB0B			v_bspeed equ *-1
   428 BB0C 8D B5 BA			sta v_speed
   429 					ELS
   430 					lda #FEAT_CONSTANTSPEED
   431 					EIF
   432 BB0F 8D 54 B7			sta v_aspeed
   433 BB12 4C 5A BB			jmp InitOfNewSetInstrumentsOnly
   434 BB15			oo2
   435 BB15 C9 3F			cmp #63
   436 BB17 F0 1B			beq oo63
   437 BB19 A5 96			lda reg1
   438 BB1B 29 C0			and #$c0
   439 BB1D F0 09			beq oo62_b
   440 BB1F 0A				asl @
   441 BB20 2A				rol @
   442 BB21 2A				rol @
   443 BB22 9D EC B6			sta trackn_pause,x
   444 BB25 4C 06 BB			jmp oo1x
   445 BB28			oo62_b
   446 BB28 C8				iny
   447 BB29 B1 90			lda (ns),y
   448 BB2B 9D EC B6			sta trackn_pause,x
   449 BB2E FE E8 B6			inc trackn_idx,x
   450 BB31 4C 06 BB			jmp oo1x
   451 BB34			oo63
   452 BB34 A5 96			lda reg1
   453 					IFT FEAT_CONSTANTSPEED==0
   454 BB36 30 0C			bmi oo63_1X
   455 BB38 C8				iny
   456 BB39 B1 90			lda (ns),y
   457 BB3B 8D 0B BB			sta v_bspeed
   458 BB3E FE E8 B6			inc trackn_idx,x
   459 BB41 4C CB BA			jmp oo1i
   460 BB44			oo63_1X
   461 					EIF
   462 BB44 C9 FF			cmp #255
   463 BB46 F0 09			beq oo63_11
   464 BB48 C8				iny
   465 BB49 B1 90			lda (ns),y
   466 BB4B 9D E8 B6			sta trackn_idx,x
   467 BB4E 4C CB BA			jmp oo1i
   468 BB51			oo63_11
   469 BB51 4C 64 BA			jmp GetSongLine
   470 BB54 4C E3 BB		p2xrmtp3	jmp rmt_p3
   471 BB57 CA			p2x0 dex
   472 BB58 30 FA			 bmi p2xrmtp3
   473 BB5A			InitOfNewSetInstrumentsOnly
   474 BB5A BC 00 B7		p2x1 ldy trackn_instrx2,x
   475 BB5D 30 F8			bmi p2x0
   476 					IFT FEAT_SFX
   477 					jsr SetUpInstrumentY2
   478 					jmp p2x0
   479 				rmt_sfx
   480 					sta trackn_note,x
   481 					IFT FEAT_BASS16
   482 					sta trackn_outnote,x
   483 					EIF
   484 					lda #$f0				;* sfx note volume*16
   485 				RMTSFXVOLUME equ *-1		;* label for sfx note volume parameter overwriting
   486 					sta trackn_volume,x
   487 					EIF
   488 BB5F			SetUpInstrumentY2
   489 BB5F B1 88			lda (p_instrstable),y
   490 BB61 9D 04 B7			sta trackn_instrdb,x
   491 BB64 85 94			sta nt
   492 BB66 C8				iny
   493 BB67 B1 88			lda (p_instrstable),y
   494 BB69 9D 08 B7			sta trackn_instrhb,x
   495 BB6C 85 95			sta nt+1
   496 					IFT FEAT_FILTER
   497 					lda #1
   498 					sta trackn_filter,x
   499 					EIF
   500 					IFT FEAT_TABLEGO
   501 					IFT FEAT_FILTER
   502 					tay
   503 					ELS
   504 					ldy #1
   505 					EIF
   506 					lda (nt),y
   507 					sta trackn_tablelop,x
   508 					iny
   509 					ELS
   510 BB6E A0 02			ldy #2
   511 					EIF
   512 BB70 B1 94			lda (nt),y
   513 BB72 9D 10 B7			sta trackn_instrlen,x
   514 BB75 C8				iny
   515 BB76 B1 94			lda (nt),y
   516 BB78 9D 14 B7			sta trackn_instrlop,x
   517 BB7B C8				iny
   518 BB7C B1 94			lda (nt),y
   519 BB7E 9D 30 B7			sta trackn_tabletypespeed,x
   520 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   521 					and #$3f
   522 					EIF
   523 BB81 9D 40 B7			sta trackn_tablespeeda,x
   524 					IFT FEAT_TABLEMODE
   525 					lda (nt),y
   526 					and #$40
   527 					sta trackn_tablemode,x
   528 					EIF
   529 					IFT FEAT_AUDCTLMANUALSET
   530 					iny
   531 					lda (nt),y
   532 					sta trackn_audctl,x
   533 					iny
   534 					ELS
   535 BB84 A0 06			ldy #6
   536 					EIF
   537 BB86 B1 94			lda (nt),y
   538 BB88 9D 1C B7			sta trackn_volumeslidedepth,x
   539 					IFT FEAT_VOLUMEMIN
   540 BB8B C8				iny
   541 BB8C B1 94			lda (nt),y
   542 BB8E 9D 24 B7			sta trackn_volumemin,x
   543 					IFT FEAT_EFFECTS
   544 BB91 C8				iny
   545 					EIF
   546 					ELS
   547 					IFT FEAT_EFFECTS
   548 					ldy #8
   549 					EIF
   550 					EIF
   551 					IFT FEAT_EFFECTS
   552 BB92 B1 94			lda (nt),y
   553 BB94 9D 28 B7			sta trackn_effdelay,x
   554 					IFT FEAT_EFFECTVIBRATO
   555 BB97 C8				iny
   556 BB98 B1 94			lda (nt),y
   557 BB9A A8				tay
   558 BB9B B9 92 B7			lda vibtabbeg,y
   559 BB9E 9D 2C B7			sta trackn_effvibratoa,x
   560 					EIF
   561 					IFT FEAT_EFFECTFSHIFT
   562 					ldy #10
   563 					lda (nt),y
   564 					sta trackn_effshift,x
   565 					EIF
   566 					EIF
   567 BBA1 A9 80			lda #128
   568 BBA3 9D 20 B7			sta trackn_volumeslidevalue,x
   569 BBA6 9D 00 B7			sta trackn_instrx2,x
   570 BBA9 0A				asl @
   571 BBAA 9D 18 B7			sta trackn_instrreachend,x
   572 BBAD 9D FC B6			sta trackn_shiftfrq,x
   573 BBB0 A8				tay
   574 BBB1 B1 94			lda (nt),y
   575 BBB3 9D 3C B7			sta trackn_tableend,x
   576 BBB6 69 00			adc #0
   577 BBB8 9D 0C B7			sta trackn_instridx,x
   578 BBBB A9 0C			lda #INSTRPAR
   579 BBBD 9D 38 B7			sta trackn_tablea,x
   580 BBC0 A8				tay
   581 BBC1 B1 94			lda (nt),y
   582 BBC3 9D 34 B7			sta trackn_tablenote,x
   583 BBC6			xata_rtshere
   584 					IFT FEAT_SFX
   585 					rts
   586 					ELS
   587 BBC6 4C 57 BB			jmp p2x0
   588 					EIF
   589 BBC9			rmt_play
   590 BBC9			rmt_p0
   591 BBC9 20 1F BD			jsr SetPokey
   592 BBCC			rmt_p1
   593 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
   594 					dec v_ainstrspeed
   595 					bne rmt_p3
   596 					EIF
   597 					IFT FEAT_INSTRSPEED==0
   598 					lda #$ff
   599 				v_instrspeed	equ *-1
   600 					sta v_ainstrspeed
   601 					ELI FEAT_INSTRSPEED>1
   602 					lda #FEAT_INSTRSPEED
   603 					sta v_ainstrspeed
   604 					EIF
   605 BBCC			rmt_p2
   606 BBCC CE 54 B7			dec v_aspeed
   607 BBCF D0 12			bne rmt_p3
   608 BBD1 EE D5 BB			inc v_abeat
   609 BBD4 A9 FF			lda #$ff
   610 = BBD5			v_abeat equ *-1
   611 BBD6 C9 FF			cmp #$ff
   612 = BBD7			v_maxtracklen equ *-1
   613 BBD8 F0 03			beq p2o3
   614 BBDA 4C B4 BA			jmp GetTrackLine
   615 BBDD			p2o3
   616 BBDD 4C 64 BA			jmp GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   617 BBE0 4C E6 BC		go_ppnext	jmp ppnext
   618 BBE3			rmt_p3
   619 BBE3 A9 B8			lda #>frqtab
   620 BBE5 85 93			sta nr+1
   621 BBE7 A2 03		xtracks05sub1	ldx #TRACKS-1
   622 BBE9			pp1
   623 BBE9 BD 08 B7			lda trackn_instrhb,x
   624 BBEC F0 F2			beq go_ppnext
   625 BBEE 85 91			sta ns+1
   626 BBF0 BD 04 B7			lda trackn_instrdb,x
   627 BBF3 85 90			sta ns
   628 BBF5 BC 0C B7			ldy trackn_instridx,x
   629 BBF8 B1 90			lda (ns),y
   630 BBFA 85 96			sta reg1
   631 BBFC C8				iny
   632 BBFD B1 90			lda (ns),y
   633 BBFF 85 97			sta reg2
   634 BC01 C8				iny
   635 BC02 B1 90			lda (ns),y
   636 BC04 85 98			sta reg3
   637 BC06 C8				iny
   638 BC07 98				tya
   639 BC08 DD 10 B7			cmp trackn_instrlen,x
   640 BC0B 90 0A			bcc pp2
   641 BC0D F0 08			beq pp2
   642 BC0F A9 80			lda #$80
   643 BC11 9D 18 B7			sta trackn_instrreachend,x
   644 BC14			pp1b
   645 BC14 BD 14 B7			lda trackn_instrlop,x
   646 BC17 9D 0C B7		pp2	sta trackn_instridx,x
   647 BC1A A5 96			lda reg1
   648 					IFT TRACKS>4
   649 					cpx #4
   650 					bcc pp2s
   651 					lsr @
   652 					lsr @
   653 					lsr @
   654 					lsr @
   655 				pp2s
   656 					EIF
   657 BC1C 29 0F			and #$0f
   658 BC1E 1D F4 B6			ora trackn_volume,x
   659 BC21 A8				tay
   660 BC22 B9 00 B9			lda volumetab,y
   661 BC25 85 99			sta tmp
   662 BC27 A5 97			lda reg2
   663 BC29 29 0E			and #$0e
   664 BC2B A8				tay
   665 BC2C B9 82 B7			lda tabbeganddistor,y
   666 BC2F 85 92			sta nr
   667 BC31 A5 99			lda tmp
   668 BC33 19 83 B7			ora tabbeganddistor+1,y
   669 BC36 9D 50 B7			sta trackn_audc,x
   670 BC39			InstrumentsEffects
   671 					IFT FEAT_EFFECTS
   672 BC39 BD 28 B7			lda trackn_effdelay,x
   673 BC3C F0 1D			beq ei2
   674 BC3E C9 01			cmp #1
   675 BC40 D0 16			bne ei1
   676 BC42 BD FC B6			lda trackn_shiftfrq,x
   677 					IFT FEAT_EFFECTFSHIFT
   678 					clc
   679 					adc trackn_effshift,x
   680 					EIF
   681 					IFT FEAT_EFFECTVIBRATO
   682 BC45 18				clc
   683 BC46 BC 2C B7			ldy trackn_effvibratoa,x
   684 BC49 79 96 B7			adc vib0,y
   685 					EIF
   686 BC4C 9D FC B6			sta trackn_shiftfrq,x
   687 					IFT FEAT_EFFECTVIBRATO
   688 BC4F B9 AB B7			lda vibtabnext,y
   689 BC52 9D 2C B7			sta trackn_effvibratoa,x
   690 					EIF
   691 BC55 4C 5B BC			jmp ei2
   692 BC58			ei1
   693 BC58 DE 28 B7			dec trackn_effdelay,x
   694 BC5B			ei2
   695 					EIF
   696 BC5B BC 3C B7			ldy trackn_tableend,x
   697 BC5E C0 0D			cpy #INSTRPAR+1
   698 BC60 90 30			bcc ei3
   699 BC62 BD 40 B7			lda trackn_tablespeeda,x
   700 BC65 10 25			bpl ei2f
   701 BC67			ei2c
   702 BC67 98				tya
   703 BC68 DD 38 B7			cmp trackn_tablea,x
   704 BC6B D0 07			bne ei2c2
   705 					IFT FEAT_TABLEGO
   706 					lda trackn_tablelop,x
   707 					ELS
   708 BC6D A9 0C			lda #INSTRPAR
   709 					EIF
   710 BC6F 9D 38 B7			sta trackn_tablea,x
   711 BC72 D0 03			bne ei2a
   712 BC74			ei2c2
   713 BC74 FE 38 B7			inc trackn_tablea,x
   714 BC77			ei2a
   715 BC77 BD 04 B7			lda trackn_instrdb,x
   716 BC7A 85 94			sta nt
   717 BC7C BD 08 B7			lda trackn_instrhb,x
   718 BC7F 85 95			sta nt+1
   719 BC81 BC 38 B7			ldy trackn_tablea,x
   720 BC84 B1 94			lda (nt),y
   721 					IFT FEAT_TABLEMODE
   722 					ldy trackn_tablemode,x
   723 					beq ei2e
   724 					clc
   725 					adc trackn_tablenote,x
   726 				ei2e
   727 					EIF
   728 BC86 9D 34 B7			sta trackn_tablenote,x
   729 BC89 BD 30 B7			lda trackn_tabletypespeed,x
   730 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   731 					and #$3f
   732 					EIF
   733 BC8C			ei2f
   734 BC8C 38				sec
   735 BC8D E9 01			sbc #1
   736 BC8F 9D 40 B7			sta trackn_tablespeeda,x
   737 BC92			ei3
   738 BC92 BD 18 B7			lda trackn_instrreachend,x
   739 BC95 10 1F			bpl ei4
   740 BC97 BD F4 B6			lda trackn_volume,x
   741 BC9A F0 1A			beq ei4
   742 					IFT FEAT_VOLUMEMIN
   743 BC9C DD 24 B7			cmp trackn_volumemin,x
   744 BC9F F0 15			beq ei4
   745 BCA1 90 13			bcc ei4
   746 					EIF
   747 BCA3 A8				tay
   748 BCA4 BD 20 B7			lda trackn_volumeslidevalue,x
   749 BCA7 18				clc
   750 BCA8 7D 1C B7			adc trackn_volumeslidedepth,x
   751 BCAB 9D 20 B7			sta trackn_volumeslidevalue,x
   752 BCAE 90 06			bcc ei4
   753 BCB0 98				tya
   754 BCB1 E9 10			sbc #16
   755 BCB3 9D F4 B6			sta trackn_volume,x
   756 BCB6			ei4
   757 					IFT FEAT_COMMAND2
   758 					lda #0
   759 					sta frqaddcmd2
   760 					EIF
   761 					IFT FEAT_COMMAND1||FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   762 BCB6 A5 97			lda reg2
   763 					IFT FEAT_FILTER||FEAT_BASS16
   764 BCB8 9D 44 B7			sta trackn_command,x
   765 					EIF
   766 BCBB 29 70			and #$70
   767 					IFT 1==[FEAT_COMMAND1+FEAT_COMMAND2+FEAT_COMMAND3+FEAT_COMMAND4+FEAT_COMMAND5+FEAT_COMMAND6+[FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY]]
   768 BCBD F0 05			beq cmd0
   769 					ELS
   770 					lsr @
   771 					lsr @
   772 					sta jmx+1
   773 				jmx	bcc *
   774 					jmp cmd0
   775 					nop
   776 					jmp cmd1
   777 					IFT FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   778 					nop
   779 					jmp cmd2
   780 					EIF
   781 					IFT FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   782 					nop
   783 					jmp cmd3
   784 					EIF
   785 					IFT FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   786 					nop
   787 					jmp cmd4
   788 					EIF
   789 					IFT FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   790 					nop
   791 					jmp cmd5
   792 					EIF
   793 					IFT FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   794 					nop
   795 					jmp cmd6
   796 					EIF
   797 					IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   798 					nop
   799 					jmp cmd7
   800 					EIF
   801 					EIF
   802 					ELS
   803 					IFT FEAT_FILTER||FEAT_BASS16
   804 					lda reg2
   805 					sta trackn_command,x
   806 					EIF
   807 					EIF
   808 BCBF			cmd1
   809 					IFT FEAT_COMMAND1
   810 BCBF A5 98			lda reg3
   811 BCC1 4C E3 BC			jmp cmd0c
   812 					EIF
   813 BCC4			cmd2
   814 					IFT FEAT_COMMAND2
   815 					lda reg3
   816 					sta frqaddcmd2
   817 					lda trackn_note,x
   818 					jmp cmd0a
   819 					EIF
   820 BCC4			cmd3
   821 					IFT FEAT_COMMAND3
   822 					lda trackn_note,x
   823 					clc
   824 					adc reg3
   825 					sta trackn_note,x
   826 					jmp cmd0a
   827 					EIF
   828 BCC4			cmd4
   829 					IFT FEAT_COMMAND4
   830 					lda trackn_shiftfrq,x
   831 					clc
   832 					adc reg3
   833 					sta trackn_shiftfrq,x
   834 					lda trackn_note,x
   835 					jmp cmd0a
   836 					EIF
   837 BCC4			cmd5
   838 					IFT FEAT_COMMAND5&&FEAT_PORTAMENTO
   839 					IFT FEAT_TABLETYPE
   840 					lda trackn_tabletypespeed,x
   841 					bpl cmd5a1
   842 					ldy trackn_note,x
   843 					lda (nr),y
   844 					clc
   845 					adc trackn_tablenote,x
   846 					jmp cmd5ax
   847 					EIF
   848 				cmd5a1
   849 					lda trackn_note,x
   850 					clc
   851 					adc trackn_tablenote,x
   852 					cmp #61
   853 					bcc cmd5a2
   854 					lda #63
   855 				cmd5a2
   856 					tay
   857 					lda (nr),y
   858 				cmd5ax
   859 					sta trackn_portafrqc,x
   860 					ldy reg3
   861 					bne cmd5a
   862 					sta trackn_portafrqa,x
   863 				cmd5a
   864 					tya
   865 					lsr @
   866 					lsr @
   867 					lsr @
   868 					lsr @
   869 					sta trackn_portaspeed,x
   870 					sta trackn_portaspeeda,x
   871 					lda reg3
   872 					and #$0f
   873 					sta trackn_portadepth,x
   874 					lda trackn_note,x
   875 					jmp cmd0a
   876 					ELI FEAT_COMMAND5
   877 					lda trackn_note,x
   878 					jmp cmd0a
   879 					EIF
   880 BCC4			cmd6
   881 					IFT FEAT_COMMAND6&&FEAT_FILTER
   882 					lda reg3
   883 					clc
   884 					adc trackn_filter,x
   885 					sta trackn_filter,x
   886 					lda trackn_note,x
   887 					jmp cmd0a
   888 					ELI FEAT_COMMAND6
   889 					lda trackn_note,x
   890 					jmp cmd0a
   891 					EIF
   892 BCC4			cmd7
   893 					IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   894 					IFT FEAT_COMMAND7SETNOTE
   895 					lda reg3
   896 					IFT FEAT_COMMAND7VOLUMEONLY
   897 					cmp #$80
   898 					beq cmd7a
   899 					EIF
   900 					sta trackn_note,x
   901 					jmp cmd0a
   902 					EIF
   903 					IFT FEAT_COMMAND7VOLUMEONLY
   904 				cmd7a
   905 					lda trackn_audc,x
   906 					ora #$f0
   907 					sta trackn_audc,x
   908 					lda trackn_note,x
   909 					jmp cmd0a
   910 					EIF
   911 					EIF
   912 BCC4			cmd0
   913 BCC4 BD F0 B6			lda trackn_note,x
   914 BCC7 18				clc
   915 BCC8 65 98			adc reg3
   916 BCCA			cmd0a
   917 					IFT FEAT_TABLETYPE
   918 					ldy trackn_tabletypespeed,x
   919 					bmi cmd0b
   920 					EIF
   921 BCCA 18				clc
   922 BCCB 7D 34 B7			adc trackn_tablenote,x
   923 BCCE C9 3D			cmp #61
   924 BCD0 90 07			bcc cmd0a1
   925 BCD2 A9 00			lda #0
   926 BCD4 9D 50 B7			sta trackn_audc,x
   927 BCD7 A9 3F			lda #63
   928 BCD9			cmd0a1
   929 					IFT FEAT_BASS16
   930 BCD9 9D 48 B7			sta trackn_outnote,x
   931 					EIF
   932 BCDC A8				tay
   933 BCDD B1 92			lda (nr),y
   934 BCDF 18				clc
   935 BCE0 7D FC B6			adc trackn_shiftfrq,x
   936 					IFT FEAT_COMMAND2
   937 					clc
   938 					adc frqaddcmd2
   939 					EIF
   940 					IFT FEAT_TABLETYPE
   941 					jmp cmd0c
   942 				cmd0b
   943 					cmp #61
   944 					bcc cmd0b1
   945 					lda #0
   946 					sta trackn_audc,x
   947 					lda #63
   948 				cmd0b1
   949 					tay
   950 					lda trackn_shiftfrq,x
   951 					clc
   952 					adc trackn_tablenote,x
   953 					clc
   954 					adc (nr),y
   955 					IFT FEAT_COMMAND2
   956 					clc
   957 					adc frqaddcmd2
   958 					EIF
   959 					EIF
   960 BCE3			cmd0c
   961 BCE3 9D 4C B7			sta trackn_audf,x
   962 BCE6			pp9
   963 					IFT FEAT_PORTAMENTO
   964 					lda trackn_portaspeeda,x
   965 					beq pp10
   966 					dec trackn_portaspeeda,x
   967 					bne pp10
   968 					lda trackn_portaspeed,x
   969 					sta trackn_portaspeeda,x
   970 					lda trackn_portafrqa,x
   971 					cmp trackn_portafrqc,x
   972 					beq pp10
   973 					bcs pps1
   974 					adc trackn_portadepth,x
   975 					bcs pps8
   976 					cmp trackn_portafrqc,x
   977 					bcs pps8
   978 					jmp pps9
   979 				pps1
   980 					sbc trackn_portadepth,x
   981 					bcc pps8
   982 					cmp trackn_portafrqc,x
   983 					bcs pps9
   984 				pps8
   985 					lda trackn_portafrqc,x
   986 				pps9
   987 					sta trackn_portafrqa,x
   988 				pp10
   989 					lda reg2
   990 					and #$01
   991 					beq pp11
   992 					lda trackn_portafrqa,x
   993 					clc
   994 					adc trackn_shiftfrq,x
   995 					sta trackn_audf,x
   996 				pp11
   997 					EIF
   998 BCE6			ppnext
   999 BCE6 CA				dex
  1000 BCE7 30 03			bmi rmt_p4
  1001 BCE9 4C E9 BB			jmp pp1
  1002 BCEC			rmt_p4
  1003 					IFT FEAT_AUDCTLMANUALSET
  1004 					lda trackn_audctl+0
  1005 					ora trackn_audctl+1
  1006 					ora trackn_audctl+2
  1007 					ora trackn_audctl+3
  1008 					tax
  1009 					ELS
  1010 BCEC A2 00			ldx #0
  1011 					EIF
  1012 BCEE			qq1
  1013 BCEE 8E 20 BD			stx v_audctl
  1014 					IFT FEAT_FILTER
  1015 					IFT FEAT_FILTERG0L
  1016 					lda trackn_command+0
  1017 					bpl qq2
  1018 					lda trackn_audc+0
  1019 					and #$0f
  1020 					beq qq2
  1021 					lda trackn_audf+0
  1022 					clc
  1023 					adc trackn_filter+0
  1024 					sta trackn_audf+2
  1025 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
  1026 					lda trackn_audc+2
  1027 					and #$10
  1028 					bne qq1a
  1029 					EIF
  1030 					lda #0
  1031 					sta trackn_audc+2
  1032 				qq1a
  1033 					txa
  1034 					ora #4
  1035 					tax
  1036 					EIF
  1037 				qq2
  1038 					IFT FEAT_FILTERG1L
  1039 					lda trackn_command+1
  1040 					bpl qq3
  1041 					lda trackn_audc+1
  1042 					and #$0f
  1043 					beq qq3
  1044 					lda trackn_audf+1
  1045 					clc
  1046 					adc trackn_filter+1
  1047 					sta trackn_audf+3
  1048 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3L
  1049 					lda trackn_audc+3
  1050 					and #$10
  1051 					bne qq2a
  1052 					EIF
  1053 					lda #0
  1054 					sta trackn_audc+3
  1055 				qq2a
  1056 					txa
  1057 					ora #2
  1058 					tax
  1059 					EIF
  1060 				qq3
  1061 					IFT FEAT_FILTERG0L||FEAT_FILTERG1L
  1062 					cpx v_audctl
  1063 					bne qq5
  1064 					EIF
  1065 					EIF
  1066 					IFT FEAT_BASS16
  1067 					IFT FEAT_BASS16G1L
  1068 BCF1 AD 45 B7			lda trackn_command+1
  1069 BCF4 29 0E			and #$0e
  1070 BCF6 C9 06			cmp #6
  1071 BCF8 D0 1F			bne qq4
  1072 BCFA AD 51 B7			lda trackn_audc+1
  1073 BCFD 29 0F			and #$0f
  1074 BCFF F0 18			beq qq4
  1075 BD01 AC 49 B7			ldy trackn_outnote+1
  1076 BD04 B9 C0 B7			lda frqtabbasslo,y
  1077 BD07 8D 4C B7			sta trackn_audf+0
  1078 BD0A B9 C0 B8			lda frqtabbasshi,y
  1079 BD0D 8D 4D B7			sta trackn_audf+1
  1080 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0L
  1081 					lda trackn_audc+0
  1082 					and #$10
  1083 					bne qq3a
  1084 					EIF
  1085 BD10 A9 00			lda #0
  1086 BD12 8D 50 B7			sta trackn_audc+0
  1087 BD15			qq3a
  1088 BD15 8A				txa
  1089 BD16 09 50			ora #$50
  1090 BD18 AA				tax
  1091 					EIF
  1092 BD19			qq4
  1093 					IFT FEAT_BASS16G3L
  1094 					lda trackn_command+3
  1095 					and #$0e
  1096 					cmp #6
  1097 					bne qq5
  1098 					lda trackn_audc+3
  1099 					and #$0f
  1100 					beq qq5
  1101 					ldy trackn_outnote+3
  1102 					lda frqtabbasslo,y
  1103 					sta trackn_audf+2
  1104 					lda frqtabbasshi,y
  1105 					sta trackn_audf+3
  1106 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
  1107 					lda trackn_audc+2
  1108 					and #$10
  1109 					bne qq4a
  1110 					EIF
  1111 					lda #0
  1112 					sta trackn_audc+2
  1113 				qq4a
  1114 					txa
  1115 					ora #$28
  1116 					tax
  1117 					EIF
  1118 					EIF
  1119 BD19			qq5
  1120 BD19 8E 20 BD			stx v_audctl
  1121 					IFT TRACKS>4
  1122 					IFT FEAT_AUDCTLMANUALSET
  1123 					lda trackn_audctl+4
  1124 					ora trackn_audctl+5
  1125 					ora trackn_audctl+6
  1126 					ora trackn_audctl+7
  1127 					tax
  1128 					ELS
  1129 					ldx #0
  1130 					EIF
  1131 					stx v_audctl2
  1132 					IFT FEAT_FILTER
  1133 					IFT FEAT_FILTERG0R
  1134 					lda trackn_command+0+4
  1135 					bpl qs2
  1136 					lda trackn_audc+0+4
  1137 					and #$0f
  1138 					beq qs2
  1139 					lda trackn_audf+0+4
  1140 					clc
  1141 					adc trackn_filter+0+4
  1142 					sta trackn_audf+2+4
  1143 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1144 					lda trackn_audc+2+4
  1145 					and #$10
  1146 					bne qs1a
  1147 					EIF
  1148 					lda #0
  1149 					sta trackn_audc+2+4
  1150 				qs1a
  1151 					txa
  1152 					ora #4
  1153 					tax
  1154 					EIF
  1155 				qs2
  1156 					IFT FEAT_FILTERG1R
  1157 					lda trackn_command+1+4
  1158 					bpl qs3
  1159 					lda trackn_audc+1+4
  1160 					and #$0f
  1161 					beq qs3
  1162 					lda trackn_audf+1+4
  1163 					clc
  1164 					adc trackn_filter+1+4
  1165 					sta trackn_audf+3+4
  1166 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3R
  1167 					lda trackn_audc+3+4
  1168 					and #$10
  1169 					bne qs2a
  1170 					EIF
  1171 					lda #0
  1172 					sta trackn_audc+3+4
  1173 				qs2a
  1174 					txa
  1175 					ora #2
  1176 					tax
  1177 					EIF
  1178 				qs3
  1179 					IFT FEAT_FILTERG0R||FEAT_FILTERG1R
  1180 					cpx v_audctl2
  1181 					bne qs5
  1182 					EIF
  1183 					EIF
  1184 					IFT FEAT_BASS16
  1185 					IFT FEAT_BASS16G1R
  1186 					lda trackn_command+1+4
  1187 					and #$0e
  1188 					cmp #6
  1189 					bne qs4
  1190 					lda trackn_audc+1+4
  1191 					and #$0f
  1192 					beq qs4
  1193 					ldy trackn_outnote+1+4
  1194 					lda frqtabbasslo,y
  1195 					sta trackn_audf+0+4
  1196 					lda frqtabbasshi,y
  1197 					sta trackn_audf+1+4
  1198 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0R
  1199 					lda trackn_audc+0+4
  1200 					and #$10
  1201 					bne qs3a
  1202 					EIF
  1203 					lda #0
  1204 					sta trackn_audc+0+4
  1205 				qs3a
  1206 					txa
  1207 					ora #$50
  1208 					tax
  1209 					EIF
  1210 				qs4
  1211 					IFT FEAT_BASS16G3R
  1212 					lda trackn_command+3+4
  1213 					and #$0e
  1214 					cmp #6
  1215 					bne qs5
  1216 					lda trackn_audc+3+4
  1217 					and #$0f
  1218 					beq qs5
  1219 					ldy trackn_outnote+3+4
  1220 					lda frqtabbasslo,y
  1221 					sta trackn_audf+2+4
  1222 					lda frqtabbasshi,y
  1223 					sta trackn_audf+3+4
  1224 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1225 					lda trackn_audc+2+4
  1226 					and #$10
  1227 					bne qs4a
  1228 					EIF
  1229 					lda #0
  1230 					sta trackn_audc+2+4
  1231 				qs4a
  1232 					txa
  1233 					ora #$28
  1234 					tax
  1235 					EIF
  1236 					EIF
  1237 				qs5
  1238 					stx v_audctl2
  1239 					EIF
  1240 BD1C			rmt_p5
  1241 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
  1242 					lda #$ff
  1243 				v_ainstrspeed equ *-1
  1244 					ELS
  1245 BD1C A9 01			lda #1
  1246 					EIF
  1247 BD1E 60				rts
  1248 BD1F			SetPokey
  1249 					IFT STEREOMODE==1		;* L1 L2 L3 L4 R1 R2 R3 R4
  1250 					ldy #$ff
  1251 				v_audctl2 equ *-1
  1252 					lda trackn_audf+0+4
  1253 					ldx trackn_audf+0
  1254 				xstastx01	sta $d210
  1255 					stx $d200
  1256 					lda trackn_audc+0+4
  1257 					ldx trackn_audc+0
  1258 				xstastx02	sta $d211
  1259 					stx $d201
  1260 					lda trackn_audf+1+4
  1261 					ldx trackn_audf+1
  1262 				xstastx03	sta $d212
  1263 					stx $d202
  1264 					lda trackn_audc+1+4
  1265 					ldx trackn_audc+1
  1266 				xstastx04	sta $d213
  1267 					stx $d203
  1268 					lda trackn_audf+2+4
  1269 					ldx trackn_audf+2
  1270 				xstastx05	sta $d214
  1271 					stx $d204
  1272 					lda trackn_audc+2+4
  1273 					ldx trackn_audc+2
  1274 				xstastx06	sta $d215
  1275 					stx $d205
  1276 					lda trackn_audf+3+4
  1277 					ldx trackn_audf+3
  1278 				xstastx07	sta $d216
  1279 					stx $d206
  1280 					lda trackn_audc+3+4
  1281 					ldx trackn_audc+3
  1282 				xstastx08	sta $d217
  1283 					stx $d207
  1284 					lda #$ff
  1285 				v_audctl equ *-1
  1286 				xstysta01	sty $d218
  1287 					sta $d208
  1288 					ELI STEREOMODE==0		;* L1 L2 L3 L4
  1289 BD1F A0 FF			ldy #$ff
  1290 = BD20			v_audctl equ *-1
  1291 BD21 AD 4C B7			lda trackn_audf+0
  1292 BD24 AE 50 B7			ldx trackn_audc+0
  1293 BD27 8D 00 D2			sta $d200
  1294 BD2A 8E 01 D2			stx $d201
  1295 BD2D AD 4D B7			lda trackn_audf+1
  1296 BD30 AE 51 B7			ldx trackn_audc+1
  1297 BD33 8D 02 D2			sta $d200+2
  1298 BD36 8E 03 D2			stx $d201+2
  1299 BD39 AD 4E B7			lda trackn_audf+2
  1300 BD3C AE 52 B7			ldx trackn_audc+2
  1301 BD3F 8D 04 D2			sta $d200+4
  1302 BD42 8E 05 D2			stx $d201+4
  1303 BD45 AD 4F B7			lda trackn_audf+3
  1304 BD48 AE 53 B7			ldx trackn_audc+3
  1305 BD4B 8D 06 D2			sta $d200+6
  1306 BD4E 8E 07 D2			stx $d201+6
  1307 BD51 8C 08 D2			sty $d208
  1308 					ELI STEREOMODE==2		;* L1 R2 R3 L4
  1309 					ldy #$ff
  1310 				v_audctl equ *-1
  1311 					lda trackn_audf+0
  1312 					ldx trackn_audc+0
  1313 					sta $d200
  1314 					stx $d201
  1315 					sta $d210
  1316 					lda trackn_audf+1
  1317 					ldx trackn_audc+1
  1318 					sta $d210+2
  1319 					stx $d211+2
  1320 					lda trackn_audf+2
  1321 					ldx trackn_audc+2
  1322 					sta $d210+4
  1323 					stx $d211+4
  1324 					sta $d200+4
  1325 					lda trackn_audf+3
  1326 					ldx trackn_audc+3
  1327 					sta $d200+6
  1328 					stx $d201+6
  1329 					sta $d210+6
  1330 					sty $d218
  1331 					sty $d208
  1332 					ELI STEREOMODE==3		;* L1 L2 R3 R4
  1333 					ldy #$ff
  1334 				v_audctl equ *-1
  1335 					lda trackn_audf+0
  1336 					ldx trackn_audc+0
  1337 					sta $d200
  1338 					stx $d201
  1339 					lda trackn_audf+1
  1340 					ldx trackn_audc+1
  1341 					sta $d200+2
  1342 					stx $d201+2
  1343 					lda trackn_audf+2
  1344 					ldx trackn_audc+2
  1345 					sta $d210+4
  1346 					stx $d211+4
  1347 					sta $d200+4
  1348 					lda trackn_audf+3
  1349 					ldx trackn_audc+3
  1350 					sta $d210+6
  1351 					stx $d211+6
  1352 					sta $d200+6
  1353 					sty $d218
  1354 					sty $d208
  1355 					EIF
  1356 BD54 60				rts
  1357 BD55			RMTPLAYEREND
  7595 						
  7596 02E0-02E1> 28 21					run	run
  7597
  7598 							
